/*
Deployment script for MP2020_DEV

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "MP2020_DEV"
:setvar DefaultFilePrefix "MP2020_DEV"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
/*
The column rfq_version_id on table [dbo].[mp_rfq_revision] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[mp_rfq_revision])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column awarded_price in table [dbo].[mp_rfq_shopiq_metrics] is currently  DECIMAL (15, 2) NULL but is being changed to  DECIMAL (15, 4) NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  DECIMAL (15, 4) NULL.
*/

IF EXISTS (select top 1 1 from [dbo].[mp_rfq_shopiq_metrics])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping Index [dbo].[mp_communication_details].[IX_mpcd_compid_commid]...';


GO
DROP INDEX [IX_mpcd_compid_commid]
    ON [dbo].[mp_communication_details];


GO
PRINT N'Dropping Index [dbo].[mp_companies].[<Name of Missing Index, sysname,>]...';


GO
DROP INDEX [<Name of Missing Index, sysname,>]
    ON [dbo].[mp_companies];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_IsOrderManagementTileViewed]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF_IsOrderManagementTileViewed];


GO
PRINT N'Dropping Default Constraint unnamed constraint on [dbo].[mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF__mp_contac__IsTes__69A3530F];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_contac__show___3493CFA7]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF__mp_contac__show___3493CFA7];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_contac__show___3587F3E0]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF__mp_contac__show___3587F3E0];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_contac__is_ac__69FBBC1F]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF__mp_contac__is_ac__69FBBC1F];


GO
PRINT N'Dropping Default Constraint unnamed constraint on [dbo].[mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF__mp_contac__conta__61316BF4];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_contac__incot__236943A5]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF__mp_contac__incot__236943A5];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_contac__is_no__245D67DE]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF__mp_contac__is_no__245D67DE];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_contac__is_ma__25518C17]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF__mp_contac__is_ma__25518C17];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_mp_contacts_Is_External_Registration]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF_mp_contacts_Is_External_Registration];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_mp_contacts_Is_Validated_Buyer]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF_mp_contacts_Is_Validated_Buyer];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_IsOrderManagementChecked]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF_IsOrderManagementChecked];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_contac__is_ad__1F98B2C1]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF__mp_contac__is_ad__1F98B2C1];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_contac__creat__47A6A41B]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF__mp_contac__creat__47A6A41B];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_contac__recor__22751F6C]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF__mp_contac__recor__22751F6C];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_contac__modif__489AC854]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF__mp_contac__modif__489AC854];


GO
PRINT N'Dropping Default Constraint unnamed constraint on [dbo].[mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [DF__mp_contac__is_cu__2622516A];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_mp_gateway_subscriptions_created]...';


GO
ALTER TABLE [dbo].[mp_gateway_subscriptions] DROP CONSTRAINT [DF_mp_gateway_subscriptions_created];


GO
PRINT N'Dropping Default Constraint unnamed constraint on [dbo].[mp_rfq_shopiq_metrics]...';


GO
ALTER TABLE [dbo].[mp_rfq_shopiq_metrics] DROP CONSTRAINT [DF__tmp_ms_xx__is_aw__0F8311E0];


GO
PRINT N'Dropping Default Constraint unnamed constraint on [dbo].[mp_rfq_shopiq_metrics]...';


GO
ALTER TABLE [dbo].[mp_rfq_shopiq_metrics] DROP CONSTRAINT [DF__mp_rfq_sh__avg_m__4EBD1842];


GO
PRINT N'Dropping Default Constraint unnamed constraint on [dbo].[mp_rfq_shopiq_metrics]...';


GO
ALTER TABLE [dbo].[mp_rfq_shopiq_metrics] DROP CONSTRAINT [DF__mp_rfq_sh__award__4FB13C7B];


GO
PRINT N'Dropping Default Constraint unnamed constraint on [dbo].[mp_rfq_shopiq_metrics]...';


GO
ALTER TABLE [dbo].[mp_rfq_shopiq_metrics] DROP CONSTRAINT [DF__mp_rfq_sh__HighP__50A560B4];


GO
PRINT N'Dropping Default Constraint unnamed constraint on [dbo].[mp_rfq_shopiq_metrics]...';


GO
ALTER TABLE [dbo].[mp_rfq_shopiq_metrics] DROP CONSTRAINT [DF__tmp_ms_xx__metri__125F7E8B];


GO
PRINT N'Dropping Default Constraint unnamed constraint on [dbo].[mp_rfq_shopiq_metrics]...';


GO
ALTER TABLE [dbo].[mp_rfq_shopiq_metrics] DROP CONSTRAINT [DF__mp_rfq_sh__LowPr__519984ED];


GO
PRINT N'Dropping Default Constraint unnamed constraint on [dbo].[mpBlockedDomainList]...';


GO
ALTER TABLE [dbo].[mpBlockedDomainList] DROP CONSTRAINT [DF__mpBlocked__IsBlo__0D596939];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_track___activ__5BB7F033]...';


GO
ALTER TABLE [dbo].[mp_track_user_activities] DROP CONSTRAINT [DF__mp_track___activ__5BB7F033];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_mp_companies_is_magic_lead_enable]...';


GO
ALTER TABLE [dbo].[mp_companies] DROP CONSTRAINT [DF_mp_companies_is_magic_lead_enable];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_rfq__ExcludeF__0D8BADCA]...';


GO
ALTER TABLE [dbo].[mp_rfq] DROP CONSTRAINT [DF__mp_rfq__ExcludeF__0D8BADCA];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_rfq__IsArchiv__5C7176B2]...';


GO
ALTER TABLE [dbo].[mp_rfq] DROP CONSTRAINT [DF__mp_rfq__IsArchiv__5C7176B2];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_rfq__IsCommun__34E341D2]...';


GO
ALTER TABLE [dbo].[mp_rfq] DROP CONSTRAINT [DF__mp_rfq__IsCommun__34E341D2];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_rfq__IsCommun__37CB66CC]...';


GO
ALTER TABLE [dbo].[mp_rfq] DROP CONSTRAINT [DF__mp_rfq__IsCommun__37CB66CC];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_rfq__IsCommun__38BF8B05]...';


GO
ALTER TABLE [dbo].[mp_rfq] DROP CONSTRAINT [DF__mp_rfq__IsCommun__38BF8B05];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_rfq__WillDoLa__04C42338]...';


GO
ALTER TABLE [dbo].[mp_rfq] DROP CONSTRAINT [DF__mp_rfq__WillDoLa__04C42338];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_rfq_re__is_Cl__7EC1CEDB]...';


GO
ALTER TABLE [dbo].[mp_rfq_revision] DROP CONSTRAINT [DF__mp_rfq_re__is_Cl__7EC1CEDB];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mp_rfq_re__need___7FB5F314]...';


GO
ALTER TABLE [dbo].[mp_rfq_revision] DROP CONSTRAINT [DF__mp_rfq_re__need___7FB5F314];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mpCommuni__Creat__40A23A9D]...';


GO
ALTER TABLE [dbo].[mpCommunityDirectRfqs] DROP CONSTRAINT [DF__mpCommuni__Creat__40A23A9D];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mpCommuni__IsNda__3DC5CDF2]...';


GO
ALTER TABLE [dbo].[mpCommunityDirectRfqs] DROP CONSTRAINT [DF__mpCommuni__IsNda__3DC5CDF2];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mpCommuni__IsNda__3EB9F22B]...';


GO
ALTER TABLE [dbo].[mpCommunityDirectRfqs] DROP CONSTRAINT [DF__mpCommuni__IsNda__3EB9F22B];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__mpCommuni__Wants__3FAE1664]...';


GO
ALTER TABLE [dbo].[mpCommunityDirectRfqs] DROP CONSTRAINT [DF__mpCommuni__Wants__3FAE1664];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_mpGrowthPackageUnlockRFQsInfo_IsDeleted]...';


GO
ALTER TABLE [dbo].[mpGrowthPackageUnlockRFQsInfo] DROP CONSTRAINT [DF_mpGrowthPackageUnlockRFQsInfo_IsDeleted];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_IsDeleted]...';


GO
ALTER TABLE [dbo].[mpOrderManagement] DROP CONSTRAINT [DF_IsDeleted];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_contacts_prefcountry_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_contacts_prefcountry] DROP CONSTRAINT [FK_mp_contacts_prefcountry_mp_contacts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_contacts_preferences_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_contacts_preferences] DROP CONSTRAINT [FK_mp_contacts_preferences_mp_contacts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_messages_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_messages] DROP CONSTRAINT [FK_mp_messages_mp_contacts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_messages_mp_contacts1]...';


GO
ALTER TABLE [dbo].[mp_messages] DROP CONSTRAINT [FK_mp_messages_mp_contacts1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_rfq_versions_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_rfq_versions] DROP CONSTRAINT [FK_mp_rfq_versions_mp_contacts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_scheduled_job_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_scheduled_job] DROP CONSTRAINT [FK_mp_scheduled_job_mp_contacts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_rfq_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_rfq] DROP CONSTRAINT [FK_mp_rfq_mp_contacts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_gateway_subscription_customers_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_gateway_subscription_customers] DROP CONSTRAINT [FK_mp_gateway_subscription_customers_mp_contacts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_accepted_nda_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_accepted_nda] DROP CONSTRAINT [FK_mp_accepted_nda_mp_contacts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_communication_details_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_communication_details] DROP CONSTRAINT [FK_mp_communication_details_mp_contacts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_parts_versions_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_parts_versions] DROP CONSTRAINT [FK_mp_parts_versions_mp_contacts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_regional_options_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_regional_options] DROP CONSTRAINT [FK_mp_regional_options_mp_contacts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_contacts_mp_addresses]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [FK_mp_contacts_mp_addresses];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_contacts_mp_mst_roles]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [FK_mp_contacts_mp_mst_roles];


GO
PRINT N'Dropping Foreign Key [dbo].[fk_mp_contacts_mp_system_parameters]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [fk_mp_contacts_mp_system_parameters];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_contacts_To_mp_mst_incoterm]...';


GO
ALTER TABLE [dbo].[mp_contacts] DROP CONSTRAINT [FK_mp_contacts_To_mp_mst_incoterm];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_contacts_buyersellerassociation_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_contacts_buyersellerassociation] DROP CONSTRAINT [FK_mp_contacts_buyersellerassociation_mp_contacts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_contacts_buyersellerassociation_mp_contacts1]...';


GO
ALTER TABLE [dbo].[mp_contacts_buyersellerassociation] DROP CONSTRAINT [FK_mp_contacts_buyersellerassociation_mp_contacts1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_gateway_subscriptions_mp_gateway_subscription_customers]...';


GO
ALTER TABLE [dbo].[mp_gateway_subscriptions] DROP CONSTRAINT [FK_mp_gateway_subscriptions_mp_gateway_subscription_customers];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_gateway_subscription_customers_cards_mp_gateway_subscriptions]...';


GO
ALTER TABLE [dbo].[mp_gateway_subscription_customers_cards] DROP CONSTRAINT [FK_mp_gateway_subscription_customers_cards_mp_gateway_subscriptions];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_lead_email_mappings_mp_lead]...';


GO
ALTER TABLE [dbo].[mp_lead_email_mappings] DROP CONSTRAINT [FK_mp_lead_email_mappings_mp_lead];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_lead_email_mappings_mp_lead_emails]...';


GO
ALTER TABLE [dbo].[mp_lead_email_mappings] DROP CONSTRAINT [FK_mp_lead_email_mappings_mp_lead_emails];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_rfq_quote_items_mp_rfq_parts]...';


GO
ALTER TABLE [dbo].[mp_rfq_quote_items] DROP CONSTRAINT [FK_mp_rfq_quote_items_mp_rfq_parts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_rfq_part_quantity_mp_rfq_parts]...';


GO
ALTER TABLE [dbo].[mp_rfq_part_quantity] DROP CONSTRAINT [FK_mp_rfq_part_quantity_mp_rfq_parts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_rfq_parts_mp_rfq]...';


GO
ALTER TABLE [dbo].[mp_rfq_parts] DROP CONSTRAINT [FK_mp_rfq_parts_mp_rfq];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_rfq_parts_mp_parts]...';


GO
ALTER TABLE [dbo].[mp_rfq_parts] DROP CONSTRAINT [FK_mp_rfq_parts_mp_parts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_rfq_parts_file_mp_rfq_parts]...';


GO
ALTER TABLE [dbo].[mp_rfq_parts_file] DROP CONSTRAINT [FK_mp_rfq_parts_file_mp_rfq_parts];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_rfq_quote_items_mp_rfq_part_quantity]...';


GO
ALTER TABLE [dbo].[mp_rfq_quote_items] DROP CONSTRAINT [FK_mp_rfq_quote_items_mp_rfq_part_quantity];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_rfq_quote_items_mp_rfq_quote_SupplierQuote]...';


GO
ALTER TABLE [dbo].[mp_rfq_quote_items] DROP CONSTRAINT [FK_mp_rfq_quote_items_mp_rfq_quote_SupplierQuote];


GO
PRINT N'Dropping Foreign Key [dbo].[fk_mp_rfq_quote_items_OrderManagementId_mpOrderManagement_Id]...';


GO
ALTER TABLE [dbo].[mpOrderManagementPartStatusChangeLogs] DROP CONSTRAINT [fk_mp_rfq_quote_items_OrderManagementId_mpOrderManagement_Id];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mp_rfq_revision_mp_rfq_versions]...';


GO
ALTER TABLE [dbo].[mp_rfq_revision] DROP CONSTRAINT [FK_mp_rfq_revision_mp_rfq_versions];


GO
PRINT N'Dropping Foreign Key [dbo].[fk_mpCommunityDirectRfqs_mp_lead_LeadId_LeadId]...';


GO
ALTER TABLE [dbo].[mpCommunityDirectRfqs] DROP CONSTRAINT [fk_mpCommunityDirectRfqs_mp_lead_LeadId_LeadId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK__mp_lead__lead_so__21AD7A6A]...';


GO
ALTER TABLE [dbo].[mp_lead] DROP CONSTRAINT [FK__mp_lead__lead_so__21AD7A6A];


GO
PRINT N'Dropping Foreign Key [dbo].[FK__mp_track___activ__5CAC146C]...';


GO
ALTER TABLE [dbo].[mp_track_user_activities] DROP CONSTRAINT [FK__mp_track___activ__5CAC146C];


GO
PRINT N'Dropping Procedure [dbo].[proc_set_lead_emails]...';


GO
DROP PROCEDURE [dbo].[proc_set_lead_emails];


GO
PRINT N'Dropping User-Defined Table Type [dbo].[tbltype_lead_emails]...';


GO
DROP TYPE [dbo].[tbltype_lead_emails];


GO
PRINT N'Creating Login [mfg_delaplex]...';


GO
CREATE LOGIN [mfg_delaplex]
    WITH PASSWORD = N'5nmbbQ^Yrwc+dcu<yqxdww|dmsFT7_&#$!~<{ybd{|s0cou:', SID = 0xA8C12F0D39ACBE4FB172DFF9EEC38DAC, DEFAULT_LANGUAGE = [us_english], CHECK_POLICY = OFF;


GO
PRINT N'Creating Login [mfg_prod]...';


GO
CREATE LOGIN [mfg_prod]
    WITH PASSWORD = N'!nmbb^rgwcd{V>cuNyqxdww`msFT7_&#$!~<|qd{b1d{scou', SID = 0xE6E145541E543942A4BF259FBE302990, DEFAULT_LANGUAGE = [us_english], CHECK_POLICY = OFF;


GO
PRINT N'Creating User [mfg_delaplex]...';


GO
CREATE USER [mfg_delaplex] FOR LOGIN [mfg_delaplex];


GO
REVOKE CONNECT TO [mfg_delaplex];


GO
PRINT N'Creating User [mfg_prod]...';


GO
CREATE USER [mfg_prod] FOR LOGIN [mfg_prod];


GO
REVOKE CONNECT TO [mfg_prod];


GO
PRINT N'Creating Role Membership <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'mfg_prod';


GO
PRINT N'Creating Role Membership <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'mfg_delaplex';


GO
PRINT N'Altering Schema [tmp_trans]...';


GO
ALTER AUTHORIZATION
    ON SCHEMA::[tmp_trans]
    TO [mfg_prod];


GO
PRINT N'Creating User-Defined Table Type [dbo].[tbltype_lead_emails]...';


GO
CREATE TYPE [dbo].[tbltype_lead_emails] AS TABLE (
    [first_name]      VARCHAR (150)  NULL,
    [last_name]       VARCHAR (150)  NULL,
    [company]         VARCHAR (250)  NULL,
    [email]           VARCHAR (150)  NULL,
    [phoneno]         VARCHAR (50)   NULL,
    [email_subject]   VARCHAR (250)  NULL,
    [email_message]   VARCHAR (1100) NULL,
    [files]           VARCHAR (2000) NULL,
    [is_nda_required] BIT            DEFAULT ((0)) NULL);


GO
PRINT N'Altering Table [dbo].[HubSpotWebhookCustomerServiceRepExecutionLogs]...';


GO
ALTER TABLE [dbo].[HubSpotWebhookCustomerServiceRepExecutionLogs] ALTER COLUMN [HubSpotUserId] VARCHAR (200) NULL;


GO
ALTER TABLE [dbo].[HubSpotWebhookCustomerServiceRepExecutionLogs]
    ADD [PreviousCustomerServiceRepContactId] INT NULL;


GO
PRINT N'Starting rebuilding table [dbo].[mp_contacts]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_mp_contacts] (
    [contact_id]                        INT            IDENTITY (1, 1) NOT NULL,
    [company_id]                        INT            NULL,
    [language_id]                       SMALLINT       NULL,
    [title]                             NVARCHAR (100) NULL,
    [first_name]                        NVARCHAR (100) NULL,
    [last_name]                         NVARCHAR (100) NULL,
    [contact_function]                  NVARCHAR (100) NULL,
    [is_buyer]                          BIT            NOT NULL,
    [is_admin]                          BIT            CONSTRAINT [DF__mp_contac__is_ad__1F98B2C1] DEFAULT ((1)) NOT NULL,
    [created_on]                        DATETIME       CONSTRAINT [DF__mp_contac__creat__47A6A41B] DEFAULT (getdate()) NULL,
    [modified_on]                       DATETIME       CONSTRAINT [DF__mp_contac__modif__489AC854] DEFAULT (getdate()) NULL,
    [address_id]                        INT            NULL,
    [record_origin_id]                  SMALLINT       CONSTRAINT [DF__mp_contac__recor__22751F6C] DEFAULT ((0)) NOT NULL,
    [incoterm_id]                       SMALLINT       CONSTRAINT [DF__mp_contac__incot__236943A5] DEFAULT ((0)) NOT NULL,
    [comments]                          NVARCHAR (MAX) NULL,
    [is_notify_by_email]                BIT            CONSTRAINT [DF__mp_contac__is_no__245D67DE] DEFAULT ((0)) NOT NULL,
    [is_mail_in_HTML]                   BIT            CONSTRAINT [DF__mp_contac__is_ma__25518C17] DEFAULT ((1)) NOT NULL,
    [show_deltailed_rating]             BIT            CONSTRAINT [DF__mp_contac__show___3493CFA7] DEFAULT ((0)) NOT NULL,
    [show_RFQ_award_stat]               BIT            CONSTRAINT [DF__mp_contac__show___3587F3E0] DEFAULT ((0)) NOT NULL,
    [user_id]                           NVARCHAR (450) NULL,
    [role_id]                           SMALLINT       NULL,
    [is_active]                         BIT            CONSTRAINT [DF__mp_contac__is_ac__69FBBC1F] DEFAULT ((1)) NOT NULL,
    [user_zoho_id]                      VARCHAR (200)  NULL,
    [zoho_user_status]                  INT            NULL,
    [contact_type_id]                   INT            DEFAULT ((0)) NULL,
    [Is_Validated_Buyer]                BIT            CONSTRAINT [DF_mp_contacts_Is_Validated_Buyer] DEFAULT ((0)) NULL,
    [last_login_on]                     DATETIME       NULL,
    [total_login_count]                 INT            NULL,
    [ms_booking_url]                    VARCHAR (500)  NULL,
    [SalesloftPeopleId]                 INT            NULL,
    [Is_External_Registration]          BIT            CONSTRAINT [DF_mp_contacts_Is_External_Registration] DEFAULT ((0)) NULL,
    [is_customer_rep]                   BIT            DEFAULT ((0)) NULL,
    [IsTestAccount]                     BIT            DEFAULT ((0)) NULL,
    [IpAddress]                         VARCHAR (100)  NULL,
    [VisionValidatedDate]               DATETIME       NULL,
    [HubSpotContactId]                  VARCHAR (255)  NULL,
    [IsOrderManagementChecked]          BIT            CONSTRAINT [DF_IsOrderManagementChecked] DEFAULT ((0)) NULL,
    [IsOrderManagementTileViewed]       BIT            CONSTRAINT [DF_IsOrderManagementTileViewed] DEFAULT ((0)) NULL,
    [StripeConnectID]                   VARCHAR (250)  NULL,
    [BuyerLastAwardingNotificationDate] DATETIME       NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_mp_contacts1] PRIMARY KEY CLUSTERED ([contact_id] ASC) WITH (FILLFACTOR = 90)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[mp_contacts])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_contacts] ON;
        INSERT INTO [dbo].[tmp_ms_xx_mp_contacts] ([contact_id], [company_id], [language_id], [title], [first_name], [last_name], [contact_function], [is_buyer], [is_admin], [created_on], [modified_on], [address_id], [record_origin_id], [incoterm_id], [comments], [is_notify_by_email], [is_mail_in_HTML], [show_deltailed_rating], [show_RFQ_award_stat], [user_id], [role_id], [is_active], [user_zoho_id], [zoho_user_status], [contact_type_id], [Is_Validated_Buyer], [last_login_on], [total_login_count], [ms_booking_url], [SalesloftPeopleId], [Is_External_Registration], [is_customer_rep], [IsTestAccount], [IpAddress], [VisionValidatedDate], [IsOrderManagementChecked], [IsOrderManagementTileViewed], [HubSpotContactId], [StripeConnectID], [BuyerLastAwardingNotificationDate])
        SELECT   [contact_id],
                 [company_id],
                 [language_id],
                 [title],
                 [first_name],
                 [last_name],
                 [contact_function],
                 [is_buyer],
                 [is_admin],
                 [created_on],
                 [modified_on],
                 [address_id],
                 [record_origin_id],
                 [incoterm_id],
                 [comments],
                 [is_notify_by_email],
                 [is_mail_in_HTML],
                 [show_deltailed_rating],
                 [show_RFQ_award_stat],
                 [user_id],
                 [role_id],
                 [is_active],
                 [user_zoho_id],
                 [zoho_user_status],
                 [contact_type_id],
                 [Is_Validated_Buyer],
                 [last_login_on],
                 [total_login_count],
                 [ms_booking_url],
                 [SalesloftPeopleId],
                 [Is_External_Registration],
                 [is_customer_rep],
                 [IsTestAccount],
                 [IpAddress],
                 [VisionValidatedDate],
                 [IsOrderManagementChecked],
                 [IsOrderManagementTileViewed],
                 [HubSpotContactId],
                 [StripeConnectID],
                 [BuyerLastAwardingNotificationDate]
        FROM     [dbo].[mp_contacts]
        ORDER BY [contact_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_contacts] OFF;
    END

DROP TABLE [dbo].[mp_contacts];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_mp_contacts]', N'mp_contacts';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_mp_contacts1]', N'PK_mp_contacts', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [dbo].[mp_contacts].[IX_mp_contacts_01]...';


GO
CREATE NONCLUSTERED INDEX [IX_mp_contacts_01]
    ON [dbo].[mp_contacts]([company_id] ASC) WITH (FILLFACTOR = 90);


GO
PRINT N'Creating Index [dbo].[mp_contacts].[IX_mp_contacts_is_buyer_company_id]...';


GO
CREATE NONCLUSTERED INDEX [IX_mp_contacts_is_buyer_company_id]
    ON [dbo].[mp_contacts]([is_buyer] ASC, [company_id] ASC)
    INCLUDE([address_id]) WITH (FILLFACTOR = 90);


GO
PRINT N'Creating Index [dbo].[mp_contacts].[IX_mp_contacts_is_buyer_IsTestAccount]...';


GO
CREATE NONCLUSTERED INDEX [IX_mp_contacts_is_buyer_IsTestAccount]
    ON [dbo].[mp_contacts]([is_buyer] ASC, [IsTestAccount] ASC)
    INCLUDE([company_id]) WITH (FILLFACTOR = 90);


GO
PRINT N'Creating Index [dbo].[mp_contacts].[IX_mp_contacts_address_id]...';


GO
CREATE NONCLUSTERED INDEX [IX_mp_contacts_address_id]
    ON [dbo].[mp_contacts]([address_id] ASC)
    INCLUDE([company_id]) WITH (FILLFACTOR = 90);


GO
PRINT N'Creating Index [dbo].[mp_contacts].[IX_mp_contacts_is_buyer_created_on]...';


GO
CREATE NONCLUSTERED INDEX [IX_mp_contacts_is_buyer_created_on]
    ON [dbo].[mp_contacts]([is_buyer] ASC, [created_on] ASC) WITH (FILLFACTOR = 90);


GO
PRINT N'Starting rebuilding table [dbo].[mp_gateway_subscriptions]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_mp_gateway_subscriptions] (
    [id]                        INT            IDENTITY (1001, 1) NOT NULL,
    [subscription_id]           VARCHAR (250)  NOT NULL,
    [customer_id]               INT            NOT NULL,
    [plan_id]                   INT            NOT NULL,
    [created_at]                DATETIME       NULL,
    [next_billing_at]           DATETIME       NULL,
    [subscription_start]        DATETIME       NULL,
    [subscription_end]          DATETIME       NULL,
    [status]                    VARCHAR (250)  NULL,
    [created]                   DATETIME       CONSTRAINT [DF_mp_gateway_subscriptions_created] DEFAULT (getutcdate()) NULL,
    [modified]                  DATETIME       NULL,
    [addon]                     VARCHAR (250)  NULL,
    [addon_quantity]            SMALLINT       NULL,
    [zcrm_account_id]           BIGINT         NULL,
    [reference_id]              NVARCHAR (250) NULL,
    [PaymentStatus]             VARCHAR (250)  NULL,
    [SessionStatus]             VARCHAR (250)  NULL,
    [TotalAmout]                BIGINT         NULL,
    [SubscriptionInterval]      VARCHAR (250)  NULL,
    [SubscriptionIntervalCount] INT            NULL,
    [InvoiceId]                 VARCHAR (250)  NULL,
    [RequestType]               VARCHAR (50)   NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_mp_gateway_subscriptions_id1] PRIMARY KEY CLUSTERED ([id] ASC) WITH (FILLFACTOR = 90)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[mp_gateway_subscriptions])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_gateway_subscriptions] ON;
        INSERT INTO [dbo].[tmp_ms_xx_mp_gateway_subscriptions] ([id], [subscription_id], [customer_id], [plan_id], [created_at], [next_billing_at], [subscription_start], [subscription_end], [addon], [addon_quantity], [status], [created], [modified], [zcrm_account_id], [reference_id], [PaymentStatus], [SessionStatus], [TotalAmout], [SubscriptionInterval], [SubscriptionIntervalCount], [InvoiceId], [RequestType])
        SELECT   [id],
                 [subscription_id],
                 [customer_id],
                 [plan_id],
                 [created_at],
                 [next_billing_at],
                 [subscription_start],
                 [subscription_end],
                 [addon],
                 [addon_quantity],
                 [status],
                 [created],
                 [modified],
                 [zcrm_account_id],
                 [reference_id],
                 [PaymentStatus],
                 [SessionStatus],
                 [TotalAmout],
                 [SubscriptionInterval],
                 [SubscriptionIntervalCount],
                 [InvoiceId],
                 [RequestType]
        FROM     [dbo].[mp_gateway_subscriptions]
        ORDER BY [id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_gateway_subscriptions] OFF;
    END

DROP TABLE [dbo].[mp_gateway_subscriptions];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_mp_gateway_subscriptions]', N'mp_gateway_subscriptions';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_mp_gateway_subscriptions_id1]', N'PK_mp_gateway_subscriptions_id', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[mp_lead_email_mappings]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_mp_lead_email_mappings] (
    [lead_id]               INT NULL,
    [lead_email_message_id] INT NULL,
    [id]                    INT IDENTITY (100, 1) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_mp_lead_email_mappings1] PRIMARY KEY CLUSTERED ([id] ASC) WITH (FILLFACTOR = 90)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[mp_lead_email_mappings])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_lead_email_mappings] ON;
        INSERT INTO [dbo].[tmp_ms_xx_mp_lead_email_mappings] ([id], [lead_id], [lead_email_message_id])
        SELECT   [id],
                 [lead_id],
                 [lead_email_message_id]
        FROM     [dbo].[mp_lead_email_mappings]
        ORDER BY [id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_lead_email_mappings] OFF;
    END

DROP TABLE [dbo].[mp_lead_email_mappings];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_mp_lead_email_mappings]', N'mp_lead_email_mappings';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_mp_lead_email_mappings1]', N'PK_mp_lead_email_mappings', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [dbo].[mp_lead_email_mappings].[idx_mp_lead_email_mappings_lead_id_lead_email_message_id]...';


GO
CREATE NONCLUSTERED INDEX [idx_mp_lead_email_mappings_lead_id_lead_email_message_id]
    ON [dbo].[mp_lead_email_mappings]([lead_id] ASC, [lead_email_message_id] ASC) WITH (FILLFACTOR = 90);


GO
PRINT N'Starting rebuilding table [dbo].[mp_rfq_parts]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_mp_rfq_parts] (
    [rfq_part_id]                INT             IDENTITY (1, 1) NOT NULL,
    [part_id]                    BIGINT          NULL,
    [rfq_id]                     INT             NULL,
    [delivery_date]              DATETIME        NULL,
    [quantity_unit_id]           INT             NULL,
    [status_id]                  SMALLINT        NULL,
    [part_category_id]           INT             NULL,
    [created_date]               DATETIME        NULL,
    [modification_date]          DATETIME        NULL,
    [Post_Production_Process_id] INT             NULL,
    [Is_Rfq_Part_Default]        BIT             NULL,
    [ModifiedBy]                 INT             NULL,
    [min_part_quantity]          NUMERIC (18)    NULL,
    [min_part_quantity_unit]     VARCHAR (50)    NULL,
    [is_apply_delivery_date]     BIT             NULL,
    [material_id]                SMALLINT        NULL,
    [is_apply_process]           BIT             NULL,
    [is_apply_material]          BIT             NULL,
    [is_apply_post_process]      BIT             NULL,
    [is_child_category_selected] BIT             NULL,
    [is_existing_part]           BIT             NULL,
    [is_apply_parent_process]    BIT             NULL,
    [is_child_same_as_parent]    BIT             NULL,
    [parent_rfq_part_id]         INT             NULL,
    [AwardedStatusId]            INT             NULL,
    [AwardedUnit]                NUMERIC (18, 2) NULL,
    [AwardedPrice]               NUMERIC (18, 4) NULL,
    [AwardedUnitTypeId]          INT             NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_mp_rfq_parts1] PRIMARY KEY CLUSTERED ([rfq_part_id] ASC) WITH (FILLFACTOR = 90)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[mp_rfq_parts])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_rfq_parts] ON;
        INSERT INTO [dbo].[tmp_ms_xx_mp_rfq_parts] ([rfq_part_id], [part_id], [rfq_id], [delivery_date], [quantity_unit_id], [status_id], [part_category_id], [created_date], [modification_date], [Post_Production_Process_id], [Is_Rfq_Part_Default], [ModifiedBy], [min_part_quantity], [min_part_quantity_unit], [material_id], [is_apply_process], [is_apply_material], [is_apply_post_process], [is_apply_delivery_date], [is_existing_part], [is_apply_parent_process], [is_child_category_selected], [is_child_same_as_parent], [parent_rfq_part_id], [AwardedStatusId], [AwardedUnit], [AwardedPrice], [AwardedUnitTypeId])
        SELECT   [rfq_part_id],
                 [part_id],
                 [rfq_id],
                 [delivery_date],
                 [quantity_unit_id],
                 [status_id],
                 [part_category_id],
                 [created_date],
                 [modification_date],
                 [Post_Production_Process_id],
                 [Is_Rfq_Part_Default],
                 [ModifiedBy],
                 [min_part_quantity],
                 [min_part_quantity_unit],
                 [material_id],
                 [is_apply_process],
                 [is_apply_material],
                 [is_apply_post_process],
                 [is_apply_delivery_date],
                 [is_existing_part],
                 [is_apply_parent_process],
                 [is_child_category_selected],
                 [is_child_same_as_parent],
                 [parent_rfq_part_id],
                 [AwardedStatusId],
                 [AwardedUnit],
                 [AwardedPrice],
                 [AwardedUnitTypeId]
        FROM     [dbo].[mp_rfq_parts]
        ORDER BY [rfq_part_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_rfq_parts] OFF;
    END

DROP TABLE [dbo].[mp_rfq_parts];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_mp_rfq_parts]', N'mp_rfq_parts';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_mp_rfq_parts1]', N'PK_mp_rfq_parts', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [dbo].[mp_rfq_parts].[nc_mp_rfq_parts_part_id_rfq_id]...';


GO
CREATE NONCLUSTERED INDEX [nc_mp_rfq_parts_part_id_rfq_id]
    ON [dbo].[mp_rfq_parts]([part_id] ASC)
    INCLUDE([rfq_id]) WITH (FILLFACTOR = 90);


GO
PRINT N'Creating Index [dbo].[mp_rfq_parts].[IX_mp_rfq_parts_01]...';


GO
CREATE NONCLUSTERED INDEX [IX_mp_rfq_parts_01]
    ON [dbo].[mp_rfq_parts]([rfq_id] ASC)
    INCLUDE([part_id], [Post_Production_Process_id], [Is_Rfq_Part_Default]) WITH (FILLFACTOR = 90);


GO
PRINT N'Creating Index [dbo].[mp_rfq_parts].[idx_mp_rfq_parts_Is_Rfq_Part_Default_status_id]...';


GO
CREATE NONCLUSTERED INDEX [idx_mp_rfq_parts_Is_Rfq_Part_Default_status_id]
    ON [dbo].[mp_rfq_parts]([Is_Rfq_Part_Default] ASC, [status_id] ASC)
    INCLUDE([rfq_id]) WITH (FILLFACTOR = 90);


GO
PRINT N'Starting rebuilding table [dbo].[mp_rfq_quote_items]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_mp_rfq_quote_items] (
    [rfq_quote_items_id]             INT             IDENTITY (1, 1) NOT NULL,
    [rfq_quote_SupplierQuote_id]     INT             NOT NULL,
    [rfq_part_id]                    INT             NOT NULL,
    [per_unit_price]                 NUMERIC (18, 4) NOT NULL,
    [tooling_amount]                 NUMERIC (18, 4) NULL,
    [miscellaneous_amount]           NUMERIC (18, 4) NULL,
    [shipping_amount]                NUMERIC (18, 4) NULL,
    [rfq_part_quantity_id]           INT             NULL,
    [is_awrded]                      BIT             NULL,
    [awarded_qty]                    NUMERIC (18, 2) NULL,
    [awarded_date]                   DATETIME        NULL,
    [is_award_accepted]              BIT             NULL,
    [award_accepted_Or_decline_date] DATE            NULL,
    [est_lead_time_value]            DECIMAL (4, 1)  NULL,
    [est_lead_time_range]            VARCHAR (150)   NULL,
    [is_continue_awarding]           BIT             NULL,
    [status_id]                      INT             NULL,
    [unit]                           NUMERIC (18, 2) NULL,
    [unit_type_id]                   INT             NULL,
    [price]                          NUMERIC (18, 4) NULL,
    [ReshapePartStatus]              VARCHAR (25)    NULL,
    [AwardedRegionId]                INT             NULL,
    [AwardedCompanyId]               INT             NULL,
    [AwardedCompanyName]             NVARCHAR (300)  NULL,
    [AwardedWhyOfflineReason]        NVARCHAR (MAX)  NULL,
    [NotAwardedReason]               NVARCHAR (MAX)  NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_mp_rfq_quote_items1] PRIMARY KEY CLUSTERED ([rfq_quote_items_id] ASC) WITH (FILLFACTOR = 90)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[mp_rfq_quote_items])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_rfq_quote_items] ON;
        INSERT INTO [dbo].[tmp_ms_xx_mp_rfq_quote_items] ([rfq_quote_items_id], [rfq_quote_SupplierQuote_id], [rfq_part_id], [per_unit_price], [tooling_amount], [miscellaneous_amount], [shipping_amount], [rfq_part_quantity_id], [is_awrded], [awarded_qty], [awarded_date], [is_award_accepted], [award_accepted_Or_decline_date], [est_lead_time_value], [est_lead_time_range], [is_continue_awarding], [status_id], [unit], [price], [unit_type_id], [ReshapePartStatus], [AwardedRegionId], [AwardedCompanyId], [AwardedCompanyName], [AwardedWhyOfflineReason], [NotAwardedReason])
        SELECT   [rfq_quote_items_id],
                 [rfq_quote_SupplierQuote_id],
                 [rfq_part_id],
                 [per_unit_price],
                 [tooling_amount],
                 [miscellaneous_amount],
                 [shipping_amount],
                 [rfq_part_quantity_id],
                 [is_awrded],
                 [awarded_qty],
                 [awarded_date],
                 [is_award_accepted],
                 [award_accepted_Or_decline_date],
                 [est_lead_time_value],
                 [est_lead_time_range],
                 [is_continue_awarding],
                 [status_id],
                 [unit],
                 [price],
                 [unit_type_id],
                 [ReshapePartStatus],
                 [AwardedRegionId],
                 [AwardedCompanyId],
                 [AwardedCompanyName],
                 [AwardedWhyOfflineReason],
                 [NotAwardedReason]
        FROM     [dbo].[mp_rfq_quote_items]
        ORDER BY [rfq_quote_items_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_rfq_quote_items] OFF;
    END

DROP TABLE [dbo].[mp_rfq_quote_items];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_mp_rfq_quote_items]', N'mp_rfq_quote_items';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_mp_rfq_quote_items1]', N'PK_mp_rfq_quote_items', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [dbo].[mp_rfq_quote_items].[idx_mp_rfq_quote_items_is_awrded_rfq_quote_SupplierQuote_id]...';


GO
CREATE NONCLUSTERED INDEX [idx_mp_rfq_quote_items_is_awrded_rfq_quote_SupplierQuote_id]
    ON [dbo].[mp_rfq_quote_items]([is_awrded] ASC)
    INCLUDE([rfq_quote_SupplierQuote_id]) WITH (FILLFACTOR = 90);


GO
PRINT N'Creating Index [dbo].[mp_rfq_quote_items].[IDX_mp_rfq_quote_items]...';


GO
CREATE NONCLUSTERED INDEX [IDX_mp_rfq_quote_items]
    ON [dbo].[mp_rfq_quote_items]([rfq_quote_SupplierQuote_id] ASC)
    INCLUDE([rfq_part_id], [per_unit_price], [tooling_amount], [miscellaneous_amount], [shipping_amount], [rfq_part_quantity_id], [awarded_qty]) WITH (FILLFACTOR = 90);


GO
PRINT N'Creating Index [dbo].[mp_rfq_quote_items].[idx_mp_rfq_quote_items_is_awrded_status_id]...';


GO
CREATE NONCLUSTERED INDEX [idx_mp_rfq_quote_items_is_awrded_status_id]
    ON [dbo].[mp_rfq_quote_items]([is_awrded] ASC, [status_id] ASC)
    INCLUDE([rfq_quote_SupplierQuote_id], [awarded_date]) WITH (FILLFACTOR = 90);


GO
PRINT N'Altering Table [dbo].[mp_rfq_revision]...';


GO
ALTER TABLE [dbo].[mp_rfq_revision] ALTER COLUMN [rfq_version_id] BIGINT NOT NULL;


GO
PRINT N'Starting rebuilding table [dbo].[mp_rfq_shopiq_metrics]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_mp_rfq_shopiq_metrics] (
    [rfq_shopiq_id]        INT             IDENTITY (1, 1) NOT NULL,
    [rfq_id]               INT             NOT NULL,
    [rfq_part_id]          INT             NOT NULL,
    [rfq_part_quantity_id] INT             NULL,
    [quantity]             VARCHAR (75)    NULL,
    [is_awarded]           BIT             DEFAULT ((0)) NULL,
    [avg_marketprice]      DECIMAL (15, 2) DEFAULT ((0.0)) NULL,
    [awarded_price]        DECIMAL (15, 4) DEFAULT ((0.0)) NULL,
    [award_date]           DATETIME        NULL,
    [metrics_date]         DATETIME        DEFAULT (getutcdate()) NULL,
    [part_name]            VARCHAR (500)   NULL,
    [process]              VARCHAR (200)   NULL,
    [material]             VARCHAR (200)   NULL,
    [LowPrice]             DECIMAL (15, 2) DEFAULT ((0)) NULL,
    [HighPrice]            DECIMAL (15, 2) DEFAULT ((0)) NULL,
    [IsAwardedToOtherQty]  BIT             NULL,
    CONSTRAINT [tmp_ms_xx_constraint_pk_mp_rfq_shopiq_metrics_rfq_shopiq_id_rfq_id_rfq_part_id1] PRIMARY KEY CLUSTERED ([rfq_shopiq_id] ASC, [rfq_id] ASC, [rfq_part_id] ASC) WITH (FILLFACTOR = 90)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[mp_rfq_shopiq_metrics])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_rfq_shopiq_metrics] ON;
        INSERT INTO [dbo].[tmp_ms_xx_mp_rfq_shopiq_metrics] ([rfq_shopiq_id], [rfq_id], [rfq_part_id], [rfq_part_quantity_id], [quantity], [is_awarded], [avg_marketprice], [awarded_price], [award_date], [metrics_date], [part_name], [process], [material], [LowPrice], [HighPrice], [IsAwardedToOtherQty])
        SELECT   [rfq_shopiq_id],
                 [rfq_id],
                 [rfq_part_id],
                 [rfq_part_quantity_id],
                 [quantity],
                 [is_awarded],
                 [avg_marketprice],
                 CAST ([awarded_price] AS DECIMAL (15, 4)),
                 [award_date],
                 [metrics_date],
                 [part_name],
                 [process],
                 [material],
                 [LowPrice],
                 [HighPrice],
                 [IsAwardedToOtherQty]
        FROM     [dbo].[mp_rfq_shopiq_metrics]
        ORDER BY [rfq_shopiq_id] ASC, [rfq_id] ASC, [rfq_part_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_rfq_shopiq_metrics] OFF;
    END

DROP TABLE [dbo].[mp_rfq_shopiq_metrics];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_mp_rfq_shopiq_metrics]', N'mp_rfq_shopiq_metrics';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_pk_mp_rfq_shopiq_metrics_rfq_shopiq_id_rfq_id_rfq_part_id1]', N'pk_mp_rfq_shopiq_metrics_rfq_shopiq_id_rfq_id_rfq_part_id', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[mpBlockedDomainList]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_mpBlockedDomainList] (
    [Id]         INT           IDENTITY (1, 1) NOT NULL,
    [DomainName] VARCHAR (100) NOT NULL,
    [IsBlocked]  BIT           DEFAULT ((1)) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[mpBlockedDomainList])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mpBlockedDomainList] ON;
        INSERT INTO [dbo].[tmp_ms_xx_mpBlockedDomainList] ([Id], [DomainName], [IsBlocked])
        SELECT   [Id],
                 [DomainName],
                 [IsBlocked]
        FROM     [dbo].[mpBlockedDomainList]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mpBlockedDomainList] OFF;
    END

DROP TABLE [dbo].[mpBlockedDomainList];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_mpBlockedDomainList]', N'mpBlockedDomainList';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[mp_lead]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_mp_lead] (
    [lead_id]           INT            IDENTITY (1, 1) NOT NULL,
    [company_id]        INT            NOT NULL,
    [lead_source_id]    INT            NULL,
    [lead_from_contact] INT            NULL,
    [ip_address]        VARCHAR (100)  NULL,
    [lead_date]         DATETIME       NULL,
    [status_id]         SMALLINT       NULL,
    [ModifiedBy]        INT            NULL,
    [ModifiedOn]        DATETIME       NULL,
    [value]             VARCHAR (1000) NULL,
    PRIMARY KEY CLUSTERED ([lead_id] ASC) WITH (FILLFACTOR = 90)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[mp_lead])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_lead] ON;
        INSERT INTO [dbo].[tmp_ms_xx_mp_lead] ([lead_id], [company_id], [lead_source_id], [lead_from_contact], [ip_address], [lead_date], [status_id], [ModifiedBy], [ModifiedOn], [value])
        SELECT   [lead_id],
                 [company_id],
                 [lead_source_id],
                 [lead_from_contact],
                 [ip_address],
                 [lead_date],
                 [status_id],
                 [ModifiedBy],
                 [ModifiedOn],
                 [value]
        FROM     [dbo].[mp_lead]
        ORDER BY [lead_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_lead] OFF;
    END

DROP TABLE [dbo].[mp_lead];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_mp_lead]', N'mp_lead';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [dbo].[mp_lead].[Idx_mp_lead_company_id_lead_source_id]...';


GO
CREATE NONCLUSTERED INDEX [Idx_mp_lead_company_id_lead_source_id]
    ON [dbo].[mp_lead]([company_id] ASC, [lead_source_id] ASC)
    INCLUDE([lead_from_contact], [ip_address], [lead_date]) WITH (FILLFACTOR = 90);


GO
PRINT N'Starting rebuilding table [dbo].[mp_track_user_activities]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_mp_track_user_activities] (
    [user_activity_id] INT            IDENTITY (1, 1) NOT NULL,
    [contact_id]       INT            NOT NULL,
    [activity_id]      INT            NOT NULL,
    [activity_date]    DATETIME       DEFAULT (getutcdate()) NULL,
    [Value]            VARCHAR (100)  NULL,
    [Comment]          VARCHAR (1000) NULL,
    [ScheduledDate]    DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([user_activity_id] ASC, [contact_id] ASC, [activity_id] ASC) WITH (FILLFACTOR = 90)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[mp_track_user_activities])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_track_user_activities] ON;
        INSERT INTO [dbo].[tmp_ms_xx_mp_track_user_activities] ([user_activity_id], [contact_id], [activity_id], [activity_date], [Value], [Comment], [ScheduledDate])
        SELECT   [user_activity_id],
                 [contact_id],
                 [activity_id],
                 [activity_date],
                 [Value],
                 [Comment],
                 [ScheduledDate]
        FROM     [dbo].[mp_track_user_activities]
        ORDER BY [user_activity_id] ASC, [contact_id] ASC, [activity_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mp_track_user_activities] OFF;
    END

DROP TABLE [dbo].[mp_track_user_activities];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_mp_track_user_activities]', N'mp_track_user_activities';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [dbo].[mp_track_user_activities].[Idx_[mp_track_user_activities_activity_id_Value_activity_date]...';


GO
CREATE NONCLUSTERED INDEX [Idx_[mp_track_user_activities_activity_id_Value_activity_date]
    ON [dbo].[mp_track_user_activities]([activity_id] ASC, [Value] ASC)
    INCLUDE([activity_date]) WITH (FILLFACTOR = 90);


GO
PRINT N'Creating Table [dbo].[bk_mpAccountPaidStatusDetails]...';


GO
CREATE TABLE [dbo].[bk_mpAccountPaidStatusDetails] (
    [ID]          INT           IDENTITY (1, 1) NOT NULL,
    [CompanyId]   INT           NOT NULL,
    [OldValue]    INT           NULL,
    [NewValue]    INT           NULL,
    [IsProcessed] BIT           NULL,
    [IsSynced]    BIT           NULL,
    [CreatedOn]   DATETIME      NULL,
    [SourceType]  VARCHAR (100) NULL
);


GO
PRINT N'Creating Table [dbo].[community_data]...';


GO
CREATE TABLE [dbo].[community_data] (
    [post_id]    INT NOT NULL,
    [unique_key] INT NOT NULL
);


GO
PRINT N'Creating Table [dbo].[hubspot_crm_exports]...';


GO
CREATE TABLE [dbo].[hubspot_crm_exports] (
    [Record_ID_Contact]             INT           NOT NULL,
    [First_Name]                    NVARCHAR (50) NOT NULL,
    [Last_Name]                     NVARCHAR (50) NULL,
    [Email]                         NVARCHAR (50) NOT NULL,
    [Account_Paid_Status]           NVARCHAR (50) NOT NULL,
    [Primary_Associated_Company_ID] FLOAT (53)    NULL,
    [Vision_Supplier_ID]            INT           NULL,
    [Growth_Package_Eligible]       NVARCHAR (50) NOT NULL,
    [Associated_Company]            NVARCHAR (50) NULL
);


GO
PRINT N'Creating Table [dbo].[HubSpotContactsOneTimePull]...';


GO
CREATE TABLE [dbo].[HubSpotContactsOneTimePull] (
    [Id]                INT           IDENTITY (100, 1) NOT NULL,
    [Email]             VARCHAR (500) NULL,
    [HubSpot ContactId] VARCHAR (255) NULL,
    CONSTRAINT [Pk_HubSpotContactsOneTimePull_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[HubSpotWebhookCompanyQuotingCapabilityExecutionLogs]...';


GO
CREATE TABLE [dbo].[HubSpotWebhookCompanyQuotingCapabilityExecutionLogs] (
    [LogID]                    INT           IDENTITY (1, 1) NOT NULL,
    [CompanyID]                INT           NULL,
    [HubSpotAccountId]         VARCHAR (200) NULL,
    [HubSpotQuotingCapability] VARCHAR (MAX) NULL,
    [LogDateTime]              DATETIME      NULL,
    [WebhookType]              VARCHAR (100) NULL,
    [AccountType]              INT           NULL,
    PRIMARY KEY CLUSTERED ([LogID] ASC)
);


GO
PRINT N'Creating Table [dbo].[prod_wp_term_relationships]...';


GO
CREATE TABLE [dbo].[prod_wp_term_relationships] (
    [unique_key] INT NOT NULL,
    [post_id]    INT NOT NULL
);


GO
PRINT N'Creating Table [dbo].[prod_wp_terms]...';


GO
CREATE TABLE [dbo].[prod_wp_terms] (
    [term_id]    NVARCHAR (50)  NOT NULL,
    [name]       NVARCHAR (100) NOT NULL,
    [slug]       NVARCHAR (100) NOT NULL,
    [term_group] NVARCHAR (50)  NOT NULL
);


GO
PRINT N'Creating Table [dbo].[temp_sp_who2]...';


GO
CREATE TABLE [dbo].[temp_sp_who2] (
    [SPID]        INT            NULL,
    [Status]      VARCHAR (1000) NULL,
    [Login]       [sysname]      NULL,
    [HostName]    [sysname]      NULL,
    [BlkBy]       [sysname]      NULL,
    [DBName]      [sysname]      NULL,
    [Command]     VARCHAR (1000) NULL,
    [CPUTime]     INT            NULL,
    [DiskIO]      BIGINT         NULL,
    [LastBatch]   VARCHAR (1000) NULL,
    [ProgramName] VARCHAR (1000) NULL,
    [SPID2]       INT            NULL,
    [RequestId]   INT            NULL
);


GO
PRINT N'Creating Table [dbo].[tmp_company_post_mapping]...';


GO
CREATE TABLE [dbo].[tmp_company_post_mapping] (
    [id]  FLOAT (53) NULL,
    [pid] FLOAT (53) NULL
);


GO
PRINT N'Creating Table [dbo].[tmpM24410]...';


GO
CREATE TABLE [dbo].[tmpM24410] (
    [# unique_key] FLOAT (53) NULL
);


GO
PRINT N'Creating Table [dbo].[wp_pmxi_posts_prod]...';


GO
CREATE TABLE [dbo].[wp_pmxi_posts_prod] (
    [post_id]     INT           NULL,
    [unique_key]  INT           NULL,
    [old_address] VARCHAR (MAX) NULL,
    [rn]          NVARCHAR (50) NULL,
    [isprocess]   NVARCHAR (50) NULL
);


GO
PRINT N'Creating Table [tmp_trans].[Trace20220803]...';


GO
CREATE TABLE [tmp_trans].[Trace20220803] (
    [RowNumber]       INT            IDENTITY (0, 1) NOT NULL,
    [EventClass]      INT            NULL,
    [TextData]        NTEXT          NULL,
    [ApplicationName] NVARCHAR (128) NULL,
    [NTUserName]      NVARCHAR (128) NULL,
    [LoginName]       NVARCHAR (128) NULL,
    [CPU]             INT            NULL,
    [Reads]           BIGINT         NULL,
    [Writes]          BIGINT         NULL,
    [Duration]        BIGINT         NULL,
    [ClientProcessID] INT            NULL,
    [SPID]            INT            NULL,
    [StartTime]       DATETIME       NULL,
    [EndTime]         DATETIME       NULL,
    [BinaryData]      IMAGE          NULL,
    [DatabaseName]    NVARCHAR (128) NULL,
    [RowCounts]       BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([RowNumber] ASC)
);


GO
PRINT N'Creating Table [tmp_trans].[Trace20221209]...';


GO
CREATE TABLE [tmp_trans].[Trace20221209] (
    [RowNumber]       INT            IDENTITY (0, 1) NOT NULL,
    [EventClass]      INT            NULL,
    [TextData]        NTEXT          NULL,
    [ApplicationName] NVARCHAR (128) NULL,
    [NTUserName]      NVARCHAR (128) NULL,
    [LoginName]       NVARCHAR (128) NULL,
    [CPU]             INT            NULL,
    [Reads]           BIGINT         NULL,
    [Writes]          BIGINT         NULL,
    [Duration]        BIGINT         NULL,
    [ClientProcessID] INT            NULL,
    [SPID]            INT            NULL,
    [StartTime]       DATETIME       NULL,
    [EndTime]         DATETIME       NULL,
    [BinaryData]      IMAGE          NULL,
    [DatabaseName]    NVARCHAR (128) NULL,
    PRIMARY KEY CLUSTERED ([RowNumber] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[HubSpotWebhookCompanyQuotingCapabilityExecutionLogs]...';


GO
ALTER TABLE [dbo].[HubSpotWebhookCompanyQuotingCapabilityExecutionLogs]
    ADD DEFAULT (getutcdate()) FOR [LogDateTime];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[mp_Companies]...';


GO
ALTER TABLE [dbo].[mp_Companies]
    ADD DEFAULT ((1)) FOR [is_magic_lead_enable];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[mp_rfq]...';


GO
ALTER TABLE [dbo].[mp_rfq]
    ADD DEFAULT ((0)) FOR [ExcludeFromDashboardAwardedModule];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[mp_rfq]...';


GO
ALTER TABLE [dbo].[mp_rfq]
    ADD DEFAULT ((0)) FOR [IsMfgCommunityRfq];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[mp_rfq]...';


GO
ALTER TABLE [dbo].[mp_rfq]
    ADD DEFAULT ((0)) FOR [IsCommunityRfqReleased];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[mp_rfq]...';


GO
ALTER TABLE [dbo].[mp_rfq]
    ADD DEFAULT ((0)) FOR [IsCommunityRfqClosed];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[mp_rfq]...';


GO
ALTER TABLE [dbo].[mp_rfq]
    ADD DEFAULT ((0)) FOR [IsArchived];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[mp_rfq]...';


GO
ALTER TABLE [dbo].[mp_rfq]
    ADD DEFAULT ((0)) FOR [WillDoLater];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[mp_rfq_revision]...';


GO
ALTER TABLE [dbo].[mp_rfq_revision]
    ADD DEFAULT ((0)) FOR [is_Cleaned_data];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[mp_rfq_revision]...';


GO
ALTER TABLE [dbo].[mp_rfq_revision]
    ADD DEFAULT ((1)) FOR [need_Level2_Cleaning];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[mpCommunityDirectRfqs]...';


GO
ALTER TABLE [dbo].[mpCommunityDirectRfqs]
    ADD DEFAULT ((0)) FOR [IsNdaRequired];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[mpCommunityDirectRfqs]...';


GO
ALTER TABLE [dbo].[mpCommunityDirectRfqs]
    ADD DEFAULT ((0)) FOR [IsNdaAcceptedBySupplier];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[mpCommunityDirectRfqs]...';


GO
ALTER TABLE [dbo].[mpCommunityDirectRfqs]
    ADD DEFAULT ((0)) FOR [WantsMP];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[mpCommunityDirectRfqs]...';


GO
ALTER TABLE [dbo].[mpCommunityDirectRfqs]
    ADD DEFAULT (getutcdate()) FOR [CreatedOn];


GO
PRINT N'Creating Default Constraint [dbo].[DF_IsDeleted]...';


GO
ALTER TABLE [dbo].[mpGrowthPackageUnlockRFQsInfo]
    ADD CONSTRAINT [DF_IsDeleted] DEFAULT ((0)) FOR [IsDeleted];


GO
PRINT N'Creating Default Constraint [dbo].[OM_DF_IsDeleted]...';


GO
ALTER TABLE [dbo].[mpOrderManagement]
    ADD CONSTRAINT [OM_DF_IsDeleted] DEFAULT ((0)) FOR [IsDeleted];


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_contacts_prefcountry_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_contacts_prefcountry] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_contacts_prefcountry_mp_contacts] FOREIGN KEY ([cont_id]) REFERENCES [dbo].[mp_contacts] ([contact_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_contacts_preferences_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_contacts_preferences] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_contacts_preferences_mp_contacts] FOREIGN KEY ([contact_id]) REFERENCES [dbo].[mp_contacts] ([contact_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_messages_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_messages] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_messages_mp_contacts] FOREIGN KEY ([from_cont]) REFERENCES [dbo].[mp_contacts] ([contact_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_messages_mp_contacts1]...';


GO
ALTER TABLE [dbo].[mp_messages] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_messages_mp_contacts1] FOREIGN KEY ([to_cont]) REFERENCES [dbo].[mp_contacts] ([contact_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_rfq_versions_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_rfq_versions] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_rfq_versions_mp_contacts] FOREIGN KEY ([contact_id]) REFERENCES [dbo].[mp_contacts] ([contact_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_scheduled_job_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_scheduled_job] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_scheduled_job_mp_contacts] FOREIGN KEY ([contact_id]) REFERENCES [dbo].[mp_contacts] ([contact_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_rfq_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_rfq] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_rfq_mp_contacts] FOREIGN KEY ([contact_id]) REFERENCES [dbo].[mp_contacts] ([contact_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_gateway_subscription_customers_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_gateway_subscription_customers] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_gateway_subscription_customers_mp_contacts] FOREIGN KEY ([supplier_id]) REFERENCES [dbo].[mp_contacts] ([contact_id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_accepted_nda_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_accepted_nda] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_accepted_nda_mp_contacts] FOREIGN KEY ([contact_id]) REFERENCES [dbo].[mp_contacts] ([contact_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_communication_details_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_communication_details] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_communication_details_mp_contacts] FOREIGN KEY ([contact_id]) REFERENCES [dbo].[mp_contacts] ([contact_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_parts_versions_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_parts_versions] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_parts_versions_mp_contacts] FOREIGN KEY ([contact_id]) REFERENCES [dbo].[mp_contacts] ([contact_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_regional_options_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_regional_options] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_regional_options_mp_contacts] FOREIGN KEY ([cont_id]) REFERENCES [dbo].[mp_contacts] ([contact_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_contacts_mp_addresses]...';


GO
ALTER TABLE [dbo].[mp_contacts] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_contacts_mp_addresses] FOREIGN KEY ([address_id]) REFERENCES [dbo].[mp_addresses] ([address_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_contacts_mp_mst_roles]...';


GO
ALTER TABLE [dbo].[mp_contacts] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_contacts_mp_mst_roles] FOREIGN KEY ([role_id]) REFERENCES [dbo].[mp_mst_roles] ([role_id]);


GO
PRINT N'Creating Foreign Key [dbo].[fk_mp_contacts_mp_system_parameters]...';


GO
ALTER TABLE [dbo].[mp_contacts] WITH NOCHECK
    ADD CONSTRAINT [fk_mp_contacts_mp_system_parameters] FOREIGN KEY ([zoho_user_status]) REFERENCES [dbo].[mp_system_parameters] ([id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_contacts_To_mp_mst_incoterm]...';


GO
ALTER TABLE [dbo].[mp_contacts] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_contacts_To_mp_mst_incoterm] FOREIGN KEY ([incoterm_id]) REFERENCES [dbo].[mp_mst_incoterm] ([incoterm_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_contacts_buyersellerassociation_mp_contacts]...';


GO
ALTER TABLE [dbo].[mp_contacts_buyersellerassociation] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_contacts_buyersellerassociation_mp_contacts] FOREIGN KEY ([buyer_cont_id]) REFERENCES [dbo].[mp_contacts] ([contact_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_contacts_buyersellerassociation_mp_contacts1]...';


GO
ALTER TABLE [dbo].[mp_contacts_buyersellerassociation] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_contacts_buyersellerassociation_mp_contacts1] FOREIGN KEY ([seller_cont_id]) REFERENCES [dbo].[mp_contacts] ([contact_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_gateway_subscriptions_mp_gateway_subscription_customers]...';


GO
ALTER TABLE [dbo].[mp_gateway_subscriptions] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_gateway_subscriptions_mp_gateway_subscription_customers] FOREIGN KEY ([customer_id]) REFERENCES [dbo].[mp_gateway_subscription_customers] ([id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_gateway_subscription_customers_cards_mp_gateway_subscriptions]...';


GO
ALTER TABLE [dbo].[mp_gateway_subscription_customers_cards] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_gateway_subscription_customers_cards_mp_gateway_subscriptions] FOREIGN KEY ([subscription_id]) REFERENCES [dbo].[mp_gateway_subscriptions] ([id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_lead_email_mappings_mp_lead]...';


GO
ALTER TABLE [dbo].[mp_lead_email_mappings] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_lead_email_mappings_mp_lead] FOREIGN KEY ([lead_id]) REFERENCES [dbo].[mp_lead] ([lead_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_lead_email_mappings_mp_lead_emails]...';


GO
ALTER TABLE [dbo].[mp_lead_email_mappings] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_lead_email_mappings_mp_lead_emails] FOREIGN KEY ([lead_email_message_id]) REFERENCES [dbo].[mp_lead_emails] ([lead_email_message_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_rfq_quote_items_mp_rfq_parts]...';


GO
ALTER TABLE [dbo].[mp_rfq_quote_items] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_rfq_quote_items_mp_rfq_parts] FOREIGN KEY ([rfq_part_id]) REFERENCES [dbo].[mp_rfq_parts] ([rfq_part_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_rfq_part_quantity_mp_rfq_parts]...';


GO
ALTER TABLE [dbo].[mp_rfq_part_quantity] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_rfq_part_quantity_mp_rfq_parts] FOREIGN KEY ([rfq_part_id]) REFERENCES [dbo].[mp_rfq_parts] ([rfq_part_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_rfq_parts_mp_rfq]...';


GO
ALTER TABLE [dbo].[mp_rfq_parts] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_rfq_parts_mp_rfq] FOREIGN KEY ([rfq_id]) REFERENCES [dbo].[mp_rfq] ([rfq_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_rfq_parts_mp_parts]...';


GO
ALTER TABLE [dbo].[mp_rfq_parts] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_rfq_parts_mp_parts] FOREIGN KEY ([part_id]) REFERENCES [dbo].[mp_parts] ([part_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_rfq_parts_file_mp_rfq_parts]...';


GO
ALTER TABLE [dbo].[mp_rfq_parts_file] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_rfq_parts_file_mp_rfq_parts] FOREIGN KEY ([rfq_part_id]) REFERENCES [dbo].[mp_rfq_parts] ([rfq_part_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_rfq_quote_items_mp_rfq_part_quantity]...';


GO
ALTER TABLE [dbo].[mp_rfq_quote_items] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_rfq_quote_items_mp_rfq_part_quantity] FOREIGN KEY ([rfq_part_quantity_id]) REFERENCES [dbo].[mp_rfq_part_quantity] ([rfq_part_quantity_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_rfq_quote_items_mp_rfq_quote_SupplierQuote]...';


GO
ALTER TABLE [dbo].[mp_rfq_quote_items] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_rfq_quote_items_mp_rfq_quote_SupplierQuote] FOREIGN KEY ([rfq_quote_SupplierQuote_id]) REFERENCES [dbo].[mp_rfq_quote_SupplierQuote] ([rfq_quote_SupplierQuote_id]);


GO
PRINT N'Creating Foreign Key [dbo].[fk_mp_rfq_quote_items_OrderManagementId_mpOrderManagement_Id]...';


GO
ALTER TABLE [dbo].[mpOrderManagementPartStatusChangeLogs] WITH NOCHECK
    ADD CONSTRAINT [fk_mp_rfq_quote_items_OrderManagementId_mpOrderManagement_Id] FOREIGN KEY ([RfqQuoteItemsId]) REFERENCES [dbo].[mp_rfq_quote_items] ([rfq_quote_items_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mp_rfq_revision_mp_rfq_versions]...';


GO
ALTER TABLE [dbo].[mp_rfq_revision] WITH NOCHECK
    ADD CONSTRAINT [FK_mp_rfq_revision_mp_rfq_versions] FOREIGN KEY ([rfq_version_id]) REFERENCES [dbo].[mp_rfq_versions] ([rfq_version_id]);


GO
ALTER TABLE [dbo].[mp_rfq_revision] NOCHECK CONSTRAINT [FK_mp_rfq_revision_mp_rfq_versions];


GO
PRINT N'Creating Foreign Key [dbo].[fk_mpCommunityDirectRfqs_mp_lead_LeadId_LeadId]...';


GO
ALTER TABLE [dbo].[mpCommunityDirectRfqs] WITH NOCHECK
    ADD CONSTRAINT [fk_mpCommunityDirectRfqs_mp_lead_LeadId_LeadId] FOREIGN KEY ([LeadId]) REFERENCES [dbo].[mp_lead] ([lead_id]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[mp_lead]...';


GO
ALTER TABLE [dbo].[mp_lead] WITH NOCHECK
    ADD FOREIGN KEY ([lead_source_id]) REFERENCES [dbo].[mp_mst_lead_source] ([lead_source_id]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[mp_track_user_activities]...';


GO
ALTER TABLE [dbo].[mp_track_user_activities] WITH NOCHECK
    ADD FOREIGN KEY ([activity_id]) REFERENCES [dbo].[mp_mst_activities] ([activity_id]);


GO
PRINT N'Altering Trigger [dbo].[trImmediateUpdateEmailInHubSpotdB]...';


GO
DISABLE TRIGGER [dbo].[trImmediateUpdateEmailInHubSpotdB]
    ON [dbo].[mp_email_change_logs];


GO
PRINT N'Altering Trigger [dbo].[trg_set_qms_quote_id]...';


GO

ALTER TRIGGER [dbo].[trg_set_qms_quote_id]
ON [dbo].[mp_qms_quotes]
AFTER INSERT AS
BEGIN
	DECLARE @qms_quote_id int 
	DECLARE @supplier_id int 

	SELECT @qms_quote_id = qms_quote_id , @supplier_id = created_by FROM INSERTED
	
	UPDATE A SET A.quote_id = B.quote_id
	FROM mp_qms_quotes A
	JOIN
	(
		SELECT @qms_quote_id AS qms_quote_id  , ISNULL(MAX(quote_id)+1,100) quote_id  
		FROM mp_qms_quotes (NOLOCK)
		WHERE created_by = @supplier_id
	) B ON A.qms_quote_id = B.qms_quote_id

END
GO
PRINT N'Creating Trigger [dbo].[tr_update_isregistered_flag_for_growth_package_1]...';


GO
CREATE TRIGGER [dbo].[tr_update_isregistered_flag_for_growth_package_1]  ON  [dbo].[mp_registered_supplier]
AFTER UPDATE
AS 
BEGIN
	
	UPDATE mp_registered_supplier SET is_registered = 1 WHERE company_id IN (SELECT company_id FROM Inserted) 

END
GO
PRINT N'Creating Function [dbo].[fn_CheckSQLMemory]...';


GO
CREATE FUNCTION dbo.fn_CheckSQLMemory()
RETURNS @Sql_MemStatus TABLE 
 (
   SQLServer_Start_DateTime datetime, 
   SQL_current_Memory_usage_mb int,
   SQL_Max_Memory_target_mb int,
   OS_Total_Memory_mb int,
   OS_Available_Memory_mb int)
AS
BEGIN
   declare @strtSQL datetime
   declare @currmem int
   declare @smaxmem int
   declare @osmaxmm int
   declare @osavlmm int 
 
   -- SQL memory
   SELECT 
      @strtSQL = sqlserver_start_time,
      @currmem = (committed_kb/1024),
      @smaxmem = (committed_target_kb/1024)           
   FROM sys.dm_os_sys_info;
   
   --OS memory
   SELECT 
      @osmaxmm = (total_physical_memory_kb/1024),
      @osavlmm = (available_physical_memory_kb/1024) 
   FROM sys.dm_os_sys_memory;
   
   INSERT INTO @Sql_MemStatus values (@strtSQL, @currmem, @smaxmem, @osmaxmm, @osavlmm)
 
   RETURN 
END
GO
PRINT N'Altering Procedure [dbo].[proc_set_DataSync_Update_MarketplaceToHubSpot_CompanyContact]...';


GO


/*  


EXEC [proc_set_DataSync_Update_MarketplaceToHubSpot_CompanyContact]

*/
ALTER PROCEDURE [dbo].[proc_set_DataSync_Update_MarketplaceToHubSpot_CompanyContact]
AS
BEGIN
	/* 
		M2-4233 DB - HubSpot - Create Sync Contacts module API Scheduler & Immediate Syncs.
		M2-4235 DB - HubSpot - Create Sync Buyer Companies (Custom) module API Scheduler & Immediate Syncs.
		M2-4234 DB - HubSpot - Create Sync Companies (Default) module API Scheduler & Immediate Syncs.
	
	*/

	--SET NOCOUNT ON 

	DECLARE @SyncedDate AS DATETIME =  GETUTCDATE()
	DECLARE @SyncedDateIST AS DATETIME =  CONVERT(DATETIME,SWITCHOFFSET(@SyncedDate, '+05:30'))
	DECLARE @IsVisionAccountBuyer AS BIT
	DECLARE @PublicProfileURL VARCHAR(1000) 

	IF DB_NAME() = 'mp2020_dev'
	BEGIN
		SET @PublicProfileURL = 'https://dev.mfg.com/manufacturer/'
	END
	ELSE IF DB_NAME() = 'mp2020_uat'
	BEGIN
		SET @PublicProfileURL = 'https://staging.mfg.com/manufacturer/'		
	END
	ELSE IF DB_NAME() = 'mp2020_prod'
	BEGIN
		SET @PublicProfileURL = 'https://mfg.com/manufacturer/'
	END


	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesType
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline1
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesIndustries
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo2
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsAddress
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompanyCommunications
	

	CREATE TABLE #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies (company_id INT NULL)
	CREATE TABLE #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts (contact_id INT NULL)

	BEGIN TRANSACTION
	BEGIN TRY
		
		
		-- companies & contacts data already generated marked as processed
		UPDATE ds SET ds.IsProcessed = 1 , ds.ProcessedDate = @SyncedDate , ds.ProcessedDateIST = @SyncedDateIST
		FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs ds (NOLOCK) 
		WHERE [SyncType] = 'Scheduler - Update - 30 Minutes' AND ds.IsProcessed IS NULL
		
		-- Scheduler sync : checking companies and contact in every 30 minutes which are not sync from Marketplace to HubSpot
		-- List of companies which are not sync from Marketplace to HubSpot
		INSERT INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies (company_id)
		SELECT DISTINCT a.CompanyId AS company_id 
		FROM XML_SupplierProfileCaptureChanges (NOLOCK) a
		WHERE a.CompanyId <> 0 AND CreatedOn BETWEEN DATEADD(MINUTE , -30 ,@SyncedDate) AND @SyncedDate
		AND [Event] IN 
		(
			'address','cagecode','capabilities','certifications','company_name','dunsnumber','employees_countrange'
			,'hide_profile','industry','name','phone','website','tier'
		)

		-- List of contacts which are not sync from Marketplace to HubSpot
		INSERT INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts (contact_id)
		SELECT DISTINCT a.CreatedBy AS contact_id 
		FROM XML_SupplierProfileCaptureChanges (NOLOCK) a
		WHERE a.CompanyId <> 0 AND CreatedOn BETWEEN DATEADD(MINUTE , -30 ,@SyncedDate) AND @SyncedDate
		AND [Event] IN 
		(
			'address','cagecode','capabilities','certifications','company_name','dunsnumber','employees_countrange'
			,'hide_profile','industry','name','phone','website','tier'
		)
		
		/* M2-4938  */
		-- List of companies which are not sync from Marketplace to HubSpot due to email update/change
		INSERT INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies (company_id)
		SELECT DISTINCT  c.company_id
		FROM mp_email_change_logs (NOLOCK) a
		JOIN aspnetusers (NOLOCK) b on a.newemail = b.email
		JOIN mp_contacts(NOLOCK) c on c.user_id = b.id
		WHERE   a.ModifiedOn BETWEEN DATEADD(MINUTE , -30 ,GETDATE()) AND GETDATE()
		AND c.company_id NOT IN (SELECT company_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies)

		-- List of contact which are not sync from Marketplace to HubSpot due to email update/change
		INSERT INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts (contact_id)
		SELECT DISTINCT  c.contact_id
		FROM mp_email_change_logs (NOLOCK) a
		JOIN aspnetusers (NOLOCK) b on a.newemail = b.email
		JOIN mp_contacts(NOLOCK) c on c.user_id = b.id
		WHERE   a.ModifiedOn BETWEEN DATEADD(MINUTE , -30 ,GETDATE()) AND GETDATE()
		AND c.contact_id NOT IN (SELECT contact_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts)
		/*  */

		INSERT INTO DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
		([Vision Account Id], [Vision Contact Id], [SyncType], [IsSynced], [SyncedDate], [SyncedDateIST])
		SELECT company_id, NULL, 'Scheduler - Update - 30 Minutes', 1, @SyncedDate, @SyncedDateIST FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies
		UNION
		SELECT NULL, contact_id, 'Scheduler - Update - 30 Minutes', 1, @SyncedDate, @SyncedDateIST FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts

		-- companies details
		SELECT 
			a.company_id, a.name , a.cage_code , a.duns_number , a.assigned_customer_rep , a.assigned_sourcingadvisor , a.manufacturing_location_id
			, a.is_hide_directory_profile , a.employee_count_range_id , a.created_date 
			, a.profilestatus ----Added with 5083
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo
		FROM mp_companies  a (NOLOCK)
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs (NOLOCK)
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				--AND a.company_id = [Vision Account Id] 
				AND [SyncType] = 'Scheduler - Update - 30 Minutes'
		)

		-- companies status buyer or supplier company
		SELECT DISTINCT a.company_id , a.is_buyer INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesType
		FROM mp_contacts a (NOLOCK)
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs (NOLOCK)
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - Update - 30 Minutes'
		)

		-- companies address details 
		SELECT 
			a.company_id 
			,b.address1 AS [Company Street Address]
			,b.address2 AS [Company Street Address 2]
			,b.address4 AS [Company City] 
			,c.region_name AS [Company State]
			,b.address3 AS [Company Postal Code]
			,d.country_name AS [Company Country]
			,d.iso_code AS [Company Country Code]
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress
		FROM  
		(
				SELECT 
					company_id , contact_id ,address_id
					, ROW_NUMBER() OVER(PARTITION BY company_id ORDER BY company_id , is_admin DESC, contact_id ) rn 
				FROM [mp_contacts] (NOLOCK)
			
		) a
		JOIN mp_addresses			b (NOLOCK) ON a.address_id = b.address_id AND a.rn = 1 
		LEFT JOIN mp_mst_region		c (NOLOCK) ON b.region_id = c.region_id AND b.region_id <> 0
		LEFT JOIN mp_mst_country	d (NOLOCK) ON b.country_id = d.country_id AND b.country_id <> 0
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs (NOLOCK)
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - Update - 30 Minutes'
		) 

		-- companies phone numbers
		SELECT company_id , communication_value , ROW_NUMBER() OVER (PARTITION BY company_id ORDER BY company_id , contact_id ) Rn 
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompanyCommunications
		FROM mp_communication_details a (NOLOCK) 
		WHERE communication_type_id = 1 AND company_id IS NOT NULL AND company_id > 0 
		AND EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs (NOLOCK)
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - Update - 30 Minutes'
		)

		-- companies disciplines 0
		SELECT DISTINCT a.company_id, b.discipline_name  AS part_category_id INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
		FROM 
		mp_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 0
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs (NOLOCK) 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - Update - 30 Minutes'
		)
		UNION
		SELECT DISTINCT a.company_id, c.discipline_name  AS part_category_id
		FROM 
		mp_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 1
		JOIN mp_mst_part_category(NOLOCK) c ON b.parent_part_category_id = c.part_category_id 
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs (NOLOCK) 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - Update - 30 Minutes'
		)

		-- companies disciplines 1
		SELECT DISTINCT a.company_id, b.discipline_name  AS part_category_id 
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline1
		FROM 
		mp_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 1
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs (NOLOCK) 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - Update - 30 Minutes'
		)
	
		-- companies quoting disciplines 0
		SELECT DISTINCT a.company_id, b.discipline_name  AS part_category_id INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline0
		FROM 
		mp_gateway_subscription_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 0
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs (NOLOCK) 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - Update - 30 Minutes'
		)
		UNION
		SELECT DISTINCT a.company_id, c.discipline_name  AS part_category_id
		FROM 
		mp_gateway_subscription_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 1
		JOIN mp_mst_part_category(NOLOCK) c ON b.parent_part_category_id = c.part_category_id 
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs (NOLOCK) 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - Update - 30 Minutes'
		)

		-- companies quoting disciplines 1
		SELECT DISTINCT a.company_id, b.discipline_name  AS part_category_id 	INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline1
		FROM 
		mp_gateway_subscription_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 1
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs (NOLOCK) 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - Update - 30 Minutes'
		)
	
		-- companies industries
		SELECT company_id, CASE WHEN a.is_buyer = 0 THEN supplier_type_name_en WHEN a.is_buyer = 1 THEN IndustryBranches_name_EN  ELSE NULL END industries
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesIndustries
		FROM mp_company_supplier_types (NOLOCK)  a
		LEFT JOIN mp_mst_supplier_type (NOLOCK) b ON a.supplier_type_id = b.supplier_type_id AND a.is_buyer = 0
		LEFT JOIN mp_mst_industrybranches (NOLOCK) c ON a.supplier_type_id = c.IndustryBranches_id AND a.is_buyer = 1
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs (NOLOCK) 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - Update - 30 Minutes'
		)

		--- below code commented on 27-Feb-2023 for created duplicate companies records
		-- insert company new record 
		/*
		INSERT INTO DataSync_MarketplaceHubSpot.dbo.HubSpotCompanies
		(
		[Vision Account Id], [HubSpot Account Id], [IsBuyerAccount], [Account Paid Status], [Buyer Company City], [Buyer Company Country],  
		[Buyer Company Phone], [Buyer Company Postal Code], [Buyer Company State], [Buyer Company Street Address], [Buyer Company Street Address 2], [Cage Code], [City], 
		[Company Name], [Company Owner Id], [Country/Region], [Create Date], [Customer Service Rep Id], [Discipline Level 0], [Discipline Level 1], [Duns Number], 
		[Facebook Company Page], [Google Plus Page], [Hide Directory Profile], [Industry], [LinkedIn Company Page] ,[Number of Employees], [Phone Number], 
		[Postal Code], [Public Profile URL], 
		[RFQ Access Capabilities 0], [RFQ Access Capabilities 1], [State/Region], [Street Address], [Street Address 2], [Manufacturing Location], [Twitter Handle], 
		[IsSynced], [SyncedDate], [SyncedDateIST]
		,[RecordType] ---- temp added 
		)
		SELECT 
			[Vision Account Id]
			,	NULL AS [HubSpot Account Id]
			,   b.is_buyer AS  [IsBuyerAccount]
			,	CASE 
					WHEN b.is_buyer = 1 THEN ''
					WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 84 THEN 'Growth'
					WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 85 THEN 'Gold'
					WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 86 THEN 'Platinum'
					ELSE 'Basic'
				END [Account Paid Status]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company City] ELSE '' END [Buyer Company City]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Country] ELSE '' END [Buyer Company Country]
			, CASE WHEN b.is_buyer = 1 THEN k.communication_value ELSE '' END AS [Buyer Company Phone]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Postal Code] ELSE '' END [Buyer Company Postal Code]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company State] ELSE '' END [Buyer Company State]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Street Address] ELSE '' END [Buyer Company Street Address]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Street Address 2] ELSE '' END [Buyer Company Address 2]
			, d.cage_code AS [Cage Code]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company City] ELSE '' END [City]
			, d.name AS [Company Name]
			, d.assigned_sourcingadvisor AS [Company Owner Id]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Country] ELSE '' END [Country]
			, d.created_date AS [Create Date]
			, d.assigned_customer_rep AS  [Customer Service Rep Id]
			, CASE WHEN b.is_buyer = 0 THEN e.disciplines0  END   AS [Discipline Level 0]
			, CASE WHEN b.is_buyer = 0 THEN f.disciplines1  END   AS [Discipline Level 1]
			, d.duns_number AS [Duns Number] 
			, NULL AS [Facebook Company Page]
			, NULL AS [Google Plus Page]
			, CASE WHEN b.is_buyer = 0 THEN ISNULL(d.is_hide_directory_profile, CAST('false' AS BIT))  END AS [Hide Directory Profile]
			, g.industries AS [Industry]
			, NULL AS [LinkedIn Company Page]
			, d.employee_count_range_id AS [Number of Employees]
			, CASE WHEN b.is_buyer = 0 THEN k.communication_value ELSE '' END  AS [Phone Number]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Postal Code]  END AS [Postal Code]
			, CASE WHEN b.is_buyer = 0 THEN h.PublicProfileUrl  END  AS [Public Profile URL]
			, CASE WHEN b.is_buyer = 0 THEN i.disciplines0  END  AS [RFQ Access Capabilities 0]
			, CASE WHEN b.is_buyer = 0 THEN j.disciplines1  END  AS [RFQ Access Capabilities 1]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company State]  END AS [State/Region]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Street Address]  END AS [Street Address]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Street Address 2]  END AS [Street Address 2]
			, d.manufacturing_location_id AS [Manufacturing Location]
			, NULL AS [Twitter Handle]
			, CAST('false' AS BIT) AS [IsSynced]
			, @SyncedDate		AS [SyncedDate]
			, @SyncedDateIST	AS [SyncedDateIST]
			, 'RecordUpdate'  AS [RecordType] ---- temp added 
		FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs  a (NOLOCK) 
		JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesType b ON a.[Vision Account Id] = b.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress c ON  a.[Vision Account Id] = c.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo d ON  a.[Vision Account Id] = d.company_id
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines0
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
			GROUP BY
				company_id
		) e ON  a.[Vision Account Id] = e.company_id
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines1
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline1
			GROUP BY
				company_id
		) f ON  a.[Vision Account Id] = f.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesIndustries    g on a.[Vision Account Id] = g.company_id  
		LEFT JOIN 
		(
			SELECT 	
				a.company_id , 
				@PublicProfileURL
				+ CASE 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(a.name))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'') + '-' 
				  END 
				+ CASE 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(c.[Company City]),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(c.[Company City]))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'') +  '-'
					END 
				+ CASE 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(c.[Company State]),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(c.[Company State]))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'')  +  '-'
					END
				+  CONVERT(VARCHAR(100),a.company_id)  AS  PublicProfileUrl
			FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo  a (NOLOCK)
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress	c (NOLOCK) ON a.company_id = c.company_id
		
		) h ON a.[Vision Account Id] = h.company_id 
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines0
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline0
			GROUP BY
				company_id
		) i ON  a.[Vision Account Id] = i.company_id
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines1
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline1
			GROUP BY
				company_id
		) j ON  a.[Vision Account Id] = j.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompanyCommunications k (NOLOCK) ON a.[Vision Account Id] = k.company_id AND k.Rn = 1
		WHERE a.[IsProcessed] IS NULL AND a.[Vision Contact Id] IS NULL AND a.[SyncType] = 'Scheduler - Update - 30 Minutes'
		AND NOT EXISTS (SELECT 1 FROM DataSync_MarketplaceHubSpot.dbo.HubSpotCompanies b (NOLOCK) WHERE a.[Vision Account Id] = b.[Vision Account Id] )
		*/

		-- insert company update record 
		INSERT INTO DataSync_MarketplaceHubSpot.dbo.HubSpotCompaniesUpdateLogs
		(
		[Vision Account Id], [IsBuyerAccount], [Account Paid Status], [Buyer Company City], [Buyer Company Country],  
		[Buyer Company Phone], [Buyer Company Postal Code], [Buyer Company State], [Buyer Company Street Address], [Buyer Company Street Address 2], [Cage Code], [City], 
		[Company Name], [Company Owner Id], [Country/Region], [Create Date], [Customer Service Rep Id], [Discipline Level 0], [Discipline Level 1], [Duns Number], 
		[Facebook Company Page], [Google Plus Page], [Hide Directory Profile], [Industry], [LinkedIn Company Page] ,[Number of Employees], [Phone Number], 
		[Postal Code], [Public Profile URL], 
		[RFQ Access Capabilities 0], [RFQ Access Capabilities 1], [State/Region], [Street Address], [Street Address 2], [Manufacturing Location], [Twitter Handle] 
		, [SyncedDate], [SyncedDateIST]
		)
		SELECT 
			[Vision Account Id]
			,   b.is_buyer AS  [IsBuyerAccount]
			,	CASE 
					WHEN b.is_buyer = 1 THEN ''
					WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 84 THEN 'Growth'
					WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 85 THEN 'Gold'
					WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 86 THEN 'Platinum'
					WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 313 THEN 'Starter'
					ELSE 'Basic'
				END [Account Paid Status]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company City] ELSE '' END [Buyer Company City]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Country] ELSE '' END [Buyer Company Country]
			, CASE WHEN b.is_buyer = 1 THEN k.communication_value ELSE '' END AS [Buyer Company Phone]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Postal Code] ELSE '' END [Buyer Company Postal Code]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company State] ELSE '' END [Buyer Company State]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Street Address] ELSE '' END [Buyer Company Street Address]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Street Address 2] ELSE '' END [Buyer Company Address 2]
			, d.cage_code AS [Cage Code]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company City] ELSE '' END [City]
			, d.name AS [Company Name]
			, d.assigned_sourcingadvisor AS [Company Owner Id]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Country] ELSE '' END [Country]
			, d.created_date AS [Create Date]
			--, d.assigned_customer_rep AS  [Customer Service Rep Id] ----commented with M2-5176 
			, NULL AS  [Customer Service Rep Id] ---- updated with M2-5176 
			, CASE WHEN b.is_buyer = 0 THEN e.disciplines0  END   AS [Discipline Level 0]
			, CASE WHEN b.is_buyer = 0 THEN f.disciplines1  END   AS [Discipline Level 1]
			, d.duns_number AS [Duns Number] 
			, NULL AS [Facebook Company Page]
			, NULL AS [Google Plus Page]
			, CASE WHEN b.is_buyer = 0 THEN ISNULL(d.is_hide_directory_profile, CAST('false' AS BIT))  END AS [Hide Directory Profile]
			, g.industries AS [Industry]
			, NULL AS [LinkedIn Company Page]
			, d.employee_count_range_id AS [Number of Employees]
			, CASE WHEN b.is_buyer = 0 THEN k.communication_value ELSE '' END  AS [Phone Number]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Postal Code]  END AS [Postal Code]
			, CASE WHEN b.is_buyer = 0 THEN h.PublicProfileUrl  END  AS [Public Profile URL]
			---- following fields commented with M2-5177
			----, CASE WHEN b.is_buyer = 0 THEN i.disciplines0  END  AS [RFQ Access Capabilities 0]
			----, CASE WHEN b.is_buyer = 0 THEN j.disciplines1  END  AS [RFQ Access Capabilities 1]
			---- modified with M2-5177
			, NULL  AS [RFQ Access Capabilities 0]
			, NULL  AS [RFQ Access Capabilities 1]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company State]  END AS [State/Region]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Street Address]  END AS [Street Address]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Street Address 2]  END AS [Street Address 2]
			, d.manufacturing_location_id AS [Manufacturing Location]
			, NULL AS [Twitter Handle]
			, @SyncedDate		AS [SyncedDate]
			, @SyncedDateIST	AS [SyncedDateIST]
		FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs a (NOLOCK) 
		JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesType b ON a.[Vision Account Id] = b.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress c ON  a.[Vision Account Id] = c.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo d ON  a.[Vision Account Id] = d.company_id
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines0
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
			GROUP BY
				company_id
		) e ON  a.[Vision Account Id] = e.company_id
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines1
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline1
			GROUP BY
				company_id
		) f ON  a.[Vision Account Id] = f.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesIndustries    g on a.[Vision Account Id] = g.company_id  
		LEFT JOIN 
		(
			SELECT 	
				a.company_id , 
				@PublicProfileURL
				+ CASE 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(a.name))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'') + '-' 
				  END 
				+ CASE 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(c.[Company City]),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(c.[Company City]))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'') +  '-'
					END 
				+ CASE 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(c.[Company State]),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(c.[Company State]))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'')  +  '-'
					END
				+  CONVERT(VARCHAR(100),a.company_id)  AS  PublicProfileUrl
			FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo  a (NOLOCK)
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress	c (NOLOCK) ON a.company_id = c.company_id
		
		) h ON a.[Vision Account Id] = h.company_id 
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines0
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline0
			GROUP BY
				company_id
		) i ON  a.[Vision Account Id] = i.company_id
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines1
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline1
			GROUP BY
				company_id
		) j ON  a.[Vision Account Id] = j.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompanyCommunications k (NOLOCK) ON a.[Vision Account Id] = k.company_id AND k.Rn = 1
		WHERE a.[IsProcessed] IS NULL AND a.[Vision Contact Id] IS NULL AND a.[SyncType] = 'Scheduler - Update - 30 Minutes'
		AND EXISTS (SELECT 1 FROM DataSync_MarketplaceHubSpot.dbo.HubSpotCompanies b (NOLOCK) WHERE a.[Vision Account Id] = b.[Vision Account Id] )

		-- update company records
		UPDATE a SET
			a.[Vision Account Id] = 	b.[Vision Account Id]  
			,a.[IsBuyerAccount] = 	b.[IsBuyerAccount]  
			,a.[Account Paid Status] = 	b.[Account Paid Status]  
			,a.[Buyer Company City] = 	b.[Buyer Company City]  
			,a.[Buyer Company Country] = 	b.[Buyer Company Country]  
			,a.[Buyer Company Phone] = 	b.[Buyer Company Phone]  
			,a.[Buyer Company Postal Code] = 	b.[Buyer Company Postal Code]  
			,a.[Buyer Company State] = 	b.[Buyer Company State]  
			,a.[Buyer Company Street Address] = 	b.[Buyer Company Street Address]  
			,a.[Buyer Company Street Address 2] = 	b.[Buyer Company Address 2] 
			,a.[Cage Code] = 	b.[Cage Code]  
			,a.[City] = 	b.[City]  
			,a.[Company Name] = 	b.[Company Name]  
			,a.[Company Owner Id] = 	b.[Company Owner Id]  
			,a.[Country/Region] = 	b.[Country] 
			,a.[Create Date] = 	b.[Create Date]  
			--,a.[Customer Service Rep Id] = 	b.[Customer Service Rep Id]  --- commented with M2-5176 
			,a.[Discipline Level 0] = 	b.[Discipline Level 0]  
			,a.[Discipline Level 1] = 	b.[Discipline Level 1]  
			,a.[Duns Number] = 	b.[Duns Number]  
			,a.[Facebook Company Page] = 	b.[Facebook Company Page]  
			,a.[Google Plus Page] = 	b.[Google Plus Page]  
			,a.[Hide Directory Profile] = 	b.[Hide Directory Profile]  
			,a.[Industry] = 	b.[Industry]  
			,a.[LinkedIn Company Page] = 	b.[LinkedIn Company Page]  
			,a.[Number of Employees] = 	b.[Number of Employees]  
			,a.[Phone Number] = 	b.[Phone Number]  
			,a.[Postal Code] = 	b.[Postal Code]  
			,a.[Public Profile URL] = 	b.[Public Profile URL]  
			---- following fields commented with M2-5177
			----,a.[RFQ Access Capabilities 0] = 	b.[RFQ Access Capabilities 0]  
			----,a.[RFQ Access Capabilities 1] = 	b.[RFQ Access Capabilities 1]  
			,a.[State/Region] = 	b.[State/Region]  
			,a.[Street Address] = 	b.[Street Address]  
			,a.[Street Address 2] = 	b.[Street Address 2]  
			,a.[Manufacturing Location] = 	b.[Manufacturing Location]  
			,a.[Twitter Handle] = 	b.[Twitter Handle]  
			,a.[IsSynced] = 	0  
			,a.[SyncedDate] = 	@SyncedDate 
			,a.[SyncedDateIST] = 	@SyncedDateIST  
			,a.[IsProcessed] = 	NULL  
			,a.[Number of Employees Text] = [NumberofEmployeesText]
			,a.[IsProfilePublished] = b.[IsProfilePublished] 
		FROM DataSync_MarketplaceHubSpot.dbo.HubSpotCompanies a
		JOIN 
		(
			SELECT 
				[Vision Account Id]
				,   b.is_buyer AS  [IsBuyerAccount]
				,	CASE 
						WHEN b.is_buyer = 1 THEN ''
						WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 84 THEN 'Growth'
						WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 85 THEN 'Gold'
						WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 86 THEN 'Platinum'
						WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 313 THEN 'Starter'
						ELSE 'Basic'
					END [Account Paid Status]
				, CASE WHEN b.is_buyer = 1 THEN c.[Company City] ELSE '' END [Buyer Company City]
				, CASE WHEN b.is_buyer = 1 THEN c.[Company Country] ELSE '' END [Buyer Company Country]
				, CASE WHEN b.is_buyer = 1 THEN k.communication_value ELSE '' END AS [Buyer Company Phone]
				, CASE WHEN b.is_buyer = 1 THEN c.[Company Postal Code] ELSE '' END [Buyer Company Postal Code]
				, CASE WHEN b.is_buyer = 1 THEN c.[Company State] ELSE '' END [Buyer Company State]
				, CASE WHEN b.is_buyer = 1 THEN c.[Company Street Address] ELSE '' END [Buyer Company Street Address]
				, CASE WHEN b.is_buyer = 1 THEN c.[Company Street Address 2] ELSE '' END [Buyer Company Address 2]
				, d.cage_code AS [Cage Code]
				, CASE WHEN b.is_buyer = 0 THEN c.[Company City] ELSE '' END [City]
				, d.name AS [Company Name]
				, d.assigned_sourcingadvisor AS [Company Owner Id]
				, CASE WHEN b.is_buyer = 0 THEN c.[Company Country] ELSE '' END [Country]
				, d.created_date AS [Create Date]
				--, d.assigned_customer_rep AS  [Customer Service Rep Id] --- Commented with M2-5176 
				, NULL AS  [Customer Service Rep Id] -- updated with M2-5176 
				, CASE WHEN b.is_buyer = 0 THEN e.disciplines0  END   AS [Discipline Level 0]
				, CASE WHEN b.is_buyer = 0 THEN f.disciplines1  END   AS [Discipline Level 1]
				, d.duns_number AS [Duns Number] 
				, NULL AS [Facebook Company Page]
				, NULL AS [Google Plus Page]
				, CASE WHEN b.is_buyer = 0 THEN ISNULL(d.is_hide_directory_profile, CAST('false' AS BIT))  END AS [Hide Directory Profile]
				, g.industries AS [Industry]
				, NULL AS [LinkedIn Company Page]
				, d.employee_count_range_id AS [Number of Employees]
				, CASE WHEN b.is_buyer = 0 THEN k.communication_value ELSE '' END  AS [Phone Number]
				, CASE WHEN b.is_buyer = 0 THEN c.[Company Postal Code]  END AS [Postal Code]
				, CASE WHEN b.is_buyer = 0 THEN h.PublicProfileUrl  END  AS [Public Profile URL]
				---- following fields commented with M2-5177
				----, CASE WHEN b.is_buyer = 0 THEN i.disciplines0  END  AS [RFQ Access Capabilities 0]
				----, CASE WHEN b.is_buyer = 0 THEN j.disciplines1  END  AS [RFQ Access Capabilities 1]
				---- modified with M2-5177
				, NULL AS [RFQ Access Capabilities 0]
				, NULL AS [RFQ Access Capabilities 1]
				, CASE WHEN b.is_buyer = 0 THEN c.[Company State]  END AS [State/Region]
				, CASE WHEN b.is_buyer = 0 THEN c.[Company Street Address]  END AS [Street Address]
				, CASE WHEN b.is_buyer = 0 THEN c.[Company Street Address 2]  END AS [Street Address 2]
				, d.manufacturing_location_id AS [Manufacturing Location]
				, NULL AS [Twitter Handle]
				, @SyncedDate		AS [SyncedDate]
				, @SyncedDateIST	AS [SyncedDateIST]
				, CASE WHEN d.employee_count_range_id = 1 THEN '1-2'
			       WHEN d.employee_count_range_id = 2 THEN '3-9'
				   WHEN d.employee_count_range_id = 3 THEN '10-49'
				   WHEN d.employee_count_range_id = 4 THEN '50-99'
				   WHEN d.employee_count_range_id = 5 THEN '100-249'
				   WHEN d.employee_count_range_id = 6 THEN '250+'
				   ELSE ''
			  END AS [NumberofEmployeesText]
			, CASE WHEN d.[ProfileStatus] = 234 THEN 1 ELSE 0 END AS [IsProfilePublished] ---- Added with M2-5083
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs a (NOLOCK) 
			JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesType b ON a.[Vision Account Id] = b.company_id
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress c ON  a.[Vision Account Id] = c.company_id
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo d ON  a.[Vision Account Id] = d.company_id
			LEFT JOIN 
			(
				SELECT
				company_id, 
				STRING_AGG(part_category_id,';') disciplines0
				FROM
					#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
				GROUP BY
					company_id
			) e ON  a.[Vision Account Id] = e.company_id
			LEFT JOIN 
			(
				SELECT
				company_id, 
				STRING_AGG(part_category_id,';') disciplines1
				FROM
					#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline1
				GROUP BY
					company_id
			) f ON  a.[Vision Account Id] = f.company_id
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesIndustries    g on a.[Vision Account Id] = g.company_id  
			LEFT JOIN 
			(
				SELECT 	
					a.company_id , 
					@PublicProfileURL
					+ CASE 
						WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
						ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(a.name))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'') + '-' 
					  END 
					+ CASE 
						WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
						WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(c.[Company City]),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
						ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(c.[Company City]))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'') +  '-'
						END 
					+ CASE 
						WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
						WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(c.[Company State]),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
						ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(c.[Company State]))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'')  +  '-'
						END
					+  CONVERT(VARCHAR(100),a.company_id)  AS  PublicProfileUrl
				FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo  a (NOLOCK)
				LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress	c (NOLOCK) ON a.company_id = c.company_id
		
			) h ON a.[Vision Account Id] = h.company_id 
			LEFT JOIN 
			(
				SELECT
				company_id, 
				STRING_AGG(part_category_id,';') disciplines0
				FROM
					#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline0
				GROUP BY
					company_id
			) i ON  a.[Vision Account Id] = i.company_id
			LEFT JOIN 
			(
				SELECT
				company_id, 
				STRING_AGG(part_category_id,';') disciplines1
				FROM
					#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline1
				GROUP BY
					company_id
			) j ON  a.[Vision Account Id] = j.company_id
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompanyCommunications k (NOLOCK) ON a.[Vision Account Id] = k.company_id AND k.Rn = 1
			WHERE a.[IsProcessed] IS NULL AND a.[Vision Contact Id] IS NULL AND a.[SyncType] = 'Scheduler - Update - 30 Minutes'
			AND EXISTS (SELECT 1 FROM DataSync_MarketplaceHubSpot.dbo.HubSpotCompanies b (NOLOCK) WHERE a.[Vision Account Id] = b.[Vision Account Id] )
		
		) b ON a.[Vision Account Id] = b.[Vision Account Id] AND a.SyncType IS NULL
		
		-- contact details
		SELECT 
			b.contact_id ,b.company_id , b.is_buyer ,b.first_name ,b.last_name ,b.address_id ,b.[user_id] ,c.email ,d.seller_cont_id ,e.buyer_cont_id , b.is_validated_buyer
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN h.company_id 
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN f.company_id
				END
			) dualaccount_company_id
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN h.first_name
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN f.first_name
				END
			) dualaccount_first_name
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN h.last_name
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN f.last_name
				END
			) dualaccount_last_name
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN h.address_id
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN f.address_id
				END
			) dualaccount_address_id
			, j.manufacturing_location_id AS territory
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN l.manufacturing_location_id 
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN k.manufacturing_location_id
				END
			) AS dualaccount_territory
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN h.is_validated_buyer
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN f.is_validated_buyer
				END
			) AS dualaccount_is_validated_buyer

		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo
		FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs  a (NOLOCK) 
		JOIN mp_contacts  b (NOLOCK) ON  a.[Vision Contact Id] = b.contact_id AND a.[IsProcessed] IS NULL  AND a.[Vision Account Id] IS NULL
		JOIN AspNetUsers  c (NOLOCK) ON b.user_id = c.id
		LEFT JOIN  
		(
			SELECT buyer_cont_id , seller_cont_id FROM mp_contacts_buyersellerassociation (NOLOCK)
		
		) d ON b.contact_id = d.buyer_cont_id
		LEFT JOIN  
		(
			SELECT seller_cont_id , buyer_cont_id FROM mp_contacts_buyersellerassociation (NOLOCK)
		
		) e ON b.contact_id = e.seller_cont_id
		LEFT JOIN mp_contacts  f (NOLOCK) ON d.seller_cont_id = f.contact_id
		LEFT JOIN AspNetUsers  g (NOLOCK) ON f.user_id = g.id
		LEFT JOIN mp_contacts  h (NOLOCK) ON e.buyer_cont_id = h.contact_id
		LEFT JOIN AspNetUsers  i (NOLOCK) ON h.user_id = i.id
		JOIN mp_companies	   j (NOLOCK) ON b.company_id = j.company_id
		LEFT JOIN mp_companies	   k (NOLOCK) ON f.company_id = k.company_id
		LEFT JOIN mp_companies	   l (NOLOCK) ON h.company_id = l.company_id
		WHERE a.[SyncType] = 'Scheduler - Update - 30 Minutes'
	
		-- contact address
		SELECT 
			a.address_id 
			,b.address1 AS [Contact Street Address]
			,b.address2 AS [Contact Street Address 2]
			,b.address4 AS [Contact City] 
			,c.region_name AS [Contact State]
			,b.address3 AS [Contact Postal Code]
			,d.country_name AS [Contact Country]
			,d.iso_code AS [Contact Country Code]
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsAddress
		FROM 
		(
			SELECT address_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo
			UNION
			SELECT dualaccount_address_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE dualaccount_address_id IS NOT NULL
		) a
		JOIN mp_addresses			b (NOLOCK) ON a.address_id = b.address_id  AND a.address_id IS NOT NULL
		LEFT JOIN mp_mst_region		c (NOLOCK) ON b.region_id = c.region_id AND b.region_id <> 0
		LEFT JOIN mp_mst_country	d (NOLOCK) ON b.country_id = d.country_id AND b.country_id <> 0

		-- contact communication details
		SELECT 
			communication_id , contact_id , communication_type_id , communication_value  
			, ROW_NUMBER() OVER (PARTITION BY contact_id , communication_type_id ORDER BY contact_id , communication_type_id , communication_id DESC) Rn 
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications
		FROM mp_communication_details (NOLOCK)
		WHERE communication_type_id IN  (1,2,4,5) AND contact_id <> 0
		AND contact_id IN 
		(
			SELECT contact_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo
			UNION
			SELECT seller_cont_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE seller_cont_id IS NOT NULL
			UNION
			SELECT buyer_cont_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE buyer_cont_id IS NOT NULL
		)
	
		SELECT DISTINCT
			b.email				AS [Email]
			, NULL					AS [HubSpot Contact Id]
			, b.user_id				AS [Contact Id]
			, (CASE WHEN b.is_buyer = 1 THEN b.contact_id ELSE b.buyer_cont_id END) AS [Vision Buyer Id]
			, (CASE WHEN b.is_buyer = 1 THEN b.company_id ELSE b.dualaccount_company_id END) AS [Vision Buyer Account Id]
			, NULL					AS [HubSpot Buyer Account Id]
			, (CASE WHEN b.is_buyer = 0 THEN b.contact_id ELSE b.seller_cont_id END) AS [Vision Supplier Id]
			, (CASE WHEN b.is_buyer = 0 THEN b.company_id ELSE b.dualaccount_company_id END) AS [Vision Supplier Account Id]
			, NULL					AS [HubSpot Supplier Account Id]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact City] ELSE d.[Contact City] END) AS [Buyer City]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact Country] ELSE d.[Contact Country] END) AS [Buyer Country]
			, (CASE WHEN b.is_buyer = 1 THEN b.first_name ELSE b.dualaccount_first_name END) AS [Buyer First Name]				
			, (CASE WHEN b.is_buyer = 1 THEN b.last_name ELSE b.dualaccount_last_name END) AS [Buyer Last Name]				
			, NULL AS [Buyer Phone]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact Postal Code] ELSE d.[Contact Postal Code] END) AS [Buyer Postal Code]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact State] ELSE d.[Contact State] END) AS [Buyer State]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact Street Address] ELSE d.[Contact Street Address] END) AS [Buyer Street Address]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact Street Address 2] ELSE d.[Contact Street Address 2] END) AS [Buyer Street Address 2]
			, (CASE WHEN b.is_buyer = 1 THEN b.territory ELSE b.dualaccount_territory END)  AS [Buyer Territory]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact City] ELSE d.[Contact City] END) AS [City]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact Country] ELSE d.[Contact Country] END) AS [Country]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact State] ELSE d.[Contact State] END) AS [Country/Region]
			, NULL AS [Fax]
			, (CASE WHEN b.is_buyer = 0 THEN b.first_name ELSE b.dualaccount_first_name END) AS [First Name]
			, NULL AS [First RFQ Release Date]
			, NULL AS [Industry]
			, (CASE WHEN b.is_buyer = 0 THEN b.last_name ELSE b.dualaccount_last_name END) AS [Last Name]
			, NULL AS [Last Upgrade Request Date]
			, CASE 
				WHEN b.is_buyer = 1 AND ISNULL(b.seller_cont_id,0)> 0 THEN 'Both' 
				WHEN b.is_buyer = 1 AND ISNULL(b.seller_cont_id,0)= 0 THEN 'Buyer' 
				WHEN b.is_buyer = 0 AND ISNULL(b.buyer_cont_id,0)> 0 THEN 'Both'
				WHEN b.is_buyer = 0 AND ISNULL(b.buyer_cont_id,0)= 0 THEN 'Supplier'
			  END AS [MFG Contact Type]
			, NULL  AS [Mobile Phone]
			, NULL AS [Most Recent RFQ Release Date]
			, NULL AS [Number of RFQs]
			, NULL AS [Phone]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact Postal Code] ELSE d.[Contact Postal Code] END) AS [Postal Code]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact State] ELSE d.[Contact State] END) AS [State/Region]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact Street Address] ELSE d.[Contact Street Address] END) AS [Street Address]
			, (CASE WHEN b.is_buyer = 0 THEN b.territory ELSE b.dualaccount_territory END) AS [Territory]
			, NULL AS [Unsubscribed from all email]
			, NULL AS [Upgrade Request]
			, NULL AS [Vision RFQ Validated]
			, NULL AS [Website URL]
			, CAST('false' AS BIT)	AS [IsSynced]
			, @SyncedDate			AS [SyncedDate]
			, @SyncedDateIST		AS [SyncedDateIST]
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1
		FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs a (NOLOCK) 
		JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo b ON a.[Vision Contact Id] = b.contact_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsAddress c ON b.address_id = c.address_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsAddress d ON b.dualaccount_address_id = d.address_id
		WHERE a.[IsProcessed] IS NULL AND a.[Vision Account Id] IS NULL AND a.[SyncType] = 'Scheduler - Update - 30 Minutes'

		
		--- below code commented on 27-Feb-2023 for created duplicate companies records
		-- inserting new records
		/*
		INSERT INTO  DataSync_MarketplaceHubSpot.dbo.HubSpotContacts
		(
			[Email], [HubSpot Contact Id], [Contact Id], [Vision Buyer Id], [Vision Buyer Account Id], [HubSpot Buyer Account Id], [Vision Supplier Id]
		, [Vision Supplier Account Id], [HubSpot Supplier Account Id], [Buyer City], [Buyer Country] 	,[Buyer First Name]	,[Buyer Last Name]	 , [Buyer Phone], [Buyer Postal Code], [Buyer State], [Buyer Street Address], [Buyer Street Address 2]
			, [Buyer Territory], [City], [Country], [Country/Region], [Fax], [First Name], [First RFQ Release Date], [Industry], [Last Name], [Last Upgrade Request Date]
			, [MFG Contact Type], [Mobile Phone], [Most Recent RFQ Release Date], [Number of RFQs], [Phone], [Postal Code], [State/Region], [Street Address], [Territory]
			, [Unsubscribed from all email], [Upgrade Request], [Vision RFQ Validated], [Website URL], [IsSynced], [SyncedDate], [SyncedDateIST]
		)
		SELECT 
			a.[Email], a.[HubSpot Contact Id], a.[Contact Id], a.[Vision Buyer Id], a.[Vision Buyer Account Id], a.[HubSpot Buyer Account Id], a.[Vision Supplier Id]
			, a.[Vision Supplier Account Id], a.[HubSpot Supplier Account Id], a.[Buyer City], a.[Buyer Country] 	,[Buyer First Name]	,[Buyer Last Name]	 
			, b.[communication_value] [Buyer Phone], a.[Buyer Postal Code], a.[Buyer State], a.[Buyer Street Address], a.[Buyer Street Address 2]
			, a.[Buyer Territory], a.[City], a.[Country], a.[Country], a.[Fax], a.[First Name]
			, e.[First RFQ Release Date] [First RFQ Release Date], a.[Industry], a.[Last Name]
			, f.[Last Upgrade Request Date] [Last Upgrade Request Date]
			, a.[MFG Contact Type], a.[Mobile Phone], e.[Most Recent RFQ Release Date] [Most Recent RFQ Release Date]
			, e.[Number of RFQs Released] [Number of RFQs]
			, c.communication_value AS [Phone], a.[Postal Code], a.[State/Region], a.[Street Address], a.[Territory]
			, a.[Unsubscribed from all email]
			, (CASE WHEN f.[Last Upgrade Request Date] IS NULL THEN 0 ELSE 1 END) [Upgrade Request]
			, d.Is_Validated_Buyer AS [Vision RFQ Validated]
			, CASE 
				WHEN a.[Vision Buyer Id] IS NOT NULL AND  a.[Vision Supplier Id] IS NULL THEN g.communication_value
				WHEN a.[Vision Buyer Id] IS NULL AND  a.[Vision Supplier Id] IS NOT NULL THEN h.communication_value
				ELSE h.communication_value
			  END [Website URL]
			, a.[IsSynced], a.[SyncedDate], a.[SyncedDateIST]
		FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1 a
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications b ON a.[Vision Buyer Id] = b.contact_id AND b.Rn =1 AND b.communication_type_id = 1
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications c ON a.[Vision Supplier Id] = c.contact_id AND c.Rn =1 AND c.communication_type_id = 1
		--LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo d ON a.[Vision Buyer Id] = d.contact_id
		LEFT JOIN 
		(
			SELECT contact_id , is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 1
			UNION
			SELECT buyer_cont_id , dualaccount_is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 0 AND buyer_cont_id IS NOT NULL
		) d ON a.[Vision Buyer Id] = d.contact_id
		LEFT JOIN 
		(
			SELECT 
				b.contact_id  , MIN(a.status_date) [First RFQ Release Date] 
				, MAX(a.status_date) [Most Recent RFQ Release Date]
				, COUNT(DISTINCT a.rfq_id) as [Number of RFQs Released]
			FROM mp_rfq_release_history (NOLOCK) a
			JOIN mp_rfq					(NOLOCK) b ON a.rfq_id = b.rfq_id
			GROUP BY b.contact_id
		) e ON a.[Vision Buyer Id] = e.contact_id
		LEFT JOIN
		(
			SELECT 
				contact_id , MAX(activity_date) [Last Upgrade Request Date]
			FROM mp_track_user_activities (NOLOCK) WHERE activity_id IN (3,14)
			GROUP BY contact_id
		) f ON a.[Vision Supplier Id] = f.contact_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications g ON a.[Vision Buyer Id] = g.contact_id AND g.Rn =1 AND g.communication_type_id = 4
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications h ON a.[Vision Supplier Id] = h.contact_id AND h.Rn =1 AND h.communication_type_id = 4
		WHERE NOT EXISTS (SELECT 1 FROM DataSync_MarketplaceHubSpot.dbo.HubSpotContacts b (NOLOCK) WHERE a.Email = b.Email )
		*/

		-- inserting contact update log
		INSERT INTO  DataSync_MarketplaceHubSpot.dbo.HubSpotContactsUpdateLogs
		(
			[Email], [Contact Id], [Vision Buyer Id], [Vision Buyer Account Id], [Vision Supplier Id]
			, [Vision Supplier Account Id], [Buyer City], [Buyer Country] 	,[Buyer First Name]	,[Buyer Last Name]	 , [Buyer Phone], [Buyer Postal Code], [Buyer State]
			, [Buyer Street Address], [Buyer Street Address 2]
			, [Buyer Territory], [City], [Country], [Country/Region], [Fax], [First Name], [First RFQ Release Date], [Industry], [Last Name], [Last Upgrade Request Date]
			, [MFG Contact Type], [Mobile Phone], [Most Recent RFQ Release Date], [Number of RFQs], [Phone], [Postal Code], [State/Region], [Street Address], [Territory]
			, [Unsubscribed from all email], [Upgrade Request], [Vision RFQ Validated], [Website URL], [SyncedDate], [SyncedDateIST]
		)
		SELECT 
			b.[Email], b.[Contact Id], b.[Vision Buyer Id], b.[Vision Buyer Account Id], b.[Vision Supplier Id]
			, b.[Vision Supplier Account Id], b.[Buyer City], b.[Buyer Country] 	,b.[Buyer First Name]	,b.[Buyer Last Name]	 
			, b.[Buyer Phone], b.[Buyer Postal Code], b.[Buyer State], b.[Buyer Street Address], b.[Buyer Street Address 2]
			, b.[Buyer Territory], b.[City], b.[Country], b.[Country], b.[Fax], b.[First Name]
			, b.[First RFQ Release Date], b.[Industry], b.[Last Name]
			, b.[Last Upgrade Request Date]
			, b.[MFG Contact Type], b.[Mobile Phone], b.[Most Recent RFQ Release Date]
			, b.[Number of RFQs]
			, b.[Phone], b.[Postal Code], b.[State/Region], b.[Street Address], b.[Territory]
			, b.[Unsubscribed from all email]
			, b.[Upgrade Request]
			, b.[Vision RFQ Validated]
			, b.[Website URL]
			, b.[SyncedDate], b.[SyncedDateIST] 
		FROM DataSync_MarketplaceHubSpot.dbo.HubSpotContacts (NOLOCK) a
		JOIN
		(
			SELECT 
			a.[Email], a.[Contact Id], a.[Vision Buyer Id], a.[Vision Buyer Account Id], a.[Vision Supplier Id]
			, a.[Vision Supplier Account Id], a.[Buyer City], a.[Buyer Country] 	,[Buyer First Name]	,[Buyer Last Name]	 
			, b.[communication_value] [Buyer Phone], a.[Buyer Postal Code], a.[Buyer State], a.[Buyer Street Address], a.[Buyer Street Address 2]
			, a.[Buyer Territory], a.[City], a.[Country], a.[Country/Region], a.[Fax], a.[First Name]
			, e.[First RFQ Release Date] [First RFQ Release Date], a.[Industry], a.[Last Name]
			, f.[Last Upgrade Request Date] [Last Upgrade Request Date]
			, a.[MFG Contact Type], a.[Mobile Phone], e.[Most Recent RFQ Release Date] [Most Recent RFQ Release Date]
			, e.[Number of RFQs Released] [Number of RFQs]
			, c.communication_value AS [Phone], a.[Postal Code], a.[State/Region], a.[Street Address], a.[Territory]
			, a.[Unsubscribed from all email]
			, (CASE WHEN f.[Last Upgrade Request Date] IS NULL THEN 0 ELSE 1 END) [Upgrade Request]
			, d.Is_Validated_Buyer AS [Vision RFQ Validated]
			, CASE 
				WHEN a.[Vision Buyer Id] IS NOT NULL AND  a.[Vision Supplier Id] IS NULL THEN g.communication_value
				WHEN a.[Vision Buyer Id] IS NULL AND  a.[Vision Supplier Id] IS NOT NULL THEN h.communication_value
				ELSE h.communication_value
			  END [Website URL]
			, a.[IsSynced], a.[SyncedDate], a.[SyncedDateIST]
			FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1 a
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications b ON a.[Vision Buyer Id] = b.contact_id AND b.Rn =1 AND b.communication_type_id = 1
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications c ON a.[Vision Supplier Id] = c.contact_id AND c.Rn =1 AND c.communication_type_id = 1
			--LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo d ON a.[Vision Buyer Id] = d.contact_id
			LEFT JOIN 
			(
				SELECT contact_id , is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 1
				UNION
				SELECT buyer_cont_id , dualaccount_is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 0 AND buyer_cont_id IS NOT NULL
			) d ON a.[Vision Buyer Id] = d.contact_id
			LEFT JOIN 
			(
				SELECT 
					b.contact_id  , MIN(a.status_date) [First RFQ Release Date] 
					, MAX(a.status_date) [Most Recent RFQ Release Date]
					, COUNT(DISTINCT a.rfq_id) as [Number of RFQs Released]
				FROM mp_rfq_release_history (NOLOCK) a
				JOIN mp_rfq					(NOLOCK) b ON a.rfq_id = b.rfq_id
				GROUP BY b.contact_id
			) e ON a.[Vision Buyer Id] = e.contact_id
			LEFT JOIN
			(
				SELECT 
					contact_id , MAX(activity_date) [Last Upgrade Request Date]
				FROM mp_track_user_activities (NOLOCK) WHERE activity_id IN (3,14)
				GROUP BY contact_id
			) f ON a.[Vision Supplier Id] = f.contact_id
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications g ON a.[Vision Buyer Id] = g.contact_id AND g.Rn =1 AND g.communication_type_id = 4
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications h ON a.[Vision Supplier Id] = h.contact_id AND h.Rn =1 AND h.communication_type_id = 4
		) b ON a.Email = b.Email

		
		/*  M2-4938 Added below code */
		-- inserting contact update log
		INSERT INTO  DataSync_MarketplaceHubSpot.dbo.HubSpotContactsUpdateLogs
		(
			[Email], [Contact Id], [Vision Buyer Id], [Vision Buyer Account Id], [Vision Supplier Id]
			, [Vision Supplier Account Id], [Buyer City], [Buyer Country] 	,[Buyer First Name]	,[Buyer Last Name]	 , [Buyer Phone], [Buyer Postal Code], [Buyer State]
			, [Buyer Street Address], [Buyer Street Address 2]
			, [Buyer Territory], [City], [Country], [Country/Region], [Fax], [First Name], [First RFQ Release Date], [Industry], [Last Name], [Last Upgrade Request Date]
			, [MFG Contact Type], [Mobile Phone], [Most Recent RFQ Release Date], [Number of RFQs], [Phone], [Postal Code], [State/Region], [Street Address], [Territory]
			, [Unsubscribed from all email], [Upgrade Request], [Vision RFQ Validated], [Website URL], [SyncedDate], [SyncedDateIST]
		)
		SELECT 
			b.[Email], b.[Contact Id], b.[Vision Buyer Id], b.[Vision Buyer Account Id], b.[Vision Supplier Id]
			, b.[Vision Supplier Account Id], b.[Buyer City], b.[Buyer Country] 	,b.[Buyer First Name]	,b.[Buyer Last Name]	 
			, b.[Buyer Phone], b.[Buyer Postal Code], b.[Buyer State], b.[Buyer Street Address], b.[Buyer Street Address 2]
			, b.[Buyer Territory], b.[City], b.[Country], b.[Country], b.[Fax], b.[First Name]
			, b.[First RFQ Release Date], b.[Industry], b.[Last Name]
			, b.[Last Upgrade Request Date]
			, b.[MFG Contact Type], b.[Mobile Phone], b.[Most Recent RFQ Release Date]
			, b.[Number of RFQs]
			, b.[Phone], b.[Postal Code], b.[State/Region], b.[Street Address], b.[Territory]
			, b.[Unsubscribed from all email]
			, b.[Upgrade Request]
			, b.[Vision RFQ Validated]
			, b.[Website URL]
			, b.[SyncedDate], b.[SyncedDateIST] 
		FROM DataSync_MarketplaceHubSpot.dbo.HubSpotContacts (NOLOCK) a
		JOIN
		(
			SELECT 
			a.[Email], a.[Contact Id], a.[Vision Buyer Id], a.[Vision Buyer Account Id], a.[Vision Supplier Id]
			, a.[Vision Supplier Account Id], a.[Buyer City], a.[Buyer Country] 	,[Buyer First Name]	,[Buyer Last Name]	 
			, b.[communication_value] [Buyer Phone], a.[Buyer Postal Code], a.[Buyer State], a.[Buyer Street Address], a.[Buyer Street Address 2]
			, a.[Buyer Territory], a.[City], a.[Country], a.[Country/Region], a.[Fax], a.[First Name]
			, e.[First RFQ Release Date] [First RFQ Release Date], a.[Industry], a.[Last Name]
			, f.[Last Upgrade Request Date] [Last Upgrade Request Date]
			, a.[MFG Contact Type], a.[Mobile Phone], e.[Most Recent RFQ Release Date] [Most Recent RFQ Release Date]
			, e.[Number of RFQs Released] [Number of RFQs]
			, c.communication_value AS [Phone], a.[Postal Code], a.[State/Region], a.[Street Address], a.[Territory]
			, a.[Unsubscribed from all email]
			, (CASE WHEN f.[Last Upgrade Request Date] IS NULL THEN 0 ELSE 1 END) [Upgrade Request]
			, d.Is_Validated_Buyer AS [Vision RFQ Validated]
			, CASE 
				WHEN a.[Vision Buyer Id] IS NOT NULL AND  a.[Vision Supplier Id] IS NULL THEN g.communication_value
				WHEN a.[Vision Buyer Id] IS NULL AND  a.[Vision Supplier Id] IS NOT NULL THEN h.communication_value
				ELSE h.communication_value
			  END [Website URL]
			, a.[IsSynced], a.[SyncedDate], a.[SyncedDateIST]
			FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1 a
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications b ON a.[Vision Buyer Id] = b.contact_id AND b.Rn =1 AND b.communication_type_id = 1
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications c ON a.[Vision Supplier Id] = c.contact_id AND c.Rn =1 AND c.communication_type_id = 1
			--LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo d ON a.[Vision Buyer Id] = d.contact_id
			LEFT JOIN 
			(
				SELECT contact_id , is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 1
				UNION
				SELECT buyer_cont_id , dualaccount_is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 0 AND buyer_cont_id IS NOT NULL
			) d ON a.[Vision Buyer Id] = d.contact_id
			LEFT JOIN 
			(
				SELECT 
					b.contact_id  , MIN(a.status_date) [First RFQ Release Date] 
					, MAX(a.status_date) [Most Recent RFQ Release Date]
					, COUNT(DISTINCT a.rfq_id) as [Number of RFQs Released]
				FROM mp_rfq_release_history (NOLOCK) a
				JOIN mp_rfq					(NOLOCK) b ON a.rfq_id = b.rfq_id
				GROUP BY b.contact_id
			) e ON a.[Vision Buyer Id] = e.contact_id
			LEFT JOIN
			(
				SELECT 
					contact_id , MAX(activity_date) [Last Upgrade Request Date]
				FROM mp_track_user_activities (NOLOCK) WHERE activity_id IN (3,14)
				GROUP BY contact_id
			) f ON a.[Vision Supplier Id] = f.contact_id
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications g ON a.[Vision Buyer Id] = g.contact_id AND g.Rn =1 AND g.communication_type_id = 4
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications h ON a.[Vision Supplier Id] = h.contact_id AND h.Rn =1 AND h.communication_type_id = 4
		) b ON  
		a.[Contact Id] = b.[Contact Id] ---- this is unique identifier value of contact id 

		/*  */
		
		-- updating existing records
		UPDATE a SET 
			a.[Email] = b.[Email]
			/* ---- Below code commented on 14-Aug-2023 because ids fields can't updated */
			--,a.[HubSpot Contact Id] = b.[HubSpot Contact Id]
			--,a.[Contact Id] = b.[Contact Id]
			--,a.[Vision Buyer Id] = b.[Vision Buyer Id]
			--,a.[Vision Buyer Account Id] = b.[Vision Buyer Account Id]
			--,a.[HubSpot Buyer Account Id] = b.[HubSpot Buyer Account Id]
			--,a.[Vision Supplier Id] = b.[Vision Supplier Id]
			--,a.[Vision Supplier Account Id] = b.[Vision Supplier Account Id]
			--,a.[HubSpot Supplier Account Id] = b.[HubSpot Supplier Account Id]
			,a.[Buyer City] = b.[Buyer City]
			,a.[Buyer Country] = b.[Buyer Country]
			,a.[Buyer First Name] = b.[Buyer First Name]
			,a.[Buyer Last Name] = b.[Buyer Last Name]
			,a.[Buyer Phone] = b.[Buyer Phone]
			,a.[Buyer Postal Code] = b.[Buyer Postal Code]
			,a.[Buyer State] = b.[Buyer State]
			,a.[Buyer Street Address] = b.[Buyer Street Address]
			,a.[Buyer Street Address 2] = b.[Buyer Street Address 2]
			,a.[Buyer Territory] = b.[Buyer Territory]
			,a.[City] = b.[City]
			,a.[Country] = b.[Country]
			,a.[Country/Region] = b.[Country]
			,a.[Fax] = b.[Fax]
			,a.[First Name] = b.[First Name]
			,a.[First RFQ Release Date] = b.[First RFQ Release Date]
			,a.[Industry] = b.[Industry]
			,a.[Last Name] = b.[Last Name]
			,a.[Last Upgrade Request Date] = b.[Last Upgrade Request Date]
			,a.[MFG Contact Type] = b.[MFG Contact Type]
			,a.[Mobile Phone] = b.[Mobile Phone]
			,a.[Most Recent RFQ Release Date] = b.[Most Recent RFQ Release Date]
			,a.[Number of RFQs] = b.[Number of RFQs]
			,a.[Phone] = b.[Phone]
			,a.[Postal Code] = b.[Postal Code]
			,a.[State/Region] = b.[State/Region]
			,a.[Street Address] = b.[Street Address]
			,a.[Territory] = b.[Territory]
			,a.[Unsubscribed from all email] = b.[Unsubscribed from all email]
			,a.[Upgrade Request] = b.[Upgrade Request]
			,a.[Vision RFQ Validated] = b.[Vision RFQ Validated]
			,a.[Website URL] = b.[Website URL]
			,a.[IsSynced] = 0
			,a.[SyncedDate] = b.[SyncedDate]
			,a.[SyncedDateIST] = b.[SyncedDateIST]
			,a.[IsProcessed] = NULL
		FROM DataSync_MarketplaceHubSpot.dbo.HubSpotContacts (NOLOCK) a
		JOIN
		(
			SELECT 
			a.[Email], a.[HubSpot Contact Id], a.[Contact Id], a.[Vision Buyer Id], a.[Vision Buyer Account Id], a.[HubSpot Buyer Account Id], a.[Vision Supplier Id]
			, a.[Vision Supplier Account Id], a.[HubSpot Supplier Account Id], a.[Buyer City], a.[Buyer Country] 	,[Buyer First Name]	,[Buyer Last Name]	 
			, b.[communication_value] [Buyer Phone], a.[Buyer Postal Code], a.[Buyer State], a.[Buyer Street Address], a.[Buyer Street Address 2]
			, a.[Buyer Territory], a.[City], a.[Country], a.[Country/Region], a.[Fax], a.[First Name]
			, e.[First RFQ Release Date] [First RFQ Release Date], a.[Industry], a.[Last Name]
			, f.[Last Upgrade Request Date] [Last Upgrade Request Date]
			, a.[MFG Contact Type], a.[Mobile Phone], e.[Most Recent RFQ Release Date] [Most Recent RFQ Release Date]
			, e.[Number of RFQs Released] [Number of RFQs]
			, c.communication_value AS [Phone], a.[Postal Code], a.[State/Region], a.[Street Address], a.[Territory]
			, a.[Unsubscribed from all email]
			, (CASE WHEN f.[Last Upgrade Request Date] IS NULL THEN 0 ELSE 1 END) [Upgrade Request]
			, d.Is_Validated_Buyer AS [Vision RFQ Validated]
			, CASE 
				WHEN a.[Vision Buyer Id] IS NOT NULL AND  a.[Vision Supplier Id] IS NULL THEN g.communication_value
				WHEN a.[Vision Buyer Id] IS NULL AND  a.[Vision Supplier Id] IS NOT NULL THEN h.communication_value
				ELSE h.communication_value
			  END [Website URL]
			, a.[IsSynced], a.[SyncedDate], a.[SyncedDateIST]
			FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1 a
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications b ON a.[Vision Buyer Id] = b.contact_id AND b.Rn =1 AND b.communication_type_id = 1
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications c ON a.[Vision Supplier Id] = c.contact_id AND c.Rn =1 AND c.communication_type_id = 1
			--LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo d ON a.[Vision Buyer Id] = d.contact_id
			LEFT JOIN 
			(
				SELECT contact_id , is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 1
				UNION
				SELECT buyer_cont_id , dualaccount_is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 0 AND buyer_cont_id IS NOT NULL
			) d ON a.[Vision Buyer Id] = d.contact_id
			LEFT JOIN 
			(
				SELECT 
					b.contact_id  , MIN(a.status_date) [First RFQ Release Date] 
					, MAX(a.status_date) [Most Recent RFQ Release Date]
					, COUNT(DISTINCT a.rfq_id) as [Number of RFQs Released]
				FROM mp_rfq_release_history (NOLOCK) a
				JOIN mp_rfq					(NOLOCK) b ON a.rfq_id = b.rfq_id
				GROUP BY b.contact_id
			) e ON a.[Vision Buyer Id] = e.contact_id
			LEFT JOIN
			(
				SELECT 
					contact_id , MAX(activity_date) [Last Upgrade Request Date]
				FROM mp_track_user_activities (NOLOCK) WHERE activity_id IN (3,14)
				GROUP BY contact_id
			) f ON a.[Vision Supplier Id] = f.contact_id
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications g ON a.[Vision Buyer Id] = g.contact_id AND g.Rn =1 AND g.communication_type_id = 4
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications h ON a.[Vision Supplier Id] = h.contact_id AND h.Rn =1 AND h.communication_type_id = 4
		) b ON a.Email = b.Email


		/*  M2-4938 Added below code */
		-- updating existing records
		UPDATE a SET 
			a.[Email] = b.[Email]
			/* ---- Below code commented on 14-Aug-2023 because ids fields can't updated */
			--,a.[HubSpot Contact Id] = b.[HubSpot Contact Id]
			--,a.[Contact Id] = b.[Contact Id]
			--,a.[Vision Buyer Id] = b.[Vision Buyer Id]
			--,a.[Vision Buyer Account Id] = b.[Vision Buyer Account Id]
			--,a.[HubSpot Buyer Account Id] = b.[HubSpot Buyer Account Id]
			--,a.[Vision Supplier Id] = b.[Vision Supplier Id]
			--,a.[Vision Supplier Account Id] = b.[Vision Supplier Account Id]
			--,a.[HubSpot Supplier Account Id] = b.[HubSpot Supplier Account Id]
			,a.[Buyer City] = b.[Buyer City]
			,a.[Buyer Country] = b.[Buyer Country]
			,a.[Buyer First Name] = b.[Buyer First Name]
			,a.[Buyer Last Name] = b.[Buyer Last Name]
			,a.[Buyer Phone] = b.[Buyer Phone]
			,a.[Buyer Postal Code] = b.[Buyer Postal Code]
			,a.[Buyer State] = b.[Buyer State]
			,a.[Buyer Street Address] = b.[Buyer Street Address]
			,a.[Buyer Street Address 2] = b.[Buyer Street Address 2]
			,a.[Buyer Territory] = b.[Buyer Territory]
			,a.[City] = b.[City]
			,a.[Country] = b.[Country]
			,a.[Country/Region] = b.[Country]
			,a.[Fax] = b.[Fax]
			,a.[First Name] = b.[First Name]
			,a.[First RFQ Release Date] = b.[First RFQ Release Date]
			,a.[Industry] = b.[Industry]
			,a.[Last Name] = b.[Last Name]
			,a.[Last Upgrade Request Date] = b.[Last Upgrade Request Date]
			,a.[MFG Contact Type] = b.[MFG Contact Type]
			,a.[Mobile Phone] = b.[Mobile Phone]
			,a.[Most Recent RFQ Release Date] = b.[Most Recent RFQ Release Date]
			,a.[Number of RFQs] = b.[Number of RFQs]
			,a.[Phone] = b.[Phone]
			,a.[Postal Code] = b.[Postal Code]
			,a.[State/Region] = b.[State/Region]
			,a.[Street Address] = b.[Street Address]
			,a.[Territory] = b.[Territory]
			,a.[Unsubscribed from all email] = b.[Unsubscribed from all email]
			,a.[Upgrade Request] = b.[Upgrade Request]
			,a.[Vision RFQ Validated] = b.[Vision RFQ Validated]
			,a.[Website URL] = b.[Website URL]
			,a.[IsSynced] = 0
			,a.[SyncedDate] = b.[SyncedDate]
			,a.[SyncedDateIST] = b.[SyncedDateIST]
			,a.[IsProcessed] = NULL
		FROM DataSync_MarketplaceHubSpot.dbo.HubSpotContacts (NOLOCK) a
		JOIN
		(
			SELECT 
			a.[Email], a.[HubSpot Contact Id], a.[Contact Id], a.[Vision Buyer Id], a.[Vision Buyer Account Id], a.[HubSpot Buyer Account Id], a.[Vision Supplier Id]
			, a.[Vision Supplier Account Id], a.[HubSpot Supplier Account Id], a.[Buyer City], a.[Buyer Country] 	,[Buyer First Name]	,[Buyer Last Name]	 
			, b.[communication_value] [Buyer Phone], a.[Buyer Postal Code], a.[Buyer State], a.[Buyer Street Address], a.[Buyer Street Address 2]
			, a.[Buyer Territory], a.[City], a.[Country], a.[Country/Region], a.[Fax], a.[First Name]
			, e.[First RFQ Release Date] [First RFQ Release Date], a.[Industry], a.[Last Name]
			, f.[Last Upgrade Request Date] [Last Upgrade Request Date]
			, a.[MFG Contact Type], a.[Mobile Phone], e.[Most Recent RFQ Release Date] [Most Recent RFQ Release Date]
			, e.[Number of RFQs Released] [Number of RFQs]
			, c.communication_value AS [Phone], a.[Postal Code], a.[State/Region], a.[Street Address], a.[Territory]
			, a.[Unsubscribed from all email]
			, (CASE WHEN f.[Last Upgrade Request Date] IS NULL THEN 0 ELSE 1 END) [Upgrade Request]
			, d.Is_Validated_Buyer AS [Vision RFQ Validated]
			, CASE 
				WHEN a.[Vision Buyer Id] IS NOT NULL AND  a.[Vision Supplier Id] IS NULL THEN g.communication_value
				WHEN a.[Vision Buyer Id] IS NULL AND  a.[Vision Supplier Id] IS NOT NULL THEN h.communication_value
				ELSE h.communication_value
			  END [Website URL]
			, a.[IsSynced], a.[SyncedDate], a.[SyncedDateIST]
			FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1 a
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications b ON a.[Vision Buyer Id] = b.contact_id AND b.Rn =1 AND b.communication_type_id = 1
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications c ON a.[Vision Supplier Id] = c.contact_id AND c.Rn =1 AND c.communication_type_id = 1
			LEFT JOIN 
			(
				SELECT contact_id , is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 1
				UNION
				SELECT buyer_cont_id , dualaccount_is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 0 AND buyer_cont_id IS NOT NULL
			) d ON a.[Vision Buyer Id] = d.contact_id
			LEFT JOIN 
			(
				SELECT 
					b.contact_id  , MIN(a.status_date) [First RFQ Release Date] 
					, MAX(a.status_date) [Most Recent RFQ Release Date]
					, COUNT(DISTINCT a.rfq_id) as [Number of RFQs Released]
				FROM mp_rfq_release_history (NOLOCK) a
				JOIN mp_rfq					(NOLOCK) b ON a.rfq_id = b.rfq_id
				GROUP BY b.contact_id
			) e ON a.[Vision Buyer Id] = e.contact_id
			LEFT JOIN
			(
				SELECT 
					contact_id , MAX(activity_date) [Last Upgrade Request Date]
				FROM mp_track_user_activities (NOLOCK) WHERE activity_id IN (3,14)
				GROUP BY contact_id
			) f ON a.[Vision Supplier Id] = f.contact_id
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications g ON a.[Vision Buyer Id] = g.contact_id AND g.Rn =1 AND g.communication_type_id = 4
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications h ON a.[Vision Supplier Id] = h.contact_id AND h.Rn =1 AND h.communication_type_id = 4
		) b ON 
		a.[Contact Id] = b.[Contact Id] ---- this is unique identifier value of contact id 
	
		/*  */
		COMMIT
	END TRY
	BEGIN CATCH
		ROLLBACK
	END CATCH

	/*
	M2-4474
	Terms & Conditions acceptance field in HubSpot will be updated based on these three values "Accepted", "Declined", "No Response"
	*/
	BEGIN
	   /*  M2-4474 : Buyer and M - New T&C's acceptance modal - DB */
		UPDATE b
		SET 
			b.[Terms and Conditions Status]	 =
			CASE WHEN a.Is_Acceptances = 1 THEN 'Accepted'
				 WHEN a.Is_Acceptances = 0 THEN 'Declined'
				ELSE NULL
			END
			,b.[Terms and Conditions Contact Type] = 
			CASE WHEN a.Who_Accepted_Or_Declined = 1 THEN 'Buyer'
				 WHEN a.Who_Accepted_Or_Declined = 0 THEN 'Manufacturer'
				ELSE NULL
			END
			,b.[Terms and Conditions Action Date] = a.Modify_On
			,b.[IsSynced] = 0
			,b.[IsProcessed] = NULL
		FROM 
		(
			SELECT DISTINCT email ,  Is_Acceptances  , Who_Accepted_Or_Declined  , Modify_On 
			FROM mpNewTermAcceptances (NOLOCK) 
			WHERE  Is_Acceptances IS NOT NULL AND Modify_On BETWEEN DATEADD(MINUTE , -30 ,@SyncedDate) AND @SyncedDate
		) a
		JOIN DataSync_MarketplaceHubSpot.dbo.hubspotcontacts(nolock) b on a.email = b.email
	 /**/
	END

	/* update [Registration Date] for suplier and [Buyer Registration Date] for Buyer  */
	---Supplier
	UPDATE b
	SET 
		b.[Registration Date] = a.created_on
		,b.[IsSynced] = 0
		,b.[IsProcessed] = NULL
	FROM mp_contacts (NOLOCK) a
	JOIN AspNetUsers (NOLOCK) c ON a.user_id = c.id 		
	JOIN DataSync_MarketplaceHubSpot.dbo.hubspotcontacts(nolock) b on  c.Email = b.Email
			AND b.[Vision Supplier Id] = a.contact_id
	WHERE  b.[Registration Date] IS NULL AND YEAR(a.created_on) > 2020
	AND a.is_buyer = 0

	------Buyer
	UPDATE d
	SET 
		d.[Buyer Registration Date] = b.created_on
		,d.[IsSynced] = 0
		,d.[IsProcessed] = NULL
	FROM  aspnetusers (NOLOCK) a  
	JOIN mp_contacts (NOLOCK) b on a.id = b.user_id  
	JOIN mp_companies (NOLOCK) c on c.company_id = b.company_id   
	JOIN DataSync_MarketplaceHubSpot.dbo.hubspotcontacts(NOLOCK) d on d.email = a.email
			AND d.[Vision Buyer Id] = b.contact_id
	WHERE b.is_buyer = 1
	and d.[Buyer Registration Date] IS NULL
	/**/

	/* 	M2-5178 Hubspot - UpSync - Push the test account check box from Vision to Hubspot - DB */ 
	BEGIN
	PRINT GETUTCDATE()
	PRINT 'IS Test Company'	 
	--- This update code for hubspotcompanies -> [Is Test Company]
	;WITH CTE AS 
		(
			SELECT  
				 a.email, b.IsTestAccount 
				 , b.is_admin,b.contact_id 
				 , c.company_id 
				 , CASE WHEN tblIsTestAccountInfo.cnt > 0 THEN 1 ELSE ISNULL(tblIsTestAccountInfo.cnt,0) END IsTestAccountInfoUpdate
				 , tblIsTestAccountInfo.cnt 
				 , ROW_NUMBER() OVER (PARTITION BY c.company_id ORDER BY b.contact_id ) as rn 
			 FROM aspnetusers (NOLOCK) a  
			 join mp_contacts (NOLOCK) b on a.id = b.user_id  
			 join mp_companies (NOLOCK) c on c.company_id = b.company_id  
			 LEFT JOIN
			 ( 
			   SELECT  
					aspnetusers.email 
					, COUNT(1) AS cnt
			   FROM  mp_contacts (NOLOCK)
			   JOIN aspnetusers (NOLOCK) on aspnetusers.id = mp_contacts.user_id
			   WHERE mp_contacts.IsTestAccount = 1 
			   GROUP BY aspnetusers.email
			 ) AS tblIsTestAccountInfo on tblIsTestAccountInfo.email = a.email
			 WHERE   b.company_id IN 
				( 
						 
					SELECT DISTINCT [Vision Supplier Account Id]  FROM DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK)  
					WHERE [Vision Supplier Account Id] IS NOT NULL 
					UNION
					SELECT DISTINCT [Vision Buyer Account Id]  FROM DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK) 
					WHERE [Vision Buyer Account Id] IS NOT NULL 
					
				)
		)	
		UPDATE b   
		SET [Is Test Company] = a.IsTestAccountInfoUpdate
		,b.[IsSynced] = 0
		,b.[IsProcessed] = NULL
		----SELECT [Is Test Company] , a.IsTestAccountInfoUpdate, a.* 
		FROM CTE a
		JOIN DataSync_MarketplaceHubSpot..hubspotcompanies (NOLOCK) b on a.company_id = b.[vision account id]
		JOIN 
			(
				SELECT DISTINCT [Vision Supplier Account Id]  as company_id FROM DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK)  
					WHERE [Vision Supplier Account Id] IS NOT NULL 
					UNION
					SELECT DISTINCT [Vision Buyer Account Id]  from DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK) 
					WHERE [Vision Buyer Account Id] IS NOT NULL 
			) AS company_association_company_id on company_association_company_id.company_id = a.company_id
			WHERE   b.SyncType IS NULL 
			AND a.rn =1 
			AND [Is Test Company] != a.IsTestAccountInfoUpdate
		 
			 
     PRINT 'IS Test Contact'
	 ---- This update code for hubspotcontacts -> [Is Test Company]
	 ;WITH CTE AS 
		(
			SELECT  
				a.email
				, b.IsTestAccount 
				, b.is_admin
				, b.contact_id 
				, c.company_id 
				, CASE WHEN tblIsTestAccountInfo.cnt > 0 THEN 1 ELSE ISNULL(tblIsTestAccountInfo.cnt,0) END IsTestAccountInfoUpdate
				, tblIsTestAccountInfo.cnt 
				, ROW_NUMBER() OVER (PARTITION BY c.company_id ORDER BY b.contact_id ) as rn 
			 FROM aspnetusers (NOLOCK) a  
			 JOIN mp_contacts (NOLOCK) b on a.id = b.user_id  
			 JOIN mp_companies (NOLOCK) c on c.company_id = b.company_id  
			 LEFT JOIN
			 ( 
			   SELECT  
					aspnetusers.email 
					, COUNT(1) AS cnt
				FROM  mp_contacts (NOLOCK)
				JOIN  aspnetusers (NOLOCK) on aspnetusers.id = mp_contacts.user_id
				WHERE mp_contacts.IsTestAccount = 1 
				GROUP BY aspnetusers.email
			 ) AS tblIsTestAccountInfo on tblIsTestAccountInfo.email = a.email
			 WHERE   b.company_id IN 
				( 
					SELECT DISTINCT [Vision Supplier Account Id]  AS company_id FROM DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK)  
					WHERE [Vision Supplier Account Id] IS NOT NULL 
					UNION
					SELECT DISTINCT [Vision Buyer Account Id]  FROM DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK) 
					WHERE [Vision Buyer Account Id] IS NOT NULL 
					
				)
		)	
		UPDATE d   
		SET d.[Is Test Contact] = a.IsTestAccountInfoUpdate
		,d.[IsSynced] = 0
		,d.[IsProcessed] = NULL
		  ---SELECT [Is Test Company] , a.IsTestAccountInfoUpdate, a.* 
			FROM CTE a
			JOIN DataSync_MarketplaceHubSpot..hubspotcompanies (NOLOCK) b on a.company_id = b.[vision account id]
			JOIN DataSync_MarketplaceHubSpot..hubspotcontacts (NOLOCK) d on d.email = a.email
			JOIN 
			(
					SELECT DISTINCT [Vision Supplier Account Id]  AS company_id FROM DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK)  
					WHERE [Vision Supplier Account Id] IS NOT NULL 
					UNION
					SELECT DISTINCT [Vision Buyer Account Id]  FROM DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK) 
					WHERE [Vision Buyer Account Id] IS NOT NULL 
			) AS company_association_company_id on company_association_company_id.company_id = a.company_id
			WHERE     [Is Test Contact] != a.IsTestAccountInfoUpdate
			and b.SyncType IS NULL 
			
 
	 PRINT GETUTCDATE()

	END

	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesType
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline1
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesIndustries
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo2
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsAddress
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompanyCommunications


END
GO
PRINT N'Altering Procedure [dbo].[proc_set_DataSync_Create_MarketplaceToHubSpot_CompanyContact]...';


GO

/*  
EXEC dbo.proc_set_DataSync_Create_MarketplaceToHubSpot_CompanyContact @ContactId = 0 ,@CompanyId =  0 
*/
ALTER PROCEDURE [dbo].[proc_set_DataSync_Create_MarketplaceToHubSpot_CompanyContact]
(
	@ContactId	INT = 0,
	@CompanyId	INT = 0
)
AS
BEGIN
	/* 
		M2-4233 DB - HubSpot - Create Sync Contacts module API Scheduler & Immediate Syncs.
		M2-4235 DB - HubSpot - Create Sync Buyer Companies (Custom) module API Scheduler & Immediate Syncs.
		M2-4234 DB - HubSpot - Create Sync Companies (Default) module API Scheduler & Immediate Syncs.
	
	*/

	--SET NOCOUNT ON 

	DECLARE @SyncedDate AS DATETIME =  GETUTCDATE()
	DECLARE @SyncedDateIST AS DATETIME =  CONVERT(DATETIME,SWITCHOFFSET(@SyncedDate, '+05:30'))
	DECLARE @IsVisionAccountBuyer AS BIT
	DECLARE @PublicProfileURL VARCHAR(1000) 

	IF DB_NAME() = 'mp2020_dev'
	BEGIN
		SET @PublicProfileURL = 'https://dev.mfg.com/manufacturer/'
	END
	ELSE IF DB_NAME() = 'mp2020_uat'
	BEGIN
		SET @PublicProfileURL = 'https://staging.mfg.com/manufacturer/'		
	END
	ELSE IF DB_NAME() = 'mp2020_prod'
	BEGIN
		SET @PublicProfileURL = 'https://mfg.com/manufacturer/'
	END


	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesType
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline1
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesIndustries
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo2
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsAddress
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompanyCommunications
	

	CREATE TABLE #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies (company_id INT NULL)
	CREATE TABLE #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts (contact_id INT NULL)

	BEGIN TRANSACTION
	BEGIN TRY
		-- companies & contacts data already generated marked as processed
		--UPDATE ds SET ds.IsProcessed = 1 , ds.ProcessedDate = @SyncedDate , ds.ProcessedDateIST = @SyncedDateIST
		--FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs ds (NOLOCK) 
		--WHERE CONVERT(DATE,ds.[SyncedDate]) = CONVERT(DATE,@SyncedDate) AND [SyncType] = 'Scheduler - 30 Minutes'
		
		UPDATE ds SET ds.IsProcessed = 1 , ds.ProcessedDate = @SyncedDate , ds.ProcessedDateIST = @SyncedDateIST
		FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs ds (NOLOCK) 
		WHERE [SyncType] = 'Scheduler - 30 Minutes' AND ds.IsProcessed IS NULL

		-- Scheduler sync : checking companies and contact in every 30 minutes which are not sync from Marketplace to HubSpot
		IF @ContactId = 0  AND @CompanyId = 0
		BEGIN
		
			-- List of companies which are not sync from Marketplace to HubSpot
			INSERT INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies (company_id)
			SELECT a.company_id 
			FROM mp_companies (NOLOCK) a
			WHERE NOT EXISTS 
			(
				SELECT 1 FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs ds (NOLOCK) 
				WHERE a.company_id = ds.[Vision Account Id] AND ds.[Vision Contact Id] IS NULL AND ds.IsProcessed = 1
				AND [SyncType] = 'Scheduler - 30 Minutes'
			)
			AND a.company_id <> 0 AND CONVERT(DATE,created_date) = CONVERT(DATE,GETUTCDATE())
			UNION
			---- below code added for last 30 min records skip
			SELECT a.company_id 
			FROM mp_companies (NOLOCK) a
			WHERE NOT EXISTS 
			(
				SELECT 1 FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs ds (NOLOCK) 
				WHERE a.company_id = ds.[Vision Account Id] AND ds.[Vision Contact Id] IS NULL AND ds.IsProcessed = 1
				AND [SyncType] = 'Scheduler - 30 Minutes'
			)
			AND a.company_id <> 0
			AND CONVERT(DATETIME,created_date) between 
			CONCAT(CAST(GETUTCDATE()-1  as date),' ','23:30:00.000') AND CONCAT(CAST(GETUTCDATE()-1  as date),' ','23:59:00.000')

			

			-- List of contacts which are not sync from Marketplace to HubSpot
			INSERT INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts (contact_id)
			SELECT a.contact_id 
			FROM mp_contacts (NOLOCK) a
			WHERE NOT EXISTS 
			(
				SELECT 1 FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs ds (NOLOCK) 
				WHERE a.contact_id = ds.[Vision Contact Id] AND ds.[Vision Account Id] IS NULL AND ds.IsProcessed = 1
				AND [SyncType] = 'Scheduler - 30 Minutes'
			)
			AND a.company_id <> 0 AND a.contact_id <> 0 AND CONVERT(DATE,a.created_on) = CONVERT(DATE,GETUTCDATE())
			UNION
			---- below code added for last 30 min records skip
			 SELECT a.contact_id 
			FROM mp_contacts (NOLOCK) a
			WHERE NOT EXISTS 
			(
				SELECT 1 FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs ds (NOLOCK) 
				WHERE a.contact_id = ds.[Vision Contact Id] AND ds.[Vision Account Id] IS NULL AND ds.IsProcessed = 1
				AND [SyncType] = 'Scheduler - 30 Minutes'
			)
			AND a.company_id <> 0 AND a.contact_id <> 0 
			AND CONVERT(DATETIME,a.created_on) between 
			CONCAT(CAST(GETUTCDATE()-1  as date),' ','23:30:00.000') AND CONCAT(CAST(GETUTCDATE()-1  as date),' ','23:59:00.000')

		
			INSERT INTO DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			([Vision Account Id], [Vision Contact Id], [SyncType], [IsSynced], [SyncedDate], [SyncedDateIST])
			SELECT company_id, NULL, 'Scheduler - 30 Minutes', 1, @SyncedDate, @SyncedDateIST FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies
			UNION
			SELECT NULL, contact_id, 'Scheduler - 30 Minutes', 1, @SyncedDate, @SyncedDateIST FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts

			--SELECT * FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs WHERE [IsProcessed] IS NULL

		END
		ELSE IF @ContactId > 0  AND @CompanyId > 0
		BEGIN

			-- List of companies which are not sync from Marketplace to HubSpot
			INSERT INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies (company_id)
			SELECT a.company_id 
			FROM mp_companies (NOLOCK) a
			WHERE NOT EXISTS (SELECT * FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs (NOLOCK) WHERE [Vision Account Id] = a.company_id)
			AND a.company_id <> 0 AND a.company_id = @CompanyId

			-- List of contacts which are not sync from Marketplace to HubSpot
			INSERT INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts (contact_id)
			SELECT a.contact_id 
			FROM mp_contacts (NOLOCK) a
			WHERE NOT EXISTS (SELECT * FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs (NOLOCK) WHERE [Vision Contact Id] = a.contact_id)
			AND a.company_id <> 0 AND a.contact_id <> 0 AND a.contact_id = @ContactId

			INSERT INTO DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			([Vision Account Id], [Vision Contact Id], [SyncType], [IsSynced], [SyncedDate], [SyncedDateIST])
			SELECT company_id, NULL, 'Immediate', 1, @SyncedDate, @SyncedDateIST FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies
			UNION
			SELECT NULL, contact_id, 'Immediate', 1, @SyncedDate, @SyncedDateIST FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts

			--SELECT * FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs WHERE [IsProcessed] IS NULL

		END
	

		-- companies details
		SELECT 
			a.company_id, a.name , a.cage_code , a.duns_number , a.assigned_customer_rep , a.assigned_sourcingadvisor , a.manufacturing_location_id
			, a.is_hide_directory_profile , a.employee_count_range_id , a.created_date 
			, a.ProfileStatus --- Added with M2-5083 
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo
		FROM mp_companies  a (NOLOCK)
		WHERE EXISTS 
		(
			SELECT 1
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND a.company_id = [Vision Account Id] 
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)
		ORDER BY a.created_date DESC 

		-- companies status buyer or supplier company
		SELECT DISTINCT a.company_id , a.is_buyer INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesType
		FROM mp_contacts a (NOLOCK)
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)

		-- companies address details 
		SELECT 
			a.company_id 
			,b.address1 AS [Company Street Address]
			,b.address2 AS [Company Street Address 2]
			,b.address4 AS [Company City] 
			,c.region_name AS [Company State]
			,b.address3 AS [Company Postal Code]
			,d.country_name AS [Company Country]
			,d.iso_code AS [Company Country Code]
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress
		FROM  
		(
				SELECT 
					company_id , contact_id ,address_id
					, ROW_NUMBER() OVER(PARTITION BY company_id ORDER BY company_id , is_admin DESC, contact_id ) rn 
				FROM [mp_contacts] (NOLOCK)
			
		) a
		JOIN mp_addresses			b (NOLOCK) ON a.address_id = b.address_id AND a.rn = 1 
		LEFT JOIN mp_mst_region		c (NOLOCK) ON b.region_id = c.region_id AND b.region_id <> 0
		LEFT JOIN mp_mst_country	d (NOLOCK) ON b.country_id = d.country_id AND b.country_id <> 0
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		) 

		-- companies phone numbers
		SELECT company_id , communication_value , ROW_NUMBER() OVER (PARTITION BY company_id ORDER BY company_id , contact_id ) Rn 
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompanyCommunications
		FROM mp_communication_details a (NOLOCK) 
		WHERE communication_type_id = 1 AND company_id IS NOT NULL AND company_id > 0 
		AND EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)

		-- companies disciplines 0
		SELECT DISTINCT a.company_id, b.discipline_name  AS part_category_id INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
		FROM 
		mp_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 0
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)
		UNION
		SELECT DISTINCT a.company_id, c.discipline_name  AS part_category_id
		FROM 
		mp_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 1
		JOIN mp_mst_part_category(NOLOCK) c ON b.parent_part_category_id = c.part_category_id 
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)

		-- companies disciplines 1
		SELECT DISTINCT a.company_id, b.discipline_name  AS part_category_id 
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline1
		FROM 
		mp_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 1
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)
	
		-- companies quoting disciplines 0
		SELECT DISTINCT a.company_id, b.discipline_name  AS part_category_id INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline0
		FROM 
		mp_gateway_subscription_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 0
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)
		UNION
		SELECT DISTINCT a.company_id, c.discipline_name  AS part_category_id
		FROM 
		mp_gateway_subscription_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 1
		JOIN mp_mst_part_category(NOLOCK) c ON b.parent_part_category_id = c.part_category_id 
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)

		-- companies quoting disciplines 1
		SELECT DISTINCT a.company_id, b.discipline_name  AS part_category_id 	INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline1
		FROM 
		mp_gateway_subscription_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 1
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)
	
		-- companies industries
		SELECT company_id, CASE WHEN a.is_buyer = 0 THEN supplier_type_name_en WHEN a.is_buyer = 1 THEN IndustryBranches_name_EN  ELSE NULL END industries
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesIndustries
		FROM mp_company_supplier_types (NOLOCK)  a
		LEFT JOIN mp_mst_supplier_type (NOLOCK) b ON a.supplier_type_id = b.supplier_type_id AND a.is_buyer = 0
		LEFT JOIN mp_mst_industrybranches (NOLOCK) c ON a.supplier_type_id = c.IndustryBranches_id AND a.is_buyer = 1
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)

		INSERT INTO DataSync_MarketplaceHubSpot.dbo.HubSpotCompanies
		(
		[Vision Account Id], [HubSpot Account Id], [IsBuyerAccount], [Account Paid Status], [Buyer Company City], [Buyer Company Country],  
		[Buyer Company Phone], [Buyer Company Postal Code], [Buyer Company State], [Buyer Company Street Address], [Buyer Company Street Address 2], [Cage Code], [City], 
		[Company Name], [Company Owner Id], [Country/Region], [Create Date], [Customer Service Rep Id], [Discipline Level 0], [Discipline Level 1], [Duns Number], 
		[Facebook Company Page], [Google Plus Page], [Hide Directory Profile], [Industry], [LinkedIn Company Page] ,[Number of Employees], [Phone Number], 
		[Postal Code], [Public Profile URL], 
		[RFQ Access Capabilities 0], [RFQ Access Capabilities 1], [State/Region], [Street Address], [Street Address 2], [Manufacturing Location], [Twitter Handle], 
		[IsSynced], [SyncedDate], [SyncedDateIST]
		,[RecordType] ---- temp added 
		,[Number of Employees Text]
		,[IsProfilePublished]
		)
		SELECT 
			[Vision Account Id]
			,	NULL AS [HubSpot Account Id]
			,   b.is_buyer AS  [IsBuyerAccount]
			,	CASE 
					WHEN b.is_buyer = 1 THEN ''
					WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 84 THEN 'Growth'
					WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 85 THEN 'Gold'
					WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 86 THEN 'Platinum'
					WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 313 THEN 'Starter'
					ELSE 'Basic'
				END [Account Paid Status]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company City] ELSE '' END [Buyer Company City]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Country] ELSE '' END [Buyer Company Country]
			, CASE WHEN b.is_buyer = 1 THEN k.communication_value ELSE '' END AS [Buyer Company Phone]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Postal Code] ELSE '' END [Buyer Company Postal Code]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company State] ELSE '' END [Buyer Company State]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Street Address] ELSE '' END [Buyer Company Street Address]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Street Address 2] ELSE '' END [Buyer Company Address 2]
			, d.cage_code AS [Cage Code]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company City] ELSE '' END [City]
			, d.name AS [Company Name]
			, d.assigned_sourcingadvisor AS [Company Owner Id]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Country] ELSE '' END [Country]
			, d.created_date AS [Create Date]
			--, d.assigned_customer_rep AS  [Customer Service Rep Id] --- commented with M2-5176
			, NULL AS  [Customer Service Rep Id] --- modified with M2-5176
			, CASE WHEN b.is_buyer = 0 THEN e.disciplines0  END   AS [Discipline Level 0]
			, CASE WHEN b.is_buyer = 0 THEN f.disciplines1  END   AS [Discipline Level 1]
			, d.duns_number AS [Duns Number] 
			, NULL AS [Facebook Company Page]
			, NULL AS [Google Plus Page]
			, CASE WHEN b.is_buyer = 0 THEN ISNULL(d.is_hide_directory_profile, CAST('false' AS BIT))  END AS [Hide Directory Profile]
			, g.industries AS [Industry]
			, NULL AS [LinkedIn Company Page]
			, d.employee_count_range_id AS [Number of Employees]
			, CASE WHEN b.is_buyer = 0 THEN k.communication_value ELSE '' END  AS [Phone Number]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Postal Code]  END AS [Postal Code]
			, CASE WHEN b.is_buyer = 0 THEN h.PublicProfileUrl  END  AS [Public Profile URL]
			---- following fields commented with M2-5177
			--, CASE WHEN b.is_buyer = 0 THEN i.disciplines0  END  AS [RFQ Access Capabilities 0]
			--, CASE WHEN b.is_buyer = 0 THEN j.disciplines1  END  AS [RFQ Access Capabilities 1]
			---- modified with M2-5177
			, NULL  AS [RFQ Access Capabilities 0]
			, NULL  AS [RFQ Access Capabilities 1]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company State]  END AS [State/Region]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Street Address]  END AS [Street Address]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Street Address 2]  END AS [Street Address 2]
			, d.manufacturing_location_id AS [Manufacturing Location]
			, NULL AS [Twitter Handle]
			, CAST('false' AS BIT) AS [IsSynced]
			, @SyncedDate		AS [SyncedDate]
			, @SyncedDateIST	AS [SyncedDateIST]
			, 'RecordCreation'  AS [RecordType] ---- temp added 
			, CASE WHEN d.employee_count_range_id = 1 THEN '1-2'
			       WHEN d.employee_count_range_id = 2 THEN '3-9'
				   WHEN d.employee_count_range_id = 3 THEN '10-49'
				   WHEN d.employee_count_range_id = 4 THEN '50-99'
				   WHEN d.employee_count_range_id = 5 THEN '100-249'
				   WHEN d.employee_count_range_id = 6 THEN '250+'
				   ELSE ''
			  END AS [Number of Employees Text]
			, CASE WHEN ProfileStatus = 234 THEN 1 ELSE 0 END AS [IsProfilePublished] ---- Added with M2-5083
		FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs a 
		JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesType b ON a.[Vision Account Id] = b.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress c ON  a.[Vision Account Id] = c.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo d ON  a.[Vision Account Id] = d.company_id
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines0
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
			GROUP BY
				company_id
		) e ON  a.[Vision Account Id] = e.company_id
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines1
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline1
			GROUP BY
				company_id
		) f ON  a.[Vision Account Id] = f.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesIndustries    g on a.[Vision Account Id] = g.company_id  
		LEFT JOIN 
		(
			SELECT 	
				a.company_id , 
				@PublicProfileURL
				+ CASE 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(a.name))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'') + '-' 
				  END 
				+ CASE 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(c.[Company City]),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(c.[Company City]))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'') +  '-'
					END 
				+ CASE 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(c.[Company State]),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(c.[Company State]))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'')  +  '-'
					END
				+  CONVERT(VARCHAR(100),a.company_id)  AS  PublicProfileUrl
			FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo  a (NOLOCK)
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress	c (NOLOCK) ON a.company_id = c.company_id
		
		) h ON a.[Vision Account Id] = h.company_id 
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines0
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline0
			GROUP BY
				company_id
		) i ON  a.[Vision Account Id] = i.company_id
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines1
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline1
			GROUP BY
				company_id
		) j ON  a.[Vision Account Id] = j.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompanyCommunications k (NOLOCK) ON a.[Vision Account Id] = k.company_id AND k.Rn = 1
		WHERE a.[IsProcessed] IS NULL AND a.[Vision Contact Id] IS NULL AND [SyncType] = 'Scheduler - 30 Minutes'
		-----M2-4938  if company is already exists then do not inserted again
		AND NOT EXISTS 
		(
			SELECT 1 FROM DataSync_MarketplaceHubSpot.dbo.HubSpotCompanies z (NOLOCK)
			WHERE a.[Vision Account Id] = z.[Vision Account Id]
		)
	

		-- contact details
		SELECT 
			b.contact_id ,b.company_id , b.is_buyer ,b.first_name ,b.last_name ,b.address_id ,b.[user_id] ,c.email ,d.seller_cont_id ,e.buyer_cont_id , b.is_validated_buyer
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN h.company_id 
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN f.company_id
				END
			) dualaccount_company_id
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN h.first_name
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN f.first_name
				END
			) dualaccount_first_name
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN h.last_name
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN f.last_name
				END
			) dualaccount_last_name
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN h.address_id
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN f.address_id
				END
			) dualaccount_address_id
			, j.manufacturing_location_id AS territory
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN l.manufacturing_location_id 
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN k.manufacturing_location_id
				END
			) AS dualaccount_territory
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN h.is_validated_buyer
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN f.is_validated_buyer
				END
			) AS dualaccount_is_validated_buyer
			----M2-4544 added below fields
			---, b.created_on [Registration Date]
			,NULL [Registration Date]
			, b.VisionValidatedDate [Vision Validated Date]
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo
		FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs  a
		JOIN mp_contacts  b (NOLOCK) ON  a.[Vision Contact Id] = b.contact_id AND a.[IsProcessed] IS NULL  AND a.[Vision Account Id] IS NULL
		JOIN AspNetUsers  c (NOLOCK) ON b.user_id = c.id
		LEFT JOIN  
		(
			SELECT buyer_cont_id , seller_cont_id FROM mp_contacts_buyersellerassociation (NOLOCK)
		
		) d ON b.contact_id = d.buyer_cont_id
		LEFT JOIN  
		(
			SELECT seller_cont_id , buyer_cont_id FROM mp_contacts_buyersellerassociation (NOLOCK)
		
		) e ON b.contact_id = e.seller_cont_id
		LEFT JOIN mp_contacts  f (NOLOCK) ON d.seller_cont_id = f.contact_id
		LEFT JOIN AspNetUsers  g (NOLOCK) ON f.user_id = g.id
		LEFT JOIN mp_contacts  h (NOLOCK) ON e.buyer_cont_id = h.contact_id
		LEFT JOIN AspNetUsers  i (NOLOCK) ON h.user_id = i.id
		JOIN mp_companies	   j (NOLOCK) ON b.company_id = j.company_id
		LEFT JOIN mp_companies	   k (NOLOCK) ON f.company_id = k.company_id
		LEFT JOIN mp_companies	   l (NOLOCK) ON h.company_id = l.company_id
		WHERE a.[SyncType] = 'Scheduler - 30 Minutes'
	
		-- contact address
		SELECT 
			a.address_id 
			,b.address1 AS [Contact Street Address]
			,b.address2 AS [Contact Street Address 2]
			,b.address4 AS [Contact City] 
			,c.region_name AS [Contact State]
			,b.address3 AS [Contact Postal Code]
			,d.country_name AS [Contact Country]
			,d.iso_code AS [Contact Country Code]
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsAddress
		FROM 
		(
			SELECT address_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo
			UNION
			SELECT dualaccount_address_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE dualaccount_address_id IS NOT NULL
		) a
		JOIN mp_addresses			b (NOLOCK) ON a.address_id = b.address_id  AND a.address_id IS NOT NULL
		LEFT JOIN mp_mst_region		c (NOLOCK) ON b.region_id = c.region_id AND b.region_id <> 0
		LEFT JOIN mp_mst_country	d (NOLOCK) ON b.country_id = d.country_id AND b.country_id <> 0

		-- contact communication details
		SELECT 
			communication_id , contact_id , communication_type_id , communication_value  
			, ROW_NUMBER() OVER (PARTITION BY contact_id , communication_type_id ORDER BY contact_id , communication_type_id , communication_id DESC) Rn 
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications
		FROM mp_communication_details (NOLOCK)
		WHERE communication_type_id IN  (1,2,4,5) AND contact_id <> 0
		AND contact_id IN 
		(
			SELECT contact_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo
			UNION
			SELECT seller_cont_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE seller_cont_id IS NOT NULL
			UNION
			SELECT buyer_cont_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE buyer_cont_id IS NOT NULL
		)
	
		SELECT DISTINCT
			b.email				AS [Email]
			, NULL					AS [HubSpot Contact Id]
			, b.user_id				AS [Contact Id]
			, (CASE WHEN b.is_buyer = 1 THEN b.contact_id ELSE b.buyer_cont_id END) AS [Vision Buyer Id]
			, (CASE WHEN b.is_buyer = 1 THEN b.company_id ELSE b.dualaccount_company_id END) AS [Vision Buyer Account Id]
			, NULL					AS [HubSpot Buyer Account Id]
			, (CASE WHEN b.is_buyer = 0 THEN b.contact_id ELSE b.seller_cont_id END) AS [Vision Supplier Id]
			, (CASE WHEN b.is_buyer = 0 THEN b.company_id ELSE b.dualaccount_company_id END) AS [Vision Supplier Account Id]
			, NULL					AS [HubSpot Supplier Account Id]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact City] ELSE d.[Contact City] END) AS [Buyer City]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact Country] ELSE d.[Contact Country] END) AS [Buyer Country]
			, (CASE WHEN b.is_buyer = 1 THEN b.first_name ELSE b.dualaccount_first_name END) AS [Buyer First Name]				
			, (CASE WHEN b.is_buyer = 1 THEN b.last_name ELSE b.dualaccount_last_name END) AS [Buyer Last Name]				
			, NULL AS [Buyer Phone]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact Postal Code] ELSE d.[Contact Postal Code] END) AS [Buyer Postal Code]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact State] ELSE d.[Contact State] END) AS [Buyer State]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact Street Address] ELSE d.[Contact Street Address] END) AS [Buyer Street Address]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact Street Address 2] ELSE d.[Contact Street Address 2] END) AS [Buyer Street Address 2]
			, (CASE WHEN b.is_buyer = 1 THEN b.territory ELSE b.dualaccount_territory END)  AS [Buyer Territory]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact City] ELSE d.[Contact City] END) AS [City]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact Country] ELSE d.[Contact Country] END) AS [Country]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact State] ELSE d.[Contact State] END) AS [Country/Region]
			, NULL AS [Fax]
			, (CASE WHEN b.is_buyer = 0 THEN b.first_name ELSE b.dualaccount_first_name END) AS [First Name]
			, NULL AS [First RFQ Release Date]
			, NULL AS [Industry]
			, (CASE WHEN b.is_buyer = 0 THEN b.last_name ELSE b.dualaccount_last_name END) AS [Last Name]
			, NULL AS [Last Upgrade Request Date]
			, CASE 
				WHEN b.is_buyer = 1 AND ISNULL(b.seller_cont_id,0)> 0 THEN 'Both' 
				WHEN b.is_buyer = 1 AND ISNULL(b.seller_cont_id,0)= 0 THEN 'Buyer' 
				WHEN b.is_buyer = 0 AND ISNULL(b.buyer_cont_id,0)> 0 THEN 'Both'
				WHEN b.is_buyer = 0 AND ISNULL(b.buyer_cont_id,0)= 0 THEN 'Supplier'
			  END AS [MFG Contact Type]
			, NULL  AS [Mobile Phone]
			, NULL AS [Most Recent RFQ Release Date]
			, NULL AS [Number of RFQs]
			, NULL AS [Phone]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact Postal Code] ELSE d.[Contact Postal Code] END) AS [Postal Code]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact State] ELSE d.[Contact State] END) AS [State/Region]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact Street Address] ELSE d.[Contact Street Address] END) AS [Street Address]
			, (CASE WHEN b.is_buyer = 0 THEN b.territory ELSE b.dualaccount_territory END) AS [Territory]
			, NULL AS [Unsubscribed from all email]
			, NULL AS [Upgrade Request]
			, NULL AS [Vision RFQ Validated]
			, NULL AS [Website URL]
			, CAST('false' AS BIT)	AS [IsSynced]
			, @SyncedDate			AS [SyncedDate]
			, @SyncedDateIST		AS [SyncedDateIST]
			----M2-4544 added below fields
			----, b.[Registration Date]
			, NULL [Registration Date]
			, b.[Vision Validated Date]
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1
		FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs a 
		JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo b ON a.[Vision Contact Id] = b.contact_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsAddress c ON b.address_id = c.address_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsAddress d ON b.dualaccount_address_id = d.address_id
		WHERE a.[IsProcessed] IS NULL AND a.[Vision Account Id] IS NULL AND [SyncType] = 'Scheduler - 30 Minutes'

		-- inserting new records
		INSERT INTO  DataSync_MarketplaceHubSpot.dbo.HubSpotContacts
		(
			[Email], [HubSpot Contact Id], [Contact Id], [Vision Buyer Id], [Vision Buyer Account Id], [HubSpot Buyer Account Id], [Vision Supplier Id]
		, [Vision Supplier Account Id], [HubSpot Supplier Account Id], [Buyer City], [Buyer Country] 	,[Buyer First Name]	,[Buyer Last Name]	 , [Buyer Phone], [Buyer Postal Code], [Buyer State], [Buyer Street Address], [Buyer Street Address 2]
			, [Buyer Territory], [City], [Country], [Country/Region], [Fax], [First Name], [First RFQ Release Date], [Industry], [Last Name], [Last Upgrade Request Date]
			, [MFG Contact Type], [Mobile Phone], [Most Recent RFQ Release Date], [Number of RFQs], [Phone], [Postal Code], [State/Region], [Street Address], [Territory]
			, [Unsubscribed from all email], [Upgrade Request], [Vision RFQ Validated], [Website URL], [IsSynced], [SyncedDate], [SyncedDateIST]
			, [Registration Date] ,[Vision Validated Date] ---- M2-4544
		)
		SELECT 
			a.[Email], a.[HubSpot Contact Id], a.[Contact Id], a.[Vision Buyer Id], a.[Vision Buyer Account Id], a.[HubSpot Buyer Account Id], a.[Vision Supplier Id]
			, a.[Vision Supplier Account Id], a.[HubSpot Supplier Account Id], a.[Buyer City], a.[Buyer Country] 	,[Buyer First Name]	,[Buyer Last Name]	 
			, b.[communication_value] [Buyer Phone], a.[Buyer Postal Code], a.[Buyer State], a.[Buyer Street Address], a.[Buyer Street Address 2]
			, a.[Buyer Territory], a.[City], a.[Country], a.[Country] , a.[Fax], a.[First Name]
			, e.[First RFQ Release Date] [First RFQ Release Date], a.[Industry], a.[Last Name]
			, f.[Last Upgrade Request Date] [Last Upgrade Request Date]
			, a.[MFG Contact Type], a.[Mobile Phone], e.[Most Recent RFQ Release Date] [Most Recent RFQ Release Date]
			, e.[Number of RFQs Released] [Number of RFQs]
			, c.communication_value AS [Phone], a.[Postal Code], a.[State/Region], a.[Street Address], a.[Territory]
			, a.[Unsubscribed from all email]
			, (CASE WHEN f.[Last Upgrade Request Date] IS NULL THEN 0 ELSE 1 END) [Upgrade Request]
			, d.Is_Validated_Buyer AS [Vision RFQ Validated]
			, CASE 
				WHEN a.[Vision Buyer Id] IS NOT NULL AND  a.[Vision Supplier Id] IS NULL THEN g.communication_value
				WHEN a.[Vision Buyer Id] IS NULL AND  a.[Vision Supplier Id] IS NOT NULL THEN h.communication_value
				ELSE h.communication_value
			  END [Website URL]
			, a.[IsSynced], a.[SyncedDate], a.[SyncedDateIST]
			----M2-4544 added below fields
			----, a.[Registration Date]
			, NULL [Registration Date]
			, a.[Vision Validated Date]
		FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1 a
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications b ON a.[Vision Buyer Id] = b.contact_id AND b.Rn =1 AND b.communication_type_id = 1
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications c ON a.[Vision Supplier Id] = c.contact_id AND c.Rn =1 AND c.communication_type_id = 1
		--LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo d ON a.[Vision Buyer Id] = d.contact_id
		LEFT JOIN 
		(
			SELECT contact_id , is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 1
			UNION
			SELECT buyer_cont_id , dualaccount_is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 0 AND buyer_cont_id IS NOT NULL
		) d ON a.[Vision Buyer Id] = d.contact_id
		LEFT JOIN 
		(
			SELECT 
				b.contact_id  , MIN(a.status_date) [First RFQ Release Date] 
				, MAX(a.status_date) [Most Recent RFQ Release Date]
				, COUNT(DISTINCT a.rfq_id) as [Number of RFQs Released]
			FROM mp_rfq_release_history (NOLOCK) a
			JOIN mp_rfq					(NOLOCK) b ON a.rfq_id = b.rfq_id
			GROUP BY b.contact_id
		) e ON a.[Vision Buyer Id] = e.contact_id
		LEFT JOIN
		(
			SELECT 
				contact_id , MAX(activity_date) [Last Upgrade Request Date]
			FROM mp_track_user_activities (NOLOCK) WHERE activity_id IN (3,14)
			GROUP BY contact_id
		) f ON a.[Vision Supplier Id] = f.contact_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications g ON a.[Vision Buyer Id] = g.contact_id AND g.Rn =1 AND g.communication_type_id = 4
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications h ON a.[Vision Supplier Id] = h.contact_id AND h.Rn =1 AND h.communication_type_id = 4
		WHERE NOT EXISTS 
		(	SELECT 1 FROM DataSync_MarketplaceHubSpot.dbo.HubSpotContacts b (NOLOCK) WHERE 
			----a.Email = b.Email  ---- M2-4938 : commented on 24-Apr 
			---- M2-4938 : Added  below condition if contact is already exists then do not inserted again
			a.[Contact Id] = b.[Contact Id] ---- this is unique identifier value of contact id
		
		)
		-- updating existing records
		UPDATE a SET 
			a.[Email] = b.[Email]
			,a.[HubSpot Contact Id] = b.[HubSpot Contact Id]
			,a.[Contact Id] = b.[Contact Id]
			,a.[Vision Buyer Id] = b.[Vision Buyer Id]
			,a.[Vision Buyer Account Id] = b.[Vision Buyer Account Id]
			,a.[HubSpot Buyer Account Id] = b.[HubSpot Buyer Account Id]
			,a.[Vision Supplier Id] = b.[Vision Supplier Id]
			,a.[Vision Supplier Account Id] = b.[Vision Supplier Account Id]
			,a.[HubSpot Supplier Account Id] = b.[HubSpot Supplier Account Id]
			,a.[Buyer City] = b.[Buyer City]
			,a.[Buyer Country] = b.[Buyer Country]
			,a.[Buyer First Name] = b.[Buyer First Name]
			,a.[Buyer Last Name] = b.[Buyer Last Name]
			,a.[Buyer Phone] = b.[Buyer Phone]
			,a.[Buyer Postal Code] = b.[Buyer Postal Code]
			,a.[Buyer State] = b.[Buyer State]
			,a.[Buyer Street Address] = b.[Buyer Street Address]
			,a.[Buyer Street Address 2] = b.[Buyer Street Address 2]
			,a.[Buyer Territory] = b.[Buyer Territory]
			,a.[City] = b.[City]
			,a.[Country] = b.[Country]
			,a.[Country/Region] = b.[Country]
			,a.[Fax] = b.[Fax]
			,a.[First Name] = b.[First Name]
			,a.[First RFQ Release Date] = b.[First RFQ Release Date]
			,a.[Industry] = b.[Industry]
			,a.[Last Name] = b.[Last Name]
			,a.[Last Upgrade Request Date] = b.[Last Upgrade Request Date]
			,a.[MFG Contact Type] = b.[MFG Contact Type]
			,a.[Mobile Phone] = b.[Mobile Phone]
			,a.[Most Recent RFQ Release Date] = b.[Most Recent RFQ Release Date]
			,a.[Number of RFQs] = b.[Number of RFQs]
			,a.[Phone] = b.[Phone]
			,a.[Postal Code] = b.[Postal Code]
			,a.[State/Region] = b.[State/Region]
			,a.[Street Address] = b.[Street Address]
			,a.[Territory] = b.[Territory]
			,a.[Unsubscribed from all email] = b.[Unsubscribed from all email]
			,a.[Upgrade Request] = b.[Upgrade Request]
			,a.[Vision RFQ Validated] = b.[Vision RFQ Validated]
			,a.[Website URL] = b.[Website URL]
			,a.[IsSynced] = 0
			,a.[SyncedDate] = b.[SyncedDate]
			,a.[SyncedDateIST] = b.[SyncedDateIST]
			,a.[IsProcessed] = NULL

		FROM DataSync_MarketplaceHubSpot.dbo.HubSpotContacts (NOLOCK) a
		JOIN
		(
			SELECT 
			a.[Email], a.[HubSpot Contact Id], a.[Contact Id], a.[Vision Buyer Id], a.[Vision Buyer Account Id], a.[HubSpot Buyer Account Id], a.[Vision Supplier Id]
			, a.[Vision Supplier Account Id], a.[HubSpot Supplier Account Id], a.[Buyer City], a.[Buyer Country] 	,[Buyer First Name]	,[Buyer Last Name]	 
			, b.[communication_value] [Buyer Phone], a.[Buyer Postal Code], a.[Buyer State], a.[Buyer Street Address], a.[Buyer Street Address 2]
			, a.[Buyer Territory], a.[City], a.[Country], a.[Country/Region], a.[Fax], a.[First Name]
			, e.[First RFQ Release Date] [First RFQ Release Date], a.[Industry], a.[Last Name]
			, f.[Last Upgrade Request Date] [Last Upgrade Request Date]
			, a.[MFG Contact Type], a.[Mobile Phone], e.[Most Recent RFQ Release Date] [Most Recent RFQ Release Date]
			, e.[Number of RFQs Released] [Number of RFQs]
			, c.communication_value AS [Phone], a.[Postal Code], a.[State/Region], a.[Street Address], a.[Territory]
			, a.[Unsubscribed from all email]
			, (CASE WHEN f.[Last Upgrade Request Date] IS NULL THEN 0 ELSE 1 END) [Upgrade Request]
			, d.Is_Validated_Buyer AS [Vision RFQ Validated]
			, CASE 
				WHEN a.[Vision Buyer Id] IS NOT NULL AND  a.[Vision Supplier Id] IS NULL THEN g.communication_value
				WHEN a.[Vision Buyer Id] IS NULL AND  a.[Vision Supplier Id] IS NOT NULL THEN h.communication_value
				ELSE h.communication_value
			  END [Website URL]
			, a.[IsSynced], a.[SyncedDate], a.[SyncedDateIST]
			FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1 a
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications b ON a.[Vision Buyer Id] = b.contact_id AND b.Rn =1 AND b.communication_type_id = 1
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications c ON a.[Vision Supplier Id] = c.contact_id AND c.Rn =1 AND c.communication_type_id = 1
			--LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo d ON a.[Vision Buyer Id] = d.contact_id
			LEFT JOIN 
			(
				SELECT contact_id , is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 1
				UNION
				SELECT buyer_cont_id , dualaccount_is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 0 AND buyer_cont_id IS NOT NULL
			) d ON a.[Vision Buyer Id] = d.contact_id
			LEFT JOIN 
			(
				SELECT 
					b.contact_id  , MIN(a.status_date) [First RFQ Release Date] 
					, MAX(a.status_date) [Most Recent RFQ Release Date]
					, COUNT(DISTINCT a.rfq_id) as [Number of RFQs Released]
				FROM mp_rfq_release_history (NOLOCK) a
				JOIN mp_rfq					(NOLOCK) b ON a.rfq_id = b.rfq_id
				GROUP BY b.contact_id
			) e ON a.[Vision Buyer Id] = e.contact_id
			LEFT JOIN
			(
				SELECT 
					contact_id , MAX(activity_date) [Last Upgrade Request Date]
				FROM mp_track_user_activities (NOLOCK) WHERE activity_id IN (3,14)
				GROUP BY contact_id
			) f ON a.[Vision Supplier Id] = f.contact_id
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications g ON a.[Vision Buyer Id] = g.contact_id AND g.Rn =1 AND g.communication_type_id = 4
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications h ON a.[Vision Supplier Id] = h.contact_id AND h.Rn =1 AND h.communication_type_id = 4
		) b ON a.Email = b.Email

		/*  M2-4938 Added below code */
		-- updating existing records
		UPDATE a SET 
			a.[Email] = b.[Email]
			,a.[HubSpot Contact Id] = b.[HubSpot Contact Id]
			,a.[Contact Id] = b.[Contact Id]
			,a.[Vision Buyer Id] = b.[Vision Buyer Id]
			,a.[Vision Buyer Account Id] = b.[Vision Buyer Account Id]
			,a.[HubSpot Buyer Account Id] = b.[HubSpot Buyer Account Id]
			,a.[Vision Supplier Id] = b.[Vision Supplier Id]
			,a.[Vision Supplier Account Id] = b.[Vision Supplier Account Id]
			,a.[HubSpot Supplier Account Id] = b.[HubSpot Supplier Account Id]
			,a.[Buyer City] = b.[Buyer City]
			,a.[Buyer Country] = b.[Buyer Country]
			,a.[Buyer First Name] = b.[Buyer First Name]
			,a.[Buyer Last Name] = b.[Buyer Last Name]
			,a.[Buyer Phone] = b.[Buyer Phone]
			,a.[Buyer Postal Code] = b.[Buyer Postal Code]
			,a.[Buyer State] = b.[Buyer State]
			,a.[Buyer Street Address] = b.[Buyer Street Address]
			,a.[Buyer Street Address 2] = b.[Buyer Street Address 2]
			,a.[Buyer Territory] = b.[Buyer Territory]
			,a.[City] = b.[City]
			,a.[Country] = b.[Country]
			,a.[Country/Region] = b.[Country]
			,a.[Fax] = b.[Fax]
			,a.[First Name] = b.[First Name]
			,a.[First RFQ Release Date] = b.[First RFQ Release Date]
			,a.[Industry] = b.[Industry]
			,a.[Last Name] = b.[Last Name]
			,a.[Last Upgrade Request Date] = b.[Last Upgrade Request Date]
			,a.[MFG Contact Type] = b.[MFG Contact Type]
			,a.[Mobile Phone] = b.[Mobile Phone]
			,a.[Most Recent RFQ Release Date] = b.[Most Recent RFQ Release Date]
			,a.[Number of RFQs] = b.[Number of RFQs]
			,a.[Phone] = b.[Phone]
			,a.[Postal Code] = b.[Postal Code]
			,a.[State/Region] = b.[State/Region]
			,a.[Street Address] = b.[Street Address]
			,a.[Territory] = b.[Territory]
			,a.[Unsubscribed from all email] = b.[Unsubscribed from all email]
			,a.[Upgrade Request] = b.[Upgrade Request]
			,a.[Vision RFQ Validated] = b.[Vision RFQ Validated]
			,a.[Website URL] = b.[Website URL]
			,a.[IsSynced] = 0
			,a.[SyncedDate] = b.[SyncedDate]
			,a.[SyncedDateIST] = b.[SyncedDateIST]
			,a.[IsProcessed] = NULL

		FROM DataSync_MarketplaceHubSpot.dbo.HubSpotContacts (NOLOCK) a
		JOIN
		(
			SELECT 
			a.[Email], a.[HubSpot Contact Id], a.[Contact Id], a.[Vision Buyer Id], a.[Vision Buyer Account Id], a.[HubSpot Buyer Account Id], a.[Vision Supplier Id]
			, a.[Vision Supplier Account Id], a.[HubSpot Supplier Account Id], a.[Buyer City], a.[Buyer Country] 	,[Buyer First Name]	,[Buyer Last Name]	 
			, b.[communication_value] [Buyer Phone], a.[Buyer Postal Code], a.[Buyer State], a.[Buyer Street Address], a.[Buyer Street Address 2]
			, a.[Buyer Territory], a.[City], a.[Country], a.[Country/Region], a.[Fax], a.[First Name]
			, e.[First RFQ Release Date] [First RFQ Release Date], a.[Industry], a.[Last Name]
			, f.[Last Upgrade Request Date] [Last Upgrade Request Date]
			, a.[MFG Contact Type], a.[Mobile Phone], e.[Most Recent RFQ Release Date] [Most Recent RFQ Release Date]
			, e.[Number of RFQs Released] [Number of RFQs]
			, c.communication_value AS [Phone], a.[Postal Code], a.[State/Region], a.[Street Address], a.[Territory]
			, a.[Unsubscribed from all email]
			, (CASE WHEN f.[Last Upgrade Request Date] IS NULL THEN 0 ELSE 1 END) [Upgrade Request]
			, d.Is_Validated_Buyer AS [Vision RFQ Validated]
			, CASE 
				WHEN a.[Vision Buyer Id] IS NOT NULL AND  a.[Vision Supplier Id] IS NULL THEN g.communication_value
				WHEN a.[Vision Buyer Id] IS NULL AND  a.[Vision Supplier Id] IS NOT NULL THEN h.communication_value
				ELSE h.communication_value
			  END [Website URL]
			, a.[IsSynced], a.[SyncedDate], a.[SyncedDateIST]
			FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1 a
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications b ON a.[Vision Buyer Id] = b.contact_id AND b.Rn =1 AND b.communication_type_id = 1
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications c ON a.[Vision Supplier Id] = c.contact_id AND c.Rn =1 AND c.communication_type_id = 1
			LEFT JOIN 
			(
				SELECT contact_id , is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 1
				UNION
				SELECT buyer_cont_id , dualaccount_is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 0 AND buyer_cont_id IS NOT NULL
			) d ON a.[Vision Buyer Id] = d.contact_id
			LEFT JOIN 
			(
				SELECT 
					b.contact_id  , MIN(a.status_date) [First RFQ Release Date] 
					, MAX(a.status_date) [Most Recent RFQ Release Date]
					, COUNT(DISTINCT a.rfq_id) as [Number of RFQs Released]
				FROM mp_rfq_release_history (NOLOCK) a
				JOIN mp_rfq					(NOLOCK) b ON a.rfq_id = b.rfq_id
				GROUP BY b.contact_id
			) e ON a.[Vision Buyer Id] = e.contact_id
			LEFT JOIN
			(
				SELECT 
					contact_id , MAX(activity_date) [Last Upgrade Request Date]
				FROM mp_track_user_activities (NOLOCK) WHERE activity_id IN (3,14)
				GROUP BY contact_id
			) f ON a.[Vision Supplier Id] = f.contact_id
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications g ON a.[Vision Buyer Id] = g.contact_id AND g.Rn =1 AND g.communication_type_id = 4
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications h ON a.[Vision Supplier Id] = h.contact_id AND h.Rn =1 AND h.communication_type_id = 4
		) b ON a.[contact Id] = b.[contact Id]
		/* */
	
		COMMIT
	END TRY
	BEGIN CATCH
		ROLLBACK
	END CATCH

	/*
	M2-4544
	Add Registration and validation date to database fields and to Hubspot - DB
	*/ 
	BEGIN
	    ---- here update from MFG to HubSpot - validation date from vision
		UPDATE b
		SET 
			b.[Vision Validated Date] = a.VisionValidatedDate
			/* Beau Martin 19/01/2023 User khalid.mostafa@brainchildengineering.com is "Validated" in Vision, yet "Vision RFQ Validated" status is not updated in Hubspot.*/
			,[Vision RFQ Validated]  = 1
			/**/
			,b.[IsSynced] = 0
			,b.[IsProcessed] = NULL
		FROM mp_contacts (NOLOCK) a
		JOIN DataSync_MarketplaceHubSpot.dbo.hubspotcontacts(NOLOCK) b on  b.[Vision Buyer Id] = a.contact_id
		WHERE b.[Vision Validated Date] IS NULL
		AND a.VisionValidatedDate IS NOT NULL
		--- TBD on synctype = 1 condition is requird or not
		 
		---- here update [Vision Validated Date] if from MFG this buyer validate again from vision
		UPDATE b
		SET 
			b.[Vision Validated Date] = a.VisionValidatedDate
			/* Beau Martin 19/01/2023 User khalid.mostafa@brainchildengineering.com is "Validated" in Vision, yet "Vision RFQ Validated" status is not updated in Hubspot.*/
			,[Vision RFQ Validated]  = 1
			/**/
			,b.[IsSynced] = 0
			,b.[IsProcessed] = NULL
		FROM mp_contacts (NOLOCK) a
		JOIN DataSync_MarketplaceHubSpot.dbo.hubspotcontacts(nolock) b on  b.[Vision Buyer Id] = a.contact_id
		WHERE b.[Vision Validated Date] IS NOT NULL
		AND  CAST(a.VisionValidatedDate AS DATETIME)   > CAST(b.[Vision Validated Date]  AS DATETIME)

		/* update [Registration Date] for suplier and [Buyer Registration Date] for Buyer  */
		---Supplier
		UPDATE b
		SET 
			b.[Registration Date] = a.created_on
			,b.[IsSynced] = 0
			,b.[IsProcessed] = NULL
		FROM mp_contacts (NOLOCK) a
		JOIN AspNetUsers (NOLOCK) c ON a.user_id = c.id 		
		JOIN DataSync_MarketplaceHubSpot.dbo.hubspotcontacts(nolock) b on  c.Email = b.Email
				AND b.[Vision Supplier Id] = a.contact_id
		WHERE  b.[Registration Date] IS NULL AND YEAR(a.created_on) > 2020
		AND a.is_buyer = 0

		------Buyer
		UPDATE d
		SET 
			d.[Buyer Registration Date] = b.created_on
			,d.[IsSynced] = 0
			,d.[IsProcessed] = NULL
		FROM  aspnetusers (NOLOCK) a  
		JOIN mp_contacts (NOLOCK) b on a.id = b.user_id  
		JOIN mp_companies (NOLOCK) c on c.company_id = b.company_id   
		JOIN DataSync_MarketplaceHubSpot.dbo.hubspotcontacts(NOLOCK) d on d.email = a.email
				AND d.[Vision Buyer Id] = b.contact_id
		WHERE b.is_buyer = 1
		and d.[Buyer Registration Date] IS NULL
		/**/

	END

	----  M2-4863 Update HubSpotContactId from HubSpot DB to MFG DB
	UPDATE b
	 SET b.HubSpotContactId = d.[HubSpot Contact Id]
	 FROM  aspnetusers (NOLOCK) a  
	 JOIN mp_contacts (NOLOCK) b ON a.id = b.user_id  
	 JOIN mp_companies (NOLOCK) c ON c.company_id = b.company_id   
	 JOIN DataSync_MarketplaceHubSpot.dbo.hubspotcontacts(NOLOCK) d ON d.email = a.email
	 WHERE d.[HubSpot Contact Id] IS NOT NULL 
	 AND b.HubSpotContactId is null


	/* 	M2-5178 Hubspot - UpSync - Push the test account check box from Vision to Hubspot - DB */ 
	 
	BEGIN
  --- This update code for hubspotcompanies -> [Is Test Company]
	;WITH CTE AS 
		(
			SELECT  
			 a.email, b.IsTestAccount , b.is_admin,b.contact_id ,c.company_id 
			 , CASE WHEN tblIsTestAccountInfo.cnt > 0 THEN 1 ELSE ISNULL(tblIsTestAccountInfo.cnt,0) END IsTestAccountInfoUpdate
			 ,tblIsTestAccountInfo.cnt 
			 ,ROW_NUMBER() OVER (PARTITION BY c.company_id ORDER BY b.contact_id ) as rn 
			 FROM aspnetusers  (NOLOCK) a  
			 join mp_contacts  (NOLOCK) b on a.id = b.user_id  
			 join mp_companies (NOLOCK) c on c.company_id = b.company_id  
			 LEFT JOIN
			 ( 
			   SELECT  
				aspnetusers.email 
				, COUNT(1) AS cnt
				 FROM  mp_contacts (NOLOCK)
				 JOIN  aspnetusers (NOLOCK) on aspnetusers.id = mp_contacts.user_id
				 WHERE mp_contacts.IsTestAccount = 1 
				 GROUP BY aspnetusers.email
			 ) AS tblIsTestAccountInfo on tblIsTestAccountInfo.email = a.email
			 WHERE   b.company_id IN 
				( 
					--SELECT company_id  FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies
			 
					select distinct [Vision Supplier Account Id] from #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo a
					join DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK) b on a.Email = b.email
					UNION
					select distinct [Vision Buyer Account Id] from #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo a
					join DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK) b on a.Email = b.email
					
				)
		)	
		UPDATE b   
		SET [Is Test Company] = a.IsTestAccountInfoUpdate
		,b.[IsSynced] = 0
		,b.[IsProcessed] = NULL
		----SELECT a.* 
			FROM CTE a
			JOIN DataSync_MarketplaceHubSpot..hubspotcompanies (NOLOCK) b on a.company_id = b.[vision account id]
			JOIN 
			(
					SELECT DISTINCT [Vision Supplier Account Id] AS company_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo a
					JOIN DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK) b on a.Email = b.email
					UNION
					SELECT DISTINCT [Vision Buyer Account Id] FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo a
					JOIN DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK) b on a.Email = b.email
			) AS company_association_company_id on company_association_company_id.company_id = a.company_id
			WHERE   b.SyncType IS NULL 
			and a.rn =1 
		
		---- This update code for hubspotcontacts -> [Is Test Company]
		;WITH CTE AS 
		(
			SELECT  
			 a.email, b.IsTestAccount , b.is_admin,b.contact_id ,c.company_id 
			 , CASE WHEN tblIsTestAccountInfo.cnt > 0 THEN 1 ELSE ISNULL(tblIsTestAccountInfo.cnt,0) END IsTestAccountInfoUpdate
			 ,tblIsTestAccountInfo.cnt 
			 ,ROW_NUMBER() OVER (PARTITION BY c.company_id ORDER BY b.contact_id ) as rn 
			 FROM aspnetusers  (NOLOCK) a  
			 join mp_contacts  (NOLOCK) b ON a.id = b.user_id  
			 join mp_companies (NOLOCK) c ON c.company_id = b.company_id  
			 LEFT JOIN
			 ( 
			   SELECT  
				aspnetusers.email 
				, COUNT(1) AS cnt
				 FROM  mp_contacts (NOLOCK)
				JOIN   aspnetusers (NOLOCK) ON aspnetusers.id = mp_contacts.user_id
				WHERE mp_contacts.IsTestAccount = 1 
				GROUP BY aspnetusers.email
			 ) AS tblIsTestAccountInfo on tblIsTestAccountInfo.email = a.email
			 WHERE   b.company_id IN 
				( 
					SELECT DISTINCT [Vision Supplier Account Id] FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo a
					JOIN DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK) b ON a.Email = b.email
					UNION
					SELECT DISTINCT [Vision Buyer Account Id] FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo a
					JOIN DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK) b ON a.Email = b.email
					
				)
		)	
		UPDATE d   
		SET d.[Is Test Contact] = a.IsTestAccountInfoUpdate
		,d.[IsSynced] = 0
		,d.[IsProcessed] = NULL
		----SELECT a.* 
			FROM CTE a
			JOIN DataSync_MarketplaceHubSpot..hubspotcompanies (NOLOCK) b ON a.company_id = b.[vision account id]
			JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo c ON c.Email = a.email
			JOIN DataSync_MarketplaceHubSpot..hubspotcontacts (NOLOCK) d ON d.email = a.email
			JOIN 
			(
					SELECT DISTINCT [Vision Supplier Account Id] AS company_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo a
					JOIN DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK) b on a.Email = b.email
					UNION
					SELECT DISTINCT [Vision Buyer Account Id] FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo a
					join DataSync_MarketplaceHubSpot..hubspotcontacts(NOLOCK) b on a.Email = b.email
			) AS company_association_company_id on company_association_company_id.company_id = a.company_id
			WHERE    b.SyncType IS NULL 
			 
	 
	END
	  


	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesType
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline1
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesIndustries
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo2
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsAddress
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompanyCommunications


END
GO
PRINT N'Altering Procedure [dbo].[proc_get_CommunityCompanyProfileURL]...';


GO

-- EXEC proc_get_CommunityCompanyProfileURL @CompanyId = 1582479

ALTER PROCEDURE [dbo].[proc_get_CommunityCompanyProfileURL]
(
	@CompanyId	INT
)
AS
BEGIN
	-- M2-3592 Redirect View Full Profile link to the directory profiles
	
	SET NOCOUNT ON


	DROP TABLE IF EXISTS #tmp_CommunityCompanyProfileURL_Adddress
	DROP TABLE IF EXISTS #tmp_CommunityCompanyProfileURL_Companies

	DECLARE @EnvironmentURL VARCHAR(500) 

	IF DB_NAME() = 'mp2020_dev'
	BEGIN
		SET @EnvironmentURL = 'https://dev.mfg.com/manufacturer/'
	END
	ELSE IF DB_NAME() = 'mp2020_uat'
	BEGIN
		SET @EnvironmentURL = 'https://staging.mfg.com/manufacturer/'		
	END
	ELSE IF DB_NAME() = 'mp2020_prod'
	BEGIN
		SET @EnvironmentURL = 'https://mfg.com/manufacturer/'
	END


	-- fetching company details
	SELECT a.company_id , a.name
	INTO #tmp_CommunityCompanyProfileURL_Companies
	FROM mp_companies				(NOLOCK) a
	WHERE a.company_id = @CompanyId


	-- fetching supplier address
	SELECT
		a.company_id AS CompanyId
		,CASE WHEN LEN(ISNULL(c.address4,'')) = 0 THEN '' ELSE REPLACE(c.address4,'?','')  END AS City
		,CASE WHEN LEN(ISNULL(e.REGION_NAME,'')) = 0 THEN '' ELSE e.REGION_NAME  END AS State
	INTO #tmp_CommunityCompanyProfileURL_Adddress
	FROM #tmp_CommunityCompanyProfileURL_Companies	 a
	JOIN 
	(
		SELECT 
			company_id , contact_id , first_name , last_name , is_buyer , address_id, IsTestAccount , [user_id] 
			, ROW_NUMBER() OVER(PARTITION BY company_id ORDER BY company_id , is_admin DESC, contact_id ) rn 
		FROM mp_contacts		(NOLOCK) 
		WHERE is_buyer =0 
	) b ON a.company_id = b.company_id and b.rn=1
	LEFT JOIN mp_addresses			c (NOLOCK) ON b.address_id = c.address_id
	LEFT JOIN mp_mst_country		d (NOLOCK) ON c.country_id = d.country_id
	LEFT JOIN mp_mst_region			e (NOLOCK) ON c.region_id = e.region_id AND e.region_id <> 0
			
	
	SELECT 	

		@EnvironmentURL
		+ CASE 
			WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
			ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(a.name))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'') + '-' 
		  END 
		+ CASE 
			WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
			WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(c.City),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
			ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(c.City))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'') +  '-'
			END 
		+ CASE 
			WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
			WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(c.State),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
			ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(c.State))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'')  +  '-'
			END
		+  CONVERT(VARCHAR(100),a.company_id)  AS CommunityCompanyProfile,
		CASE 
			WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
			ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(a.name))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'') + '-' 
		  END 
		+ CASE 
			WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
			WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(c.City),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
			ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(c.City))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'') +  '-'
			END 
		+ CASE 
			WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
			WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(c.State),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
			ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(c.State))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'')  +  '-'
			END
		+  CONVERT(VARCHAR(100),a.company_id)  AS ProfileDetailUrl
	FROM #tmp_CommunityCompanyProfileURL_Companies  a (NOLOCK)
	LEFT JOIN #tmp_CommunityCompanyProfileURL_Adddress	c (NOLOCK) ON a.company_id = c.CompanyId

END
GO
PRINT N'Altering Procedure [dbo].[proc_get_buyer_dashboard_new_suppliers]...';


GO

/*
EXEC proc_get_buyer_dashboard_new_suppliers @BuyerId =1349461 
*/
ALTER PROCEDURE [dbo].[proc_get_buyer_dashboard_new_suppliers]
(
	@BuyerId INT
)

AS
BEGIN
		SET NOCOUNT ON
		/*
		-- Created	:	May 29, 2020
					:	M2-2904 Buyer - New Manufacturer module - DB
		*/

		
		DECLARE @SupplierCount INT

		DROP TABLE IF EXISTS #buyer_dashboard_new_suppliers
		DROP TABLE IF EXISTS #suppliers_capabilities

		SELECT @SupplierCount= COUNT(1)
		FROM mp_buyer_dashboard_new_suppliers  (NOLOCK) 
		WHERE 
			BuyerId = @BuyerId
			AND IsMessageSent = 0
			AND IsProfileViewed = 0
			AND ValidUntil >=  GETUTCDATE()


		IF @SupplierCount = 0
		BEGIN
			UPDATE a SET a.ValidUntil = DATEADD(DAY,7,GETUTCDATE())
			FROM mp_buyer_dashboard_new_suppliers a (NOLOCK) 
			JOIN
			(			
				SELECT 
					TOP 2 
					Id
				FROM mp_buyer_dashboard_new_suppliers  (NOLOCK) 
				WHERE 
					BuyerId = @BuyerId
					AND IsMessageSent = 0
					AND IsProfileViewed = 0
					AND ValidUntil IS NULL
			
			) b ON a.Id = b.Id
		END
		ELSE IF @SupplierCount = 1
		BEGIN
			UPDATE a SET a.ValidUntil = DATEADD(DAY,7,GETUTCDATE())
			FROM mp_buyer_dashboard_new_suppliers a (NOLOCK) 
			JOIN
			(			
				SELECT 
					TOP 1
					Id
				FROM mp_buyer_dashboard_new_suppliers  (NOLOCK) 
				WHERE 
					BuyerId = @BuyerId
					AND IsMessageSent = 0
					AND IsProfileViewed = 0
					AND ValidUntil IS NULL
			
			) b ON a.Id = b.Id
		END

		SELECT 
			a.BuyerId
			,a.SupplierId
			,c.first_name +' '+c.last_name AS Supplier
			,c.company_id SupplierCompanyId
			,IIF(filetype.filetype_id=6,spefile.FILE_NAME, NULL) AS SupplierCompanyLogo 
			,d.name AS SupplierCompany 
			,e.territory_classification_name AS SupplierLocation
			INTO #buyer_dashboard_new_suppliers
		FROM mp_buyer_dashboard_new_suppliers a (NOLOCK)
		JOIN mp_contacts c (NOLOCK) ON a.SupplierId = c.contact_id 
		JOIN mp_companies d (NOLOCK) ON c.company_id = d.company_id 
		LEFT JOIN mp_mst_territory_classification e (NOLOCK) ON d.manufacturing_location_id = e.territory_classification_id
		LEFT JOIN mp_special_files spefile (NOLOCK)
			ON c.company_id=spefile.COMP_ID and c.contact_id=spefile.CONT_ID and filetype_id = 6  
		LEFT JOIN mp_mst_filetype filetype  (NOLOCK) ON(spefile.FILETYPE_ID = filetype.filetype_id) 
		WHERE 
			a.BuyerId = @BuyerId
			AND a.IsMessageSent = 0
			AND a.IsProfileViewed = 0
			AND a.ValidUntil >=  GETUTCDATE()

		SELECT SupplierCompanyId ,Capabiities
		INTO #suppliers_capabilities
		FROM 
		(
			SELECT DISTINCT a.company_id SupplierCompanyId, c.discipline_name Capabiities , ROW_NUMBER() OVER(PARTITION BY a.company_id  ORDER BY a.company_id , c.discipline_name)  RN
			FROM mp_company_processes a (NOLOCK)
			JOIN mp_mst_part_category b (NOLOCK) ON a.part_category_id = b.part_category_id
			JOIN mp_mst_part_category c (NOLOCK) ON c.part_category_id = b.parent_part_category_id
			WHERE EXISTS 
			(SELECT * FROM #buyer_dashboard_new_suppliers WHERE a.company_id = SupplierCompanyId)
			UNION
			SELECT a.company_id SupplierCompanyId, c.discipline_name Capabiities , ROW_NUMBER() OVER(PARTITION BY a.company_id  ORDER BY a.company_id , c.discipline_name)  RN
			FROM mp_gateway_subscription_company_processes a (NOLOCK)
			JOIN mp_mst_part_category b (NOLOCK) ON a.part_category_id = b.part_category_id
			JOIN mp_mst_part_category c (NOLOCK) ON c.part_category_id = b.parent_part_category_id
			WHERE EXISTS 
			(SELECT * FROM #buyer_dashboard_new_suppliers WHERE a.company_id = SupplierCompanyId)
		) A
		WHERE RN <=3

		SELECT 
			a.BuyerId	
			,a.SupplierId
			,a.Supplier	
			,a.SupplierCompanyId	
			,a.SupplierCompanyLogo	
			,a.SupplierCompany	
			,a.SupplierLocation	
			,b.CapabiitiesList
		FROM #buyer_dashboard_new_suppliers a
		LEFT JOIN
		(
			SELECT  SupplierCompanyId
			   ,STUFF((SELECT DISTINCT ', ' + CAST(Capabiities AS VARCHAR(500)) [text()]
				 FROM #suppliers_capabilities 
				 WHERE SupplierCompanyId = t.SupplierCompanyId
				 FOR XML PATH(''), TYPE)
				.value('.','NVARCHAR(MAX)'),1,2,' ') CapabiitiesList
			FROM #suppliers_capabilities t
			GROUP BY SupplierCompanyId
		) b ON a.SupplierCompanyId = b.SupplierCompanyId


		DROP TABLE IF EXISTS #buyer_dashboard_new_suppliers
		DROP TABLE IF EXISTS #suppliers_capabilities

END
GO
PRINT N'Altering Procedure [dbo].[proc_get_DataSync_SupplierList]...';


GO

/*
EXEC proc_get_DataSync_SupplierList

SELECT *  FROM  mpDataSyncSupplierProfileToCommunityLogs (nolock) WHERE [DBObject] = 'DataSync-Profile-OnDemand-2022Jul22-Manually'

SELECT *
	FROM mpDataSyncSupplierProfileToCommunityLogs  (NOLOCK)
	WHERE 
		[IsProcessed] = 0 
		/* M2-3845 Data Sync Marketplace to Community -DB*/
		AND CompanyProfileStatus = 234
		/**/
	ORDER BY [CompanyId]

UPDATE mpDataSyncSupplierProfileToCommunityLogs SET  [IsProcessed] = 0, IsSyncFailed = 1 WHERE Id = 850


*/
ALTER PROCEDURE [dbo].[proc_get_DataSync_SupplierList]
AS
BEGIN
	-- M2-3780  Data Sync for Supplier Directory from MS SQL Server to MySQL
	
	SET NOCOUNT ON

	DECLARE @LastRecordDate DATETIME2 = ISNULL((SELECT MAX(FetchDataToDateTime) FROM mpDataSyncSupplierProfileToCommunityLogs (NOLOCK)),DATEADD(MINUTE, -5 , GETUTCDATE()))
	DECLARE @CurrentDT		DATETIME2 = GETUTCDATE()
	
	/* M2-4157 Reinsert failed data-sync records logic implementation -DB */
	DROP TABLE IF EXISTS #tmp_DataSync_SupplierList_FailedToSyncSuppliers
	SELECT * INTO #tmp_DataSync_SupplierList_FailedToSyncSuppliers FROM mpDataSyncSupplierProfileToCommunityLogs WHERE [IsProcessed] = 0 AND IsSyncFailed = 1  
	/**/

	
	UPDATE mpDataSyncSupplierProfileToCommunityLogs SET [IsProcessed] = 1 WHERE [IsProcessed] = 0

	-- Fetch list of newly created supplier companies 
	INSERT INTO mpDataSyncSupplierProfileToCommunityLogs ([DBObject] , [CompanyId] , [FetchDataFromDateTime] , [FetchDataToDateTime] , CompanyProfileStatus)
	SELECT DISTINCT 'mp_companies-NewUserRegistered' ,  b.company_id AS CompanyId ,  @LastRecordDate  , @CurrentDT  ,ProfileStatus
	FROM mp_companies		(NOLOCK) b
	JOIN (SELECT company_id , is_buyer, IsTestAccount FROM mp_contacts		(NOLOCK) ) a ON a.company_id = b.company_id 
	WHERE 
		a.is_buyer = 0 
		AND IsTestAccount = 0 
		AND b.COMPANY_ID <> 0
		AND b.created_date BETWEEN @LastRecordDate AND @CurrentDT
	UNION
	-- Fetch list of supplier companies who update their profile 
	SELECT DISTINCT 'XML_SupplierProfileCaptureChanges' , CompanyId ,  @LastRecordDate  , @CurrentDT ,ProfileStatus
	FROM XML_SupplierProfileCaptureChanges (NOLOCK) A
	JOIN mp_companies		(NOLOCK) b ON a.CompanyId = b.company_id
	JOIN (SELECT company_id , is_buyer, IsTestAccount FROM mp_contacts		(NOLOCK) ) c ON b.company_id = c.company_id 
	WHERE 
		CreatedOn BETWEEN @LastRecordDate AND @CurrentDT
		AND c.is_buyer = 0 
		AND c.IsTestAccount = 0 
		AND b.company_id <> 0
	UNION
	-- Fetch list of supplier companies who update their paid status in Zoho 
	--SELECT 'mp_registered_supplier-PaidStatus' , a.company_id  AS CompanyId ,  @LastRecordDate  , @CurrentDT ,ProfileStatus
	--FROM zoho..zoho_sink_down_logs (NOLOCK) a
	--JOIN mp_companies		(NOLOCK) b ON a.company_id = b.company_id
	--WHERE 
	--	table_name = 'mp_registered_supplier' 
	--	AND log_date BETWEEN @LastRecordDate AND @CurrentDT
	SELECT 'mp_registered_supplier-PaidStatus' , a.company_id  AS CompanyId ,  @LastRecordDate  , @CurrentDT ,ProfileStatus
	FROM mp_registered_supplier (NOLOCK) a
	JOIN mp_companies		(NOLOCK) b ON a.company_id = b.company_id
	WHERE 
		(
			created_on BETWEEN @LastRecordDate AND @CurrentDT
			OR updated_on BETWEEN @LastRecordDate AND @CurrentDT
		)

	UNION
	-- Fetch list of supplier companies who update their paid status in Zoho 
	SELECT 'mp_companies-HideProfile' , a.company_id  AS CompanyId ,  @LastRecordDate  , @CurrentDT  ,ProfileStatus
	FROM zoho..zoho_sink_down_logs (NOLOCK)  a
	JOIN mp_companies		(NOLOCK) b ON a.company_id = b.company_id
	WHERE 
		table_name = 'mp_companies' 
		AND field_name = 'is_hide_directory_profile'
		AND log_date BETWEEN @LastRecordDate AND @CurrentDT

	
	-- Fetch list of newly created supplier companies 
	INSERT INTO mpDataSyncSupplierProfileToCommunityLogs ([DBObject] , [CompanyId] , [FetchDataFromDateTime] , [FetchDataToDateTime] , [IsProcessed] , CompanyProfileStatus)
	SELECT DISTINCT 'XML_SupplierProfileCaptureChanges-HideProfile' , CompanyId ,  @LastRecordDate  , @CurrentDT , 0  , 234
	FROM XML_SupplierProfileCaptureChanges (NOLOCK) A
	JOIN mp_companies		(NOLOCK) b ON a.CompanyId = b.company_id
	JOIN (SELECT company_id , is_buyer, IsTestAccount FROM mp_contacts		(NOLOCK) ) c ON b.company_id = c.company_id 
	WHERE 
		CreatedOn BETWEEN @LastRecordDate AND @CurrentDT
		AND c.is_buyer = 0 
		AND a.Event = 'hide_profile'
		AND b.company_id <> 0

	--INSERT INTO mpDataSyncSupplierProfileToCommunityLogs ([DBObject] , [CompanyId] , [FetchDataFromDateTime] , [FetchDataToDateTime] , [IsProcessed] , CompanyProfileStatus)
	--SELECT DISTINCT 'DataSync-PaidSupplier-MFGVerified-Manually' , company_id ,  @LastRecordDate  , @CurrentDT , 0  , 234
	--FROM    mp_companies (NOLOCK) b  
	--WHERE company_id in (  
	--322757,337412,337424,337635,347724,401413,468886,517099,627550,641211,672524,695606,697976,748447,838185,1031915,1050596,1172999,1196229,1213612,1232139,1252862,1270190,1391743,1401579,1449218,1491727,1511178,1524338,1530218,1535708,1546467,1550755,1566120,1566739,1646347,1646629,1646928,1647054,1647603,1648064,1684877,1685265,1688285,1692967,1698296,1700769,1700973,1702220,1719015,1721546,1767788,1767789,1767792,1767793,1768162,1768222,1768377,1768390,1768547,1768771,1769143,1770394,1770656,1771550,1773699,1773898,1774560,1774725,1775055,1775796,1775861,1776990,1777260,1777682,1778018,1778840,1778913,1779077,1780073,1780562,1780702,1780829,1780906,1781370,1782399,1782400,1783253,1783915,1784042,1784495,1784583,1785241,1785396,1786765,1786787,1787459,1787738,1788103,1788937,1790899,1791171,1791249,1791424,1791425,1791585,1791869,1792429,1792564,1792859,1792861,1792864,1792890,1792914,1792939,1793007,1793361,1793397,1793460,1793687,1793816,1793822,1794147,1794615,1795003,1795380,1795613,1795863,1796350,1796664,1797279,1797282,1797352,1797412,1798024,1798547,1798614,1798723,1798826,1798895,1799382,1799488,1799556,1834565,1834869,1835237,1835250,1835321,1835635,1836122,1836471,1836576,1836740,1836811,1837181,1837250,1837367,1837450,1837572,1837698,1837814,1837822,1838039,1838040,1838067,1838228,1838247,1838328,1838561,1838605,1838618,1838645,1838660,1838664,1838665,1838685,1838697,1838704,1838792,1838817,1838833,1838868,1838910,1838954,1838958,1839048,1839123,1839130,1839380,1839454
	--)

	--INSERT INTO mpDataSyncSupplierProfileToCommunityLogs ([DBObject] , [CompanyId] , [FetchDataFromDateTime] , [FetchDataToDateTime] , [IsProcessed] , CompanyProfileStatus)
	--SELECT DISTINCT 'DataSync-Profile-OnDemand-13Apr2023-Manually' , company_id ,  @LastRecordDate  , @CurrentDT , 0  , 234
	--FROM    mp_companies (NOLOCK) b  
	--WHERE company_id in ( 1844608,1845396,1845825,1846153,1846789,1846979,1846998,1847027,1847037,1847058,1847066,1847135,1847143,1847147,1847164,1847278,1847280,1847302)

	--INSERT INTO mpDataSyncSupplierProfileToCommunityLogs ([DBObject] , [CompanyId] , [FetchDataFromDateTime] , [FetchDataToDateTime] , [IsProcessed] , CompanyProfileStatus)
	--SELECT DISTINCT 'DataSync-Profile-OnDemand-11May2023-Manually' , company_id ,  @LastRecordDate  , @CurrentDT , 0  , 234
	--FROM    mp_companies (NOLOCK) b  
	--WHERE company_id in (select company_id from tmp_M2_4981_Paid_supplier_details(nolock) where company_id !=0)

	---M2-5013
	--INSERT INTO mpDataSyncSupplierProfileToCommunityLogs ([DBObject] , [CompanyId] , [FetchDataFromDateTime] , [FetchDataToDateTime] , [IsProcessed] , CompanyProfileStatus)
	--SELECT DISTINCT 'DataSync-Profile-OnDemand-06Sept2023-Manually' , company_id ,  @LastRecordDate  , @CurrentDT , 0  , 234
	--FROM    mp_companies (NOLOCK) b  
	--WHERE company_id in 
	--(
	--1839682 --,1838405,1797569,1791591,1788498,1540391
	------select company_id from tmp_M2_4981_Paid_supplier_details(nolock) where company_id !=0
	--)

	

	/* M2-4157 Reinsert failed data-sync records logic implementation -DB */
	INSERT INTO mpDataSyncSupplierProfileToCommunityLogs ([DBObject] , [CompanyId] , [FetchDataFromDateTime] , [FetchDataToDateTime] , [IsProcessed] , CompanyProfileStatus)
	SELECT [DBObject] , [CompanyId] ,  @LastRecordDate  , @CurrentDT , 0  , CompanyProfileStatus 
	FROM #tmp_DataSync_SupplierList_FailedToSyncSuppliers
	/**/

	--INSERT INTO mpDataSyncSupplierProfileToCommunityLogs ([DBObject] , [CompanyId] , [FetchDataFromDateTime] , [FetchDataToDateTime] , CompanyProfileStatus)
	--SELECT DISTINCT 'Industries-Materials-Ratings' , a.CompanyId ,   GETUTCDATE()  , GETUTCDATE() , 234 
	--FROM
	--(
	--	SELECT DISTINCT Company_id CompanyId FROM mp_company_MaterialSpecialties  a (NOLOCK)
	--	UNION
	--	SELECT DISTINCT company_id CompanyId from mp_company_Industryfocus a (NOLOCK)
	--	UNION
	--	SELECT DISTINCT to_company_id CompanyId FROM mp_rating_responses a (NOLOCK) WHERE  score IS NOT NULL
	--) a JOIN mp_contacts b on a.CompanyId = b.company_id AND b.is_buyer = 0


	SELECT 	DISTINCT CompanyId 	
	FROM mpDataSyncSupplierProfileToCommunityLogs  (NOLOCK)
	WHERE 
		[IsProcessed] = 0 
		/* M2-3845 Data Sync Marketplace to Community -DB*/
		AND CompanyProfileStatus = 234
		/**/
	ORDER BY [CompanyId]

 

END
GO
PRINT N'Altering Procedure [dbo].[proc_get_list_of_associate_rfqs]...';


GO

/*

exec proc_get_list_of_associate_rfqs @contact_id =  1055986 ,  @buyer_id = null
exec proc_get_list_of_associate_rfqs @contact_id =  1337795 ,  @buyer_id = 1335855

*/

ALTER procedure [dbo].[proc_get_list_of_associate_rfqs]
(
	@contact_id				int	
	,@buyer_id				int = null
)
as
begin

	/*
		 =============================================
		 Create date: Nov 04,2019
		 Description: M2-2259 Buyer and M - Add a Move To button on the Messages action button to associate a message with an RFQ - DB
		 Modification:
		 =================================================================
	*/
	
	set nocount on
	
	declare @is_buyer bit

	set @is_buyer =  (select is_buyer from mp_contacts (nolock) where contact_id = @contact_id)
	
	if @is_buyer = 1 
	begin

		select 
			distinct 
			a.rfq_id as RFQId  
			, convert(varchar(150),a.rfq_id) + ' - '+ case when len(a.rfq_name) > 15 then substring(a.rfq_name,0,15) + '...'  else rfq_name end as RFQName 
		from mp_rfq (nolock) a
		join mp_rfq_release_history (nolock) b on a.rfq_id = b.rfq_id
		where contact_id = @contact_id
		order by RFQId desc


	end
	else if @is_buyer = 0 and @buyer_id is not null 
	begin
	
		Select 
			RFQId 
			, convert(varchar(150),a.RFQId) + ' - '+ case when len(rfq_name) > 15 then substring(rfq_name,0,15) + '...'  else rfq_name end as RFQName
		from
		(
			select distinct rfq_id as RFQId  from mp_rfq_quote_suplierStatuses (nolock) where contact_id = @contact_id and  rfq_userStatus_id in (1, 2)
			union
			select rfq_id from mp_rfq_quote_SupplierQuote (nolock) where contact_id = @contact_id and is_rfq_resubmitted = 0 and is_quote_submitted = 1
		) a
		join mp_rfq (nolock) b on a.RFQId = b.rfq_id and b.contact_id = @buyer_id
		order by RFQId desc

	end
	else if @is_buyer = 0 and @buyer_id is  null 
	begin
	
		Select 
			RFQId 
			, convert(varchar(150),a.RFQId) + ' - '+ case when len(rfq_name) > 15 then substring(rfq_name,0,15) + '...'  else rfq_name end as RFQName
		from
		(
			select distinct rfq_id as RFQId  from mp_rfq_quote_suplierStatuses (nolock) where contact_id = @contact_id and  rfq_userStatus_id in (1, 2)
			union
			select rfq_id from mp_rfq_quote_SupplierQuote (nolock) where contact_id = @contact_id and is_rfq_resubmitted = 0 and is_quote_submitted = 1
		) a
		join mp_rfq (nolock) b on a.RFQId = b.rfq_id 
		order by RFQId desc

	end
end
GO
PRINT N'Altering Procedure [dbo].[proc_get_MessagesDetails]...';


GO

/*

select * from mp_messages where to_cont = 0 and message_type_id = 5

declare @messageIds1 as [tbltype_ListOfMessageId]
insert into  @messageIds1 values (19194247) 

exec [proc_get_MessagesDetails] 
@MessageIds = @messageIds1
,@ContactId = 1349558 
*/
ALTER PROCEDURE [dbo].[proc_get_MessagesDetails]
(
	@MessageIds AS tbltype_ListOfMessageId READONLY	
	,@ContactId INT = NULL
)
AS
BEGIN
	 -- M2-3430 Global Message optimization - Convert into the SP - DB
	SET NOCOUNT ON

	DROP TABLE IF EXISTS #tmp_proc_get_MessagesAdditionalInfo_Messages
	DROP TABLE IF EXISTS #tmp_proc_get_MessagesAdditionalInfo_CheckingMessagesThreads
	DROP TABLE IF EXISTS #tmp_proc_get_MessagesAdditionalInfo_GettingAllMessagesOfFromToContacts
	DROP TABLE IF EXISTS #tmp_proc_get_MessagesAdditionalInfo_ContactCompanyInfo
	DROP TABLE IF EXISTS #tmp_proc_get_MessagesAdditionalInfo_MessagesIds
	DECLARE @PageName VARCHAR(100) 
	DECLARE @IsBuyer INT

	SELECT @IsBuyer = is_buyer FROM mp_contacts(nolock) WHERE contact_id = @ContactId

	CREATE TABLE #tmp_proc_get_MessagesAdditionalInfo_MessagesIds (Id INT IDENTITY(1,1) , MessageId INT)

	INSERT INTO #tmp_proc_get_MessagesAdditionalInfo_MessagesIds (MessageId)
	SELECT * FROM @MessageIds

	-- Fetching messages data for shared message id's
	SELECT * 
	INTO #tmp_proc_get_MessagesAdditionalInfo_Messages
	FROM mp_messages (NOLOCK) a 
	WHERE  EXISTS (SELECT * FROM @MessageIds WHERE MessageId = a.message_id)

	-- Fetching contact and company info 
	SELECT DISTINCT
			c.company_id	AS CompanyId
			, CASE WHEN c.company_id IS NULL THEN 'MFG' WHEN c.company_id = 0  THEN 'MFG' ELSE c.name END		AS Company
			, b.contact_id	AS ContactId
			, CASE WHEN c.company_id = 0  THEN 'MFG' ELSE b.first_name +' '+ b.last_name END  AS Contact
			, c.companyurl	AS CompanyURL
			, CASE WHEN c.company_id IS NULL THEN 'MFG_Logo_Color_No_R.jpg' WHEN  c.company_id = 0  THEN 'MFG_Logo_Color_No_R.jpg' ELSE d.file_name END	AS CompanyLogo
	        , b.is_buyer
	INTO #tmp_proc_get_MessagesAdditionalInfo_ContactCompanyInfo
	FROM
	(
		SELECT from_cont Id FROM #tmp_proc_get_MessagesAdditionalInfo_Messages
		UNION
		SELECT to_cont FROM #tmp_proc_get_MessagesAdditionalInfo_Messages
	) a
	JOIN mp_contacts	b (NOLOCK) ON a.Id = b.contact_id
	JOIN mp_companies	c (NOLOCK) ON b.company_id = c.company_id
	LEFT JOIN mp_special_files d (NOLOCK) ON c.company_id = d.comp_id AND d.is_deleted = 0 AND d.filetype_id = 6

	-- fetching all communication messages for 25 messsages based on from and to contact
	SELECT 
		a1.message_id , a1.from_cont , a1.to_cont , a1.message_subject , a1.message_type_id 
		, a1.trash , a1.message_descr 	, a1.message_date , a1.message_read
	INTO #tmp_proc_get_MessagesAdditionalInfo_GettingAllMessagesOfFromToContacts
	FROM mp_messages a1 (NOLOCK)
	WHERE 
		a1.from_cont IN 
			(
				SELECT from_cont FROM #tmp_proc_get_MessagesAdditionalInfo_Messages 
				UNION
				SELECT to_cont FROM #tmp_proc_get_MessagesAdditionalInfo_Messages
			)
		AND a1.to_cont IN 
			(
				SELECT from_cont FROM #tmp_proc_get_MessagesAdditionalInfo_Messages 
				UNION
				SELECT to_cont FROM #tmp_proc_get_MessagesAdditionalInfo_Messages 
			)
		--AND a1.trash = 0
		--AND message_type_id NOT IN (211, 210)

	
	--  fetching latest message description if have thread messages
	/* M2-4088 Buyer and Supplier - Split Messages and Notifications - DB */
	SELECT *
	INTO #tmp_proc_get_MessagesAdditionalInfo_CheckingMessagesThreads
	FROM
	(
	SELECT 
		a.message_id , a1.message_descr , a1.message_date
		, ROW_NUMBER() OVER (PARTITION BY a.message_subject ORDER BY a.message_subject , a1.message_read ASC , a1.message_date DESC)  Rn
		, a1.message_read
		, a1.from_cont
	FROM #tmp_proc_get_MessagesAdditionalInfo_Messages a (NOLOCK)
	JOIN #tmp_proc_get_MessagesAdditionalInfo_GettingAllMessagesOfFromToContacts a1 (NOLOCK)
		ON a1.message_subject = a.message_subject
	WHERE 
		a1.from_cont IN 
			(
				SELECT from_cont FROM #tmp_proc_get_MessagesAdditionalInfo_Messages WHERE message_id = a.message_id
				UNION
				SELECT to_cont FROM #tmp_proc_get_MessagesAdditionalInfo_Messages WHERE message_id = a.message_id
			)
		AND a1.to_cont IN 
			(
				SELECT from_cont FROM #tmp_proc_get_MessagesAdditionalInfo_Messages WHERE message_id = a.message_id
				UNION
				SELECT to_cont FROM #tmp_proc_get_MessagesAdditionalInfo_Messages WHERE message_id = a.message_id
			)
		--AND a1.trash = 0
		--AND a1.message_type_id NOT IN (211, 210)
	) a
	WHERE a.Rn = 1
	/**/

	--select * from #tmp_proc_get_MessagesAdditionalInfo_CheckingMessagesThreads

	-- generating messages info
	SELECT	MessageId,	RfqId,	HaveThread,	FromCompanyId,	FromCompany	,FromCompanyLogo,	FromCompanyURL,	FromContactId,	FromContact,	ToCompanyId,	ToCompany,
			ToCompanyLogo,	ToCompanyURL,	ToContactId,	ToContact,	LeadId	 
			/* Message and notification : page name take dynamic*/
			,CASE WHEN RfqId IS NOT NULL THEN 
			 CASE WHEN MessageSubject LIKE '%' + CAST(RfqId AS VARCHAR(50)) + '%' THEN 
					REPLACE ( MessageSubject
					   , RfqId 
					   , 
					   --case when messagetypeid IN (244,245,247) THEN 
					   case when IsPOExists = 1 THEN  
					   '<a style=''color: blue'' href=''/#/'+ PageName + '?rfqId='+ concat(REPLACE(REPLACE(RfqGuid,'+','%2B'),'=','%3D'),PageLink) + ''' >' + convert(varchar(50),RfqId) + '</a>' 
					   ELSE
						'<a style=''color: blue'' href=''/#/'+ PageName + '?id='+ RfqGuid + ''' >' + convert(varchar(50),RfqId) + '</a>' 
					   END 
					   )
					ELSE 
						REPLACE ( MessageSubject
					   , PONumber 
					   , 
					   --case when messagetypeid IN (244,245,247) THEN 
					   case when IsPOExists = 1 THEN  
					   '<a style=''color: blue'' href=''/#/'+ PageName + '?rfqId='+ concat(REPLACE(REPLACE(RfqGuid,'+','%2B'),'=','%3D'),PageLink) + ''' >' + convert(varchar(50),PONumber) + '</a>' 
					   ELSE
						'<a style=''color: blue'' href=''/#/'+ PageName + '?id='+ RfqGuid + ''' >' + convert(varchar(50),PONumber) + '</a>' 
					   END 
					   )
					END 
				ELSE
					MessageSubject
				END AS MessageSubject 
			, MessageDescription
			/* END : Message and notification : page name take dynamic*/
			, MessageTypeId,	MessageType	,IsNotification	
			, MessageDate,	MessageRead	,MessageSent,	MessageReadDate	--,RFQGuid,	PageName
			, MessageSubject as OriginalMessageSubject
			, MessageDescription AS OriginalMessageDescription
			, IsPOExists
		    , @IsBuyer is_buyer
			
	FROM (
	SELECT
		a.message_id	AS MessageId
		, a.rfq_id		AS RfqId
		, CAST('false' AS BIT) HaveThread
		, CASE 
			WHEN (a.message_type_id IN (230) AND b.ContactId > 0 )  THEN b.CompanyId
			WHEN (a.message_type_id IN (221,230) OR b.ContactId = 0 ) THEN 0 
			ELSE b.CompanyId	
		  END AS FromCompanyId
		, CASE 
			WHEN (a.message_type_id IN (230) AND b.ContactId > 0 )  THEN b.Company
			WHEN (a.message_type_id IN (221,230) OR b.ContactId = 0 ) THEN g.company 
			WHEN a.message_type_id IN (217,232,242,5) THEN 'MFG'  ELSE b.Company END		AS FromCompany
		, CASE WHEN b.ContactId IS NULL  THEN 'MFG_Logo_Color_No_R.png' WHEN b.ContactId = 0  THEN NULL ELSE  b.CompanyLogo	END AS FromCompanyLogo
		, CASE WHEN b.ContactId = 0  THEN NULL ELSE  b.CompanyURL END	AS FromCompanyURL
		, CASE 
			WHEN (a.message_type_id IN (230) AND b.ContactId > 0 )  THEN b.ContactId
			WHEN (a.message_type_id IN (221,230) OR b.ContactId = 0 )  THEN 0 ELSE b.ContactId	END  	AS FromContactId
		, CASE 
			WHEN (a.message_type_id IN (230) AND b.ContactId > 0 )  THEN b.Contact
			WHEN (a.message_type_id IN (221,230) OR b.ContactId = 0 ) THEN ISNULL(g.first_name,'') +' '+ ISNULL(g.last_name,'') WHEN a.message_type_id = 232 THEN 'MFG'  ELSE b.Contact	 END  	AS FromContact
		, c.CompanyId 	AS ToCompanyId
		, c.Company		AS ToCompany
		, CASE WHEN ISNULL(c.CompanyId,0) = 0 THEN 'MFG_Logo_Color_No_R.jpg' ELSE c.CompanyLogo	END AS ToCompanyLogo
		, c.CompanyURL	AS ToCompanyURL
		, c.ContactId	AS ToContactId
		, c.Contact	 	AS ToContact
		, d.lead_id		AS LeadId
		, a.message_subject	AS MessageSubject
		/* M2-4088 Buyer and Supplier - Split Messages and Notifications - DB */
		, ISNULL(h.message_descr , a.message_descr)	AS MessageDescription
		/**/
		, a.message_type_id AS MessageTypeId
		, e.message_type_name AS MessageType
		, ISNULL(e.IsNotification,0) As IsNotification
		, ISNULL(h.message_date , a.message_date)	AS MessageDate
		--, CASE WHEN a.message_read = 1 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END MessageRead
		, 
		  CASE 
			WHEN h.from_cont  = @ContactId THEN CAST('true' AS BIT)
			ELSE
				CASE 
					WHEN h.message_read = 1 THEN CAST('true' AS BIT) 
					WHEN h.message_read = 0 THEN CAST('false' AS BIT) 
					WHEN a.message_read = 1 THEN CAST('true' AS BIT) 
					WHEN a.message_read = 0 THEN CAST('false' AS BIT) 
					ELSE CAST('false' AS BIT) 
				END 
		  END 
		  MessageRead 
		, CASE WHEN a.message_sent = 1 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END MessageSent
		, a.read_date AS MessageReadDate 
		/* Message and notification : page name take dynamic*/
		----, CASE WHEN j.RfqId IS NOT NULL  AND a.message_type_id IN (244,245,247)THEN  j.RfqEncryptedId 
		, CASE WHEN j.RfqId IS NOT NULL THEN  j.RfqEncryptedId 
		       ELSE ( SELECT   convert(varchar(50), rfq_guid ) from mp_rfq(nolock) where mp_rfq.rfq_id = a.rfq_id) END 
			   AS RFQGuid
		, CASE WHEN @IsBuyer = 1 THEN 'rfq/rfqdetail' ELSE 'supplier/supplerRfqDetails' END PageName
		, CASE WHEN @IsBuyer = 1 THEN
			 --CASE WHEN j.POStatus in ('accepted','pending') THEN '&order=Order' ELSE '&quotes=Quotes' END 
			 '&order=Order'
			 ELSE 
				CASE WHEN a.message_type_id = 243 THEN 
				'&quotes=Quotes'
				ELSE
				NULL
				END 
			 END  AS PageLink
		, CASE WHEN j.RfqId IS NOT NULL THEN 1 ELSE 0 END IsPOExists
		, j.PONumber
	FROM #tmp_proc_get_MessagesAdditionalInfo_Messages a 
	LEFT JOIN #tmp_proc_get_MessagesAdditionalInfo_ContactCompanyInfo b ON a.from_cont = b.ContactId
	LEFT JOIN #tmp_proc_get_MessagesAdditionalInfo_ContactCompanyInfo c ON a.to_cont = c.ContactId
	LEFT JOIN mp_lead_message_mapping	(NOLOCK) d ON a.message_id = d.message_id
	LEFT JOIN mp_mst_message_types		(NOLOCK) e ON a.message_type_id = e.message_type_id 	
	LEFT JOIN mp_lead_email_mappings	(NOLOCK) f ON d.lead_id = f.lead_id
	LEFT JOIN mp_lead_emails			(NOLOCK) g ON f.lead_email_message_id = g.lead_email_message_id
	/* M2-4088 Buyer and Supplier - Split Messages and Notifications - DB */
	LEFT JOIN #tmp_proc_get_MessagesAdditionalInfo_CheckingMessagesThreads  (NOLOCK) h ON a.message_id = h.message_id
	/**/
	JOIN #tmp_proc_get_MessagesAdditionalInfo_MessagesIds  (NOLOCK) i ON a.message_id = i.MessageId
	--WHERE a.message_id NOT IN (SELECT M.MessageId From mpArchivedMessages m WHERE a.message_id = m.MessageId )
	LEFT JOIN mpOrderManagement(NOLOCK) j on j.RfqId = a.rfq_id AND j.IsDeleted = 0

	--ORDER BY  
 
	--a.message_id desc ----M2-4522

	) 
	messagesList  
	ORDER BY
	messagesList.MessageId desc

	

	--SELECT * FROM #tmp_proc_get_MessagesAdditionalInfo_GettingAllMessagesOfFromToContacts
	--SELECT * FROM #tmp_proc_get_MessagesAdditionalInfo_CheckingMessagesThreads

	DROP TABLE IF EXISTS #tmp_proc_get_MessagesAdditionalInfo_Messages
	DROP TABLE IF EXISTS #tmp_proc_get_MessagesAdditionalInfo_CheckingMessagesThreads
	DROP TABLE IF EXISTS #tmp_proc_get_MessagesAdditionalInfo_GettingAllMessagesOfFromToContacts
	DROP TABLE IF EXISTS #tmp_proc_get_MessagesAdditionalInfo_ContactCompanyInfo
	DROP TABLE IF EXISTS #tmp_proc_get_MessagesAdditionalInfo_MessagesIds
END
GO
PRINT N'Altering Procedure [dbo].[proc_get_my_company_rfq_supplier_list]...';


GO

-- =============================================	
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--EXEC proc_get_my_company_rfq_supplier_list 1799026
ALTER PROCEDURE [dbo].[proc_get_my_company_rfq_supplier_list]
	@CompanyId int 
AS
BEGIN
	SET NOCOUNT ON;

   SELECT contact_id AS SupplierContactId,
		  company_id AS SupplierCompanyId,
		  first_name AS SupplierFirstName,
		  last_name AS SupplierLastName,
		  is_buyer AS IsBuyer,
		  is_admin AS IsAdmin
   FROM mp_contacts 
   WHERE company_id = @CompanyId 
		AND is_buyer = 0 
		AND is_active = 1
  ORDER BY contact_id

END
GO
PRINT N'Altering Procedure [dbo].[proc_get_ProfilePressed_Supplier]...';


GO



ALTER Procedure [dbo].[proc_get_ProfilePressed_Supplier]
(
@CompanyId INT, 
@lead_source_id INT --'Community Profile' 11,'Community Phone' 12,'Community Website' 15
)
As 
BEGIN

	SET NOCOUNT ON
	
	/* M2-4112 M - Email - A buyer just pressed Website on your profile – DB */

	SELECT DISTINCT 
		mp_Companies.Company_Id CompanyId 
	,	mp_Companies.name CompanyName
	,	mp_Companies.CompanyURL CompanyURL
	,	FirstName +' '+ LastName AdvisorName
	,	mp_Contacts.Title Designation
	,	aspnetusers.PhoneNumber ContactNumber
	,	mp_mst_lead_source.lead_Source_Id EventId
	,	Lead_Source EventName
	,	COUNT(distinct Lead_id) [Count]
	FROM			mp_lead					(NOLOCK)
	INNER JOIN		mp_mst_lead_source		(NOLOCK)	ON mp_mst_lead_source.lead_Source_id = mp_lead.lead_Source_id
	INNER JOIN		mp_Companies			(NOLOCK)	ON mp_Companies.Company_id = mp_lead.company_id
	INNER JOIN		mp_Contacts				(NOLOCK)	ON mp_Contacts.Contact_id=mp_Companies.Assigned_SourcingAdvisor
	INNER JOIN		aspnetusers				(NOLOCK)	ON aspnetusers.contact_id = mp_Contacts.Contact_id
	WHERE mp_lead.lead_source_id in (@lead_source_id)
	AND mp_Companies.Company_Id = @CompanyId		
	AND CAST(mp_lead.lead_date as DATE) = CAST(GETUTCDATE() AS DATE)
	GROUP BY FirstName +' '+ LastName,aspnetusers.PhoneNumber, mp_Companies.Company_Id , mp_Companies.name,mp_Companies.CompanyURL,mp_mst_lead_source.lead_Source_Id, Lead_Source, mp_Contacts.Title
	/*  */
	--Created Date, phone no, title/designation from aspnetusers
END
GO
PRINT N'Altering Procedure [dbo].[proc_get_public_profile_url_list]...';


GO

/*
EXEC proc_get_public_profile_url_list 'free'
EXEC proc_get_public_profile_url_list 'Paid'
*/
ALTER proc [dbo].[proc_get_public_profile_url_list]
(
	@supplier_type		varchar(100)

)
AS
BEGIN
    set nocount on

	if(@supplier_type = 'Paid')
		begin
			SELECT b.company_id AS CompanyId, b.name AS CompanyName,
			CASE 
				WHEN DB_NAME() = 'MP2020_DEV' THEN 'http://qa.mfg2020.com/#/Public/profile/'
				WHEN DB_NAME() = 'MP2020_UAT' THEN 'https://uatapp.mfg.com/#/Public/profile/'
				WHEN DB_NAME() = 'MP2020_PROD' THEN 'https://app.mfg.com/#/Public/profile/'
			END	+b.CompanyURL AS CompanyURL
			,d.territory_classification_name AS ManufacturingLocation
			FROM mp_contacts a (nolock)
			INNER JOIN mp_Companies b (nolock) on a.company_id=b.company_id
			INNER JOIN mp_registered_supplier c (nolock) ON(a.company_id = c.company_id)
			INNER JOIN mp_mst_territory_classification d (nolock) ON(b.manufacturing_location_id = d.territory_classification_id)
			WHERE a.is_admin = 1
				  AND a.is_buyer = 0
				  AND a.is_active = 1
				  AND c.is_registered = 1
				  AND b.company_id <> 0
			GROUP BY b.company_id, b.name,b.CompanyURL,d.territory_classification_name
			ORDER BY b.company_id
		end
	else
	    begin
			SELECT b.company_id AS CompanyId, b.name AS CompanyName,
			CASE 
				WHEN DB_NAME() = 'MP2020_DEV' THEN 'http://qa.mfg2020.com/#/Public/profile/'
				WHEN DB_NAME() = 'MP2020_UAT' THEN 'https://uatapp.mfg.com/#/Public/profile/'
				WHEN DB_NAME() = 'MP2020_PROD' THEN 'https://app.mfg.com/#/Public/profile/'
			END+b.CompanyURL AS CompanyURL
			,d.territory_classification_name AS ManufacturingLocation
			FROM mp_contacts a (nolock)
			INNER JOIN mp_Companies b (nolock) on a.company_id=b.company_id
			--INNER JOIN mp_registered_supplier c (nolock) ON(a.company_id <> c.company_id)
			INNER JOIN mp_mst_territory_classification d (nolock) ON(b.manufacturing_location_id = d.territory_classification_id)
			WHERE a.is_admin = 1
				  AND a.is_buyer = 0
				  AND a.is_active = 1
				  AND b.company_id NOT IN(SELECT company_id FROM mp_registered_supplier WHERE is_registered = 1)
				  AND b.company_id <> 0
			GROUP BY b.company_id, b.name,b.CompanyURL,d.territory_classification_name
			ORDER BY b.company_id
		end
END
GO
PRINT N'Altering Procedure [dbo].[proc_get_qms_invoice_no]...';


GO
ALTER PROCEDURE [dbo].[proc_get_qms_invoice_no]
(
	@supplier_company_id	INT,
	@is_creating_invoice	BIT = 0,
	@defaultValue			INT OUTPUT
)
AS
BEGIN
	/*
		M2-2410 M - Add starting invoice number to settings - DB
	*/
		
	SET NOCOUNT ON 

	DECLARE @CurrentInvoiceNo INT
	
	SET @defaultValue =  
	(		
		SELECT invoice_starting_seq_no 
		FROM mp_mst_qms_quote_invoice_seq_no (NOLOCK)
		WHERE company_id = @supplier_company_id 
	)


	IF @is_creating_invoice = 1
	BEGIN
	
		SET @CurrentInvoiceNo = 

			(
			SELECT MAX(CONVERT(INT,	invoice_no)) InvoiceNo FROM mp_qms_quote_invoices 
			WHERE 
				created_by IN
				(
					SELECT contact_id FROM mp_contacts WHERE company_id = @supplier_company_id AND is_buyer = 0
				)
			)


		SELECT 
			CASE 
				WHEN  @CurrentInvoiceNo IS NULL THEN @defaultValue
				WHEN  @CurrentInvoiceNo < @defaultValue THEN @defaultValue 
				WHEN  @CurrentInvoiceNo > @defaultValue THEN @CurrentInvoiceNo+1 
				WHEN  @CurrentInvoiceNo = @defaultValue THEN @CurrentInvoiceNo+1 
			ELSE @defaultValue 
		END  InvoiceNo

	END
	ELSE
		SELECT @defaultValue InvoiceNo


END
GO
PRINT N'Altering Procedure [dbo].[proc_get_qms_my_company_invoices]...';


GO
ALTER procedure [dbo].[proc_get_qms_my_company_invoices]
(
	@SupplierId				int	
	,@SupplierCompanyId		int	
	,@SearchText			varchar(150)	= null
	,@IsOrderByDesc			bit		='true'
	,@OrderBy				varchar(100)	= null -- 'Customer' , 'Status'
	,@Customer_id			int = null
	,@Status				varchar(100)	= null
	,@PageNo				int = 1
	,@PageSize				int = 25
	,@FilterBySupplierId	int
	,@TotalRec				int output
)
as
begin
		/*
		 =============================================
		 Create date: Feb 24,2020
		 Description: M2-2311 M - My Company Invoices - DB
		 Modification:
		 =================================================================
		*/
		set nocount on

		drop table if exists #tmp_qms_my_invoices
		drop table if exists #tmp_qms_my_company_users

		if (@OrderBy is null or @OrderBy = '' )
			set @OrderBy  = 'invoice_id'

		
		select contact_id into #tmp_qms_my_company_users 
		from mp_contacts (nolock) where company_id = @SupplierCompanyId

		select	
			a.invoice_no as InvoiceNo
			, e.first_name + ' ' +e.last_name as Customer
			, a.reference_no as QuoteReferenceNo 
			, g.qms_status_id as StatusId
			, g.status as Status
			, sum(case when d.fee_type_id = 1 then (c.part_qty *  d.value) else  d.value end) as AmountDue
			, a.qms_quote_invoice_id as QMSQuoteInvoiceId
			, a.qms_quote_id as QMSQuoteId
			, a.invoice_id as InvoiceId
			, a.qms_customer_id as QMSCustomerId
			, f.quote_id as QuoteId
			, h.first_name + ' ' + h.last_name as Supplier
			, h.contact_id as SupplierId
			into #tmp_qms_my_invoices
		from mp_qms_quote_invoices						(nolock) a
		join mp_qms_quote_invoice_parts					(nolock) b on a.qms_quote_invoice_id = b.qms_quote_invoice_id and a.is_deleted = 0
		join mp_qms_quote_invoice_part_quantities		(nolock) c on b.qms_quote_invoice_part_id = c.qms_quote_invoice_part_id and c.is_deleted = 0
		join mp_qms_quote_invoice_part_qty_fee_types	(nolock) d on c.qms_quote_invoice_part_qty_id = d.qms_quote_invoice_part_qty_id
		join mp_qms_contacts							(nolock) e on a.qms_customer_id = e.qms_contact_id
		join mp_qms_quotes								(nolock) f on a.qms_quote_id = f.qms_quote_id
		join mp_mst_qms_status							(nolock) g on a.status_id = g.qms_status_id
		join mp_contacts								(nolock) h on a.created_by = h.contact_id
		where 

			 (
				 (a.invoice_no like '%'+@SearchText+'%')	
				 or	
				 (a.reference_no like '%'+@SearchText+'%')		
				 or
				 (@SearchText is null)
			 )
			 and a.qms_customer_id = (case when @Customer_id is null or @Customer_id ='0'  then a.qms_customer_id else @Customer_id end )
			 and g.status = (case when @Status is null or @Status = '' then g.status else @Status end ) 
			 and a.created_by in  (select contact_id from #tmp_qms_my_company_users)
			 and h.contact_id = (case when @FilterBySupplierId is null or @FilterBySupplierId ='0'  then h.contact_id else @FilterBySupplierId end ) 
		group by a.invoice_no ,e.first_name + ' ' +e.last_name ,a.reference_no,g.qms_status_id,g.status, a.qms_quote_invoice_id, a.qms_quote_id ,a.invoice_id ,a.qms_customer_id,f.quote_id ,h.first_name + ' ' + h.last_name ,h.contact_id 
		
		select @totalrec = count(1)  from #tmp_qms_my_invoices

		select 
			InvoiceNo	
			,Customer	
			,QuoteReferenceNo	
			,StatusId
			,Status	
			,AmountDue	+ isnull(SpecialFeeAmt,0) as AmountDue
			,a.QMSQuoteInvoiceId	
			,QMSQuoteId	
			,InvoiceId	
			,QMSCustomerId	
			,QuoteId
			,Supplier	
			,SupplierId
		from #tmp_qms_my_invoices  a
		left join
		(
			select a.qms_quote_invoice_id as QMSQuoteInvoiceId, sum(h.value) SpecialFeeAmt
			from mp_qms_quote_invoices							(nolock) a
			join mp_qms_quote_invoice_parts						(nolock) b on a.qms_quote_invoice_id = b.qms_quote_invoice_id and a.is_deleted = 0
			left join mp_qms_quote_invoice_part_special_fees	(nolock) h on b.qms_quote_invoice_part_id = h.qms_quote_invoice_part_id
			where 
			  a.created_by in  (select contact_id from #tmp_qms_my_company_users)
			group by a.qms_quote_invoice_id 
		)  b on a.QMSQuoteInvoiceId = b.QMSQuoteInvoiceId
		order by 
				case   when @IsOrderByDesc =  1 and @OrderBy = 'invoice_id' then   convert(bigint,InvoiceNo) end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'Customer' then   Customer end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'Status' then   Status end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'quote_id' then   QMSQuoteId end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'total' then   AmountDue end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'Supplier' then   Supplier end desc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'invoice_id' then    convert(bigint,InvoiceNo) end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'Customer' then   Customer end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'Status' then   Status end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'quote_id' then   QMSQuoteId end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'total' then   AmountDue end asc
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'Supplier' then   Supplier end asc   
		offset @pagesize * (@pageno - 1) rows
		fetch next @pagesize rows only


		drop table if exists #tmp_qms_my_invoices
		drop table if exists #tmp_qms_my_company_users
end
GO
PRINT N'Altering Procedure [dbo].[proc_get_qms_quotes]...';


GO
/*
exec proc_get_qms_quotes 
@qms_supplier_id = 1337894
,@qms_type = 8
,@pageno   = 1
,@pagesize = 100
,@search = ''
,@isorderbydesc = 1
,@orderby = ''
,@filter_company		 = null
,@filter_status			 = null
,@filter_probability	 = null
,@filter_supplier		= 1337894

*/


ALTER procedure [dbo].[proc_get_qms_quotes]
(
@qms_supplier_id		int
,@qms_type				smallint
,@pageno				int = 1
,@pagesize				int = 25
,@search				varchar(500) = null
,@isorderbydesc			bit ='true'
,@orderby				varchar(100) = null
,@filter_company		int = null
,@filter_probability	int = null
,@filter_status			int = null
,@filter_supplier		int = null
)
as
begin
	set nocount on
	/*
	M2-1901 M - My Quotes List View - DB
	M2-1988 M - QMS - Change the My Quotes Columns on the list -DB
	*/

	/* M2-2313 M - My Company Quotes page - DB */
	declare @supplier_company_id int
	/**/
	
	if @orderby is null or  @orderby = ''
		set @orderby = 'quote_id'
				
	drop table if exists #tmp_quote_feetypes
	drop table if exists ##tmp_quote_feetypes1

	/* M2-2313 M - My Company Quotes page - DB */
		set @supplier_company_id  = (select company_id from mp_contacts (nolock) where contact_id = @qms_supplier_id )
	/**/


	-- my QMS quotes excluding draft
	if @qms_type = 1 
	begin
		select 
			a.qms_quote_id as qms_quote_id
			, a.quote_id as quote_id
			, a.qms_quote_name as quote_name
			, a.quote_valid_until as quotes_expired
			, b.qms_contact_id as qms_company_id
			, b.company
			, b.first_name +' ' + b.last_name as contact
			, h.qms_process as process
			, f.status as quote_status
			, g.status as probalility
			, count(1) over () total_row_count
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 101) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteDowloaded
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 102) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToSelf
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 103) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToCustomer
			, b.email as CustomerEmail
		from mp_qms_quotes					(nolock) a
		join mp_qms_contacts				(nolock) b on a.qms_contact_id = b.qms_contact_id
		join 
		(
			select a1.* from mp_qms_quote_parts (nolock)  a1
			join 
			(
				select qms_quote_id , min(qms_quote_part_id) qms_quote_part_id from mp_qms_quote_parts (nolock) group by qms_quote_id
			) b1 on a1.qms_quote_part_id = b1.qms_quote_part_id
		) c on a.qms_quote_id = c.qms_quote_id --and c.status_id = 2
		-- left join mp_mst_part_category		(nolock) e on c.part_category_id = e.part_category_id
		left join 
		(
			select qms_status_id  , description status 
			from mp_mst_qms_status (nolock) where  is_active = 1 and sys_key in ( 'EMAIL_STATUS')
			union 
			select mp_mst_qms_additional_email_status_id , email_status 
			from mp_mst_qms_additional_email_statuses a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id		
		) f	on a.email_status_id = f.qms_status_id 
		left join 
		(
			select qms_status_id qms_status_id , description status
			from mp_mst_qms_status (nolock)  where  is_active = 1 and sys_key in ( 'PROBABILITY')
			union 
			select mp_mst_qms_additional_probability_id , probability 
			from mp_mst_qms_additional_probabilities a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id
		) g on a.probability = g.qms_status_id 
		left join mp_mst_qms_processes		(nolock) h on c.part_category_id = h.qms_process_id
		where 
			a.status_id > 1
			and a.status_id != 19
			and 
			a.created_by = @qms_supplier_id
			and 
			(						 
					(b.company like '%'+@search+'%')	
					OR	
					(b.company like '%'+@search+'%')		
					OR
					(@search is null)					 				
			)
			and 
			(
				b.qms_contact_id = @filter_company 
				or @filter_company is null
			)
			and 
			(
				f.qms_status_id = @filter_status 
				or @filter_status is null
			)
			and 
			(
				g.qms_status_id = @filter_probability 
				or @filter_probability is null
			)
		order by 
			case   when @isorderbydesc =  1 and @orderby = 'quote_id'		then   a.qms_quote_id    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'company'		then   company   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'process'		then   h.qms_process   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quote_status'	then   f.status  end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'probalility'	then   g.status end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quotes_expired'	then   a.quote_valid_until end desc  			
			,case  when @isorderbydesc =  0 and @orderby = 'quote_id'		then   a.qms_quote_id    end asc  
			,case  when @isorderbydesc =  0 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'company'		then   company   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'process'		then   h.qms_process   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'quote_status'	then   f.status  end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'probalility'	then   g.status end asc 
			,case  when @isorderbydesc =  0 and @orderby = 'quotes_expired'	then   a.quote_valid_until end asc  
						
		offset @pagesize * (@pageno - 1) rows
		fetch next @pagesize rows only
	end
	-- my drafts
	else if @qms_type = 2
	begin
		select 
			a.qms_quote_id as qms_quote_id
			, a.quote_id as quote_id
			, a.qms_quote_name as quote_name
			, a.quote_valid_until as quotes_expired
			, b.qms_contact_id as qms_company_id
			, b.company
			, b.first_name +' ' + b.last_name as contact
			, h.qms_process as process
			, f.status as quote_status
			, f.qms_status_id
			, g.status as probalility
			, count(1) over () total_row_count
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 101) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteDowloaded
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 102) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToSelf
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 103) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToCustomer
			, b.email as CustomerEmail
		from mp_qms_quotes					(nolock) a
		join mp_qms_contacts				(nolock) b on a.qms_contact_id = b.qms_contact_id
		left join 
		(
			select a1.* from mp_qms_quote_parts (nolock)  a1
			join 
			(
				select qms_quote_id , min(qms_quote_part_id) qms_quote_part_id from mp_qms_quote_parts (nolock) group by qms_quote_id
			) b1 on a1.qms_quote_part_id = b1.qms_quote_part_id
		) c on a.qms_quote_id = c.qms_quote_id --and c.status_id = 2
		left join mp_mst_qms_processes		(nolock) h on c.part_category_id = h.qms_process_id
		left join 
		(
			select qms_status_id  , description status 
			from mp_mst_qms_status (nolock) where  is_active = 1 and sys_key in ( 'EMAIL_STATUS')
			union 
			select mp_mst_qms_additional_email_status_id , email_status 
			from mp_mst_qms_additional_email_statuses a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id		
		) f	on a.email_status_id = f.qms_status_id 
		left join 
		(
			select qms_status_id qms_status_id , description status
			from mp_mst_qms_status (nolock)  where  is_active = 1 and sys_key in ( 'PROBABILITY')
			union 
			select mp_mst_qms_additional_probability_id , probability 
			from mp_mst_qms_additional_probabilities a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id
		) g on a.probability = g.qms_status_id 
		where 
			a.status_id = 1
			and a.status_id != 19
			and a.created_by = @qms_supplier_id
			and 
			(						 
					(b.company like '%'+@search+'%')	
					OR	
					(b.company like '%'+@search+'%')		
					OR
					(@search is null)					 				
			)
			and 
			(
				b.qms_contact_id = @filter_company 
				or @filter_company is null
			)
			and 
			(
				f.qms_status_id = @filter_status 
				or @filter_status is null
			)
			and 
			(
				g.qms_status_id = @filter_probability 
				or @filter_probability is null
			)
		order by 
			case   when @isorderbydesc =  1 and @orderby = 'quote_id'		then   a.qms_quote_id    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'company'		then   company   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'process'		then   h.qms_process   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quote_status'	then   f.status  end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'probalility'	then   g.status end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quotes_expired'	then   a.quote_valid_until end desc  			
			,case  when @isorderbydesc =  0 and @orderby = 'quote_id'		then   a.qms_quote_id    end asc  
			,case  when @isorderbydesc =  0 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'company'		then   company   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'process'		then   h.qms_process   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'quote_status'	then   f.status  end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'probalility'	then   g.status end asc 
			,case  when @isorderbydesc =  0 and @orderby = 'quotes_expired'	then   a.quote_valid_until end asc  		
		offset @pagesize * (@pageno - 1) rows
		fetch next @pagesize rows only
	end
	-- out for quoting
	else if @qms_type = 3
	begin
		select 
			a.qms_quote_id as qms_quote_id
			, a.quote_id as quote_id
			, a.qms_quote_name as quote_name
			, a.quote_valid_until as quotes_expired
			, b.qms_contact_id as qms_company_id
			, b.company
			, b.first_name +' ' + b.last_name as contact
			, h.qms_process as process
			, f.status as quote_status
			, g.status as probalility
			, count(1) over () total_row_count
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 101) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteDowloaded
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 102) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToSelf
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 103) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToCustomer
			, b.email as CustomerEmail
		from mp_qms_quotes					(nolock) a
		join mp_qms_contacts				(nolock) b on a.qms_contact_id = b.qms_contact_id
		join 
		(
			select a1.* from mp_qms_quote_parts (nolock)  a1
			join 
			(
				select qms_quote_id , min(qms_quote_part_id) qms_quote_part_id from mp_qms_quote_parts (nolock) group by qms_quote_id
			) b1 on a1.qms_quote_part_id = b1.qms_quote_part_id
		) c on a.qms_quote_id = c.qms_quote_id --and c.status_id = 2
		left join mp_mst_qms_processes		(nolock) h on c.part_category_id = h.qms_process_id
		left join 
		(
			select qms_status_id  , description status 
			from mp_mst_qms_status (nolock) where  is_active = 1 and sys_key in ( 'EMAIL_STATUS')
			union 
			select mp_mst_qms_additional_email_status_id , email_status 
			from mp_mst_qms_additional_email_statuses a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id		
		) f	on a.email_status_id = f.qms_status_id 
		left join 
		(
			select qms_status_id qms_status_id , description status
			from mp_mst_qms_status (nolock)  where  is_active = 1 and sys_key in ( 'PROBABILITY')
			union 
			select mp_mst_qms_additional_probability_id , probability 
			from mp_mst_qms_additional_probabilities a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id
		) g on a.probability = g.qms_status_id 
		where 
			a.status_id = 2
			and a.status_id != 19
			and a.created_by = @qms_supplier_id
			and 
			(						 
					(b.company like '%'+@search+'%')	
					OR	
					(b.company like '%'+@search+'%')		
					OR
					(@search is null)					 				
			)
			and 
			(
				b.qms_contact_id = @filter_company 
				or @filter_company is null
			)
			and 
			(
				f.qms_status_id = @filter_status 
				or @filter_status is null
			)
			and 
			(
				g.qms_status_id = @filter_probability 
				or @filter_probability is null
			)
		order by 
			case   when @isorderbydesc =  1 and @orderby = 'quote_id'		then   a.qms_quote_id    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'company'		then   company   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'process'		then   h.qms_process   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quote_status'	then   f.status  end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'probalility'	then   g.status end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quotes_expired'	then   a.quote_valid_until end desc  			
			,case  when @isorderbydesc =  0 and @orderby = 'quote_id'		then   a.qms_quote_id    end asc  
			,case  when @isorderbydesc =  0 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'company'		then   company   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'process'		then   h.qms_process   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'quote_status'	then   f.status  end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'probalility'	then   g.status end asc 
			,case  when @isorderbydesc =  0 and @orderby = 'quotes_expired'	then   a.quote_valid_until end asc    			
		offset @pagesize * (@pageno - 1) rows
		fetch next @pagesize rows only
	end
	-- my expired
	else if @qms_type = 4
	begin
		select 
			a.qms_quote_id as qms_quote_id
			, a.quote_id as quote_id
			, a.qms_quote_name as quote_name
			, a.quote_valid_until as quotes_expired
			, b.qms_contact_id as qms_company_id
			, b.company
			, b.first_name +' ' + b.last_name as contact
			, h.qms_process as process
			, f.status as quote_status
			, g.status as probalility
			, count(1) over () total_row_count
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 101) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteDowloaded
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 102) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToSelf
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 103) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToCustomer
			, b.email as CustomerEmail
		from mp_qms_quotes					(nolock) a
		join mp_qms_contacts				(nolock) b on a.qms_contact_id = b.qms_contact_id
		join 
		(
			select a1.* from mp_qms_quote_parts (nolock)  a1
			join 
			(
				select qms_quote_id , min(qms_quote_part_id) qms_quote_part_id from mp_qms_quote_parts (nolock) group by qms_quote_id
			) b1 on a1.qms_quote_part_id = b1.qms_quote_part_id
		) c on a.qms_quote_id = c.qms_quote_id --and c.status_id = 2
		left join mp_mst_qms_processes		(nolock) h on c.part_category_id = h.qms_process_id
		left join 
		(
			select qms_status_id  , description status 
			from mp_mst_qms_status (nolock) where  is_active = 1 and sys_key in ( 'EMAIL_STATUS')
			union 
			select mp_mst_qms_additional_email_status_id , email_status 
			from mp_mst_qms_additional_email_statuses a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id		
		) f	on a.email_status_id = f.qms_status_id 
		left join 
		(
			select qms_status_id qms_status_id , description status
			from mp_mst_qms_status (nolock)  where  is_active = 1 and sys_key in ( 'PROBABILITY')
			union 
			select mp_mst_qms_additional_probability_id , probability 
			from mp_mst_qms_additional_probabilities a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id
		) g on a.probability = g.qms_status_id 
		where 
			a.status_id = 3
			and a.status_id != 19
			and a.created_by = @qms_supplier_id
			and 
			(						 
					(b.company like '%'+@search+'%')	
					OR	
					(b.company like '%'+@search+'%')		
					OR
					(@search is null)					 				
			)
			and 
			(
				b.qms_contact_id = @filter_company 
				or @filter_company is null
			)
			and 
			(
				f.qms_status_id = @filter_status 
				or @filter_status is null
			)
			and 
			(
				g.qms_status_id = @filter_probability 
				or @filter_probability is null
			)
		order by 
			case   when @isorderbydesc =  1 and @orderby = 'quote_id'		then   a.qms_quote_id    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'company'		then   company   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'process'		then   h.qms_process   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quote_status'	then   f.status  end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'probalility'	then   g.status end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quotes_expired'	then   a.quote_valid_until end desc  			
			,case  when @isorderbydesc =  0 and @orderby = 'quote_id'		then   a.qms_quote_id    end asc  
			,case  when @isorderbydesc =  0 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'company'		then   company   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'process'		then   h.qms_process   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'quote_status'	then   f.status  end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'probalility'	then   g.status end asc 
			,case  when @isorderbydesc =  0 and @orderby = 'quotes_expired'	then   a.quote_valid_until end asc    		
		offset @pagesize * (@pageno - 1) rows
		fetch next @pagesize rows only
	end
	-- my accepted
	else if @qms_type = 5
	begin
		select 
			a.qms_quote_id as qms_quote_id
			, a.quote_id as quote_id
			, a.qms_quote_name as quote_name
			, a.quote_valid_until as quotes_expired
			, b.qms_contact_id as qms_company_id
			, b.company
			, b.first_name +' ' + b.last_name as contact
			, h.qms_process as process
			, f.status as quote_status
			, g.status as probalility
			, count(1) over () total_row_count
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 101) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteDowloaded
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 102) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToSelf
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 103) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToCustomer
			, b.email as CustomerEmail
		from mp_qms_quotes					(nolock) a
		join mp_qms_contacts				(nolock) b on a.qms_contact_id = b.qms_contact_id
		join 
		(
			select a1.* from mp_qms_quote_parts (nolock)  a1
			join 
			(
				select qms_quote_id , min(qms_quote_part_id) qms_quote_part_id from mp_qms_quote_parts (nolock) group by qms_quote_id
			) b1 on a1.qms_quote_part_id = b1.qms_quote_part_id
		) c on a.qms_quote_id = c.qms_quote_id --and c.status_id = 2
		left join mp_mst_qms_processes		(nolock) h on c.part_category_id = h.qms_process_id
		left join 
		(
			select qms_status_id  , description status 
			from mp_mst_qms_status (nolock) where  is_active = 1 and sys_key in ( 'EMAIL_STATUS')
			union 
			select mp_mst_qms_additional_email_status_id , email_status 
			from mp_mst_qms_additional_email_statuses a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id		
		) f	on a.email_status_id = f.qms_status_id 
		left join 
		(
			select qms_status_id qms_status_id , description status
			from mp_mst_qms_status (nolock)  where  is_active = 1 and sys_key in ( 'PROBABILITY')
			union 
			select mp_mst_qms_additional_probability_id , probability 
			from mp_mst_qms_additional_probabilities a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id
		) g on a.probability = g.qms_status_id 
		where 
			a.status_id = 4
			and a.status_id != 19
			and a.created_by = @qms_supplier_id
			and 
			(						 
					(b.company like '%'+@search+'%')	
					OR	
					(b.company like '%'+@search+'%')		
					OR
					(@search is null)					 				
			)
			and 
			(
				b.qms_contact_id = @filter_company 
				or @filter_company is null
			)
			and 
			(
				f.qms_status_id = @filter_status 
				or @filter_status is null
			)
			and 
			(
				g.qms_status_id = @filter_probability 
				or @filter_probability is null
			)
		order by 
			case   when @isorderbydesc =  1 and @orderby = 'quote_id'		then   a.qms_quote_id    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'company'		then   company   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'process'		then   h.qms_process   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quote_status'	then   f.status  end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'probalility'	then   g.status end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quotes_expired'	then   a.quote_valid_until end desc  			
			,case  when @isorderbydesc =  0 and @orderby = 'quote_id'		then   a.qms_quote_id    end asc  
			,case  when @isorderbydesc =  0 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'company'		then   company   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'process'		then   h.qms_process   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'quote_status'	then   f.status  end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'probalility'	then   g.status end asc 
			,case  when @isorderbydesc =  0 and @orderby = 'quotes_expired'	then   a.quote_valid_until end asc   		
		offset @pagesize * (@pageno - 1) rows
		fetch next @pagesize rows only
	end
	-- my declined
	else if @qms_type = 6
	begin
		select 
			a.qms_quote_id as qms_quote_id
			, a.quote_id as quote_id
			, a.qms_quote_name as quote_name
			, a.quote_valid_until as quotes_expired
			, b.qms_contact_id as qms_company_id
			, b.company
			, b.first_name +' ' + b.last_name as contact
			, h.qms_process as process
			, f.status as quote_status
			, g.status as probalility
			, count(1) over () total_row_count
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 101) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteDowloaded
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 102) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToSelf
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 103) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToCustomer
			, b.email as CustomerEmail
		from mp_qms_quotes					(nolock) a
		join mp_qms_contacts				(nolock) b on a.qms_contact_id = b.qms_contact_id
		join 
		(
			select a1.* from mp_qms_quote_parts (nolock)  a1
			join 
			(
				select qms_quote_id , min(qms_quote_part_id) qms_quote_part_id from mp_qms_quote_parts (nolock) group by qms_quote_id
			) b1 on a1.qms_quote_part_id = b1.qms_quote_part_id
		) c on a.qms_quote_id = c.qms_quote_id --and c.status_id = 2
		left join mp_mst_qms_processes		(nolock) h on c.part_category_id = h.qms_process_id
		left join 
		(
			select qms_status_id  , description status 
			from mp_mst_qms_status (nolock) where  is_active = 1 and sys_key in ( 'EMAIL_STATUS')
			union 
			select mp_mst_qms_additional_email_status_id , email_status 
			from mp_mst_qms_additional_email_statuses a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id		
		) f	on a.email_status_id = f.qms_status_id 
		left join 
		(
			select qms_status_id qms_status_id , description status
			from mp_mst_qms_status (nolock)  where  is_active = 1 and sys_key in ( 'PROBABILITY')
			union 
			select mp_mst_qms_additional_probability_id , probability 
			from mp_mst_qms_additional_probabilities a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id
		) g on a.probability = g.qms_status_id 
		where 
			a.status_id = 5
			and a.status_id != 19
			and a.created_by = @qms_supplier_id
			and 
			(						 
					(b.company like '%'+@search+'%')	
					OR	
					(b.company like '%'+@search+'%')		
					OR
					(@search is null)					 				
			)
			and 
			(
				b.qms_contact_id = @filter_company 
				or @filter_company is null
			)
			and 
			(
				f.qms_status_id = @filter_status 
				or @filter_status is null
			)
			and 
			(
				g.qms_status_id = @filter_probability 
				or @filter_probability is null
			)
		order by 
			case   when @isorderbydesc =  1 and @orderby = 'quote_id'		then   a.qms_quote_id    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'company'		then   company   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'process'		then   h.qms_process   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quote_status'	then   f.status  end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'probalility'	then   g.status end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quotes_expired'	then   a.quote_valid_until end desc  			
			,case  when @isorderbydesc =  0 and @orderby = 'quote_id'		then   a.qms_quote_id    end asc  
			,case  when @isorderbydesc =  0 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'company'		then   company   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'process'		then   h.qms_process   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'quote_status'	then   f.status  end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'probalility'	then   g.status end asc 
			,case  when @isorderbydesc =  0 and @orderby = 'quotes_expired'	then   a.quote_valid_until end asc     		
		offset @pagesize * (@pageno - 1) rows
		fetch next @pagesize rows only
	end
	--my deleted quotes
	else if @qms_type = 7
	begin
		select 
			a.qms_quote_id as qms_quote_id
			, a.quote_id as quote_id
			, a.qms_quote_name as quote_name
			, a.quote_valid_until as quotes_expired
			, b.qms_contact_id as qms_company_id
			, b.company
			, b.first_name +' ' + b.last_name as contact
			, h.qms_process as process
			, f.status as quote_status
			, g.status as probalility
			, count(1) over () total_row_count
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 101) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteDowloaded
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 102) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToSelf
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 103) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToCustomer
			, b.email as CustomerEmail
		from mp_qms_quotes					(nolock) a
		join mp_qms_contacts				(nolock) b on a.qms_contact_id = b.qms_contact_id
		join 
		(
			select a1.* from mp_qms_quote_parts (nolock)  a1
			join 
			(
				select qms_quote_id , min(qms_quote_part_id) qms_quote_part_id from mp_qms_quote_parts (nolock) group by qms_quote_id
			) b1 on a1.qms_quote_part_id = b1.qms_quote_part_id
		) c on a.qms_quote_id = c.qms_quote_id --and c.status_id = 2
		left join mp_mst_qms_processes		(nolock) h on c.part_category_id = h.qms_process_id
		left join 
		(
			select qms_status_id  , description status 
			from mp_mst_qms_status (nolock) where  is_active = 1 and sys_key in ( 'EMAIL_STATUS')
			union 
			select mp_mst_qms_additional_email_status_id , email_status 
			from mp_mst_qms_additional_email_statuses a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id		
		) f	on a.email_status_id = f.qms_status_id 
		left join 
		(
			select qms_status_id qms_status_id , description status
			from mp_mst_qms_status (nolock)  where  is_active = 1 and sys_key in ( 'PROBABILITY')
			union 
			select mp_mst_qms_additional_probability_id , probability 
			from mp_mst_qms_additional_probabilities a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id
		) g on a.probability = g.qms_status_id 
		where 
			--a.status_id = 5
			 a.status_id = 19
			and a.created_by = @qms_supplier_id
			and 
			(						 
					(b.company like '%'+@search+'%')	
					OR	
					(b.company like '%'+@search+'%')		
					OR
					(@search is null)					 				
			)
			and 
			(
				b.qms_contact_id = @filter_company 
				or @filter_company is null
			)
			and 
			(
				f.qms_status_id = @filter_status 
				or @filter_status is null
			)
			and 
			(
				g.qms_status_id = @filter_probability 
				or @filter_probability is null
			)
		order by 
			case   when @isorderbydesc =  1 and @orderby = 'quote_id'		then   a.qms_quote_id    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'company'		then   company   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'process'		then   h.qms_process   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quote_status'	then   f.status  end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'probalility'	then   g.status end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quotes_expired'	then   a.quote_valid_until end desc  			
			,case  when @isorderbydesc =  0 and @orderby = 'quote_id'		then   a.qms_quote_id    end asc  
			,case  when @isorderbydesc =  0 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'company'		then   company   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'process'		then   h.qms_process   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'quote_status'	then   f.status  end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'probalility'	then   g.status end asc 
			,case  when @isorderbydesc =  0 and @orderby = 'quotes_expired'	then   a.quote_valid_until end asc     		
		offset @pagesize * (@pageno - 1) rows
		fetch next @pagesize rows only
	end
	--my company quotes excluding draft
	/* M2-2313 M - My Company Quotes page - DB */
	else if @qms_type = 8
	begin
		select 
			a.qms_quote_id as qms_quote_id
			, a.quote_id as quote_id
			, a.qms_quote_name as quote_name
			, a.quote_valid_until as quotes_expired
			, b.qms_contact_id as qms_company_id
			, b.company
			, b.first_name +' ' + b.last_name as contact
			, h.qms_process as process
			, f.status as quote_status
			, g.status as probalility
			, i.*
			, count(1) over () total_row_count
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 101) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteDowloaded
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 102) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToSelf
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 103) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToCustomer
			, b.email as CustomerEmail
		from mp_qms_quotes					(nolock) a
		join mp_qms_contacts				(nolock) b on a.qms_contact_id = b.qms_contact_id
		join 
		(
			select a1.* from mp_qms_quote_parts (nolock)  a1
			join 
			(
				select qms_quote_id , min(qms_quote_part_id) qms_quote_part_id from mp_qms_quote_parts (nolock) group by qms_quote_id
			) b1 on a1.qms_quote_part_id = b1.qms_quote_part_id
		) c on a.qms_quote_id = c.qms_quote_id --and c.status_id = 2
		-- left join mp_mst_part_category		(nolock) e on c.part_category_id = e.part_category_id
		left join 
		(
			select qms_status_id  , description status 
			from mp_mst_qms_status (nolock) where  is_active = 1 and sys_key in ( 'EMAIL_STATUS')
			union 
			select mp_mst_qms_additional_email_status_id , email_status 
			from mp_mst_qms_additional_email_statuses a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id		
		) f	on a.email_status_id = f.qms_status_id 
		left join 
		(
			select qms_status_id qms_status_id , description status
			from mp_mst_qms_status (nolock)  where  is_active = 1 and sys_key in ( 'PROBABILITY')
			union 
			select mp_mst_qms_additional_probability_id , probability 
			from mp_mst_qms_additional_probabilities a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id
		) g on a.probability = g.qms_status_id 
		left join mp_mst_qms_processes		(nolock) h on c.part_category_id = h.qms_process_id
		join 
		(
				select contact_id supplierid , first_name + ' ' + last_name  supplier 
				from mp_contacts (nolock)
				where company_id = @supplier_company_id and is_buyer= 0
		) i on a.created_by = i.supplierid
		where 
			a.status_id > 1
			and a.status_id != 19
			and 
			a.created_by in
			(
				select contact_id from mp_contacts where company_id = @supplier_company_id and is_buyer= 0
			) 
			and 
			(						 
					(b.company like '%'+@search+'%')	
					OR	
					(b.company like '%'+@search+'%')		
					OR
					(@search is null)		
					OR
					(i.supplier like '%'+@search+'%')			 				
			)
			and 
			(
				b.qms_contact_id = @filter_company 
				or @filter_company is null
			)
			and 
			(
				f.qms_status_id = @filter_status 
				or @filter_status is null
			)
			and 
			(
				g.qms_status_id = @filter_probability 
				or @filter_probability is null
			)
			and 
			(
				i.supplierid = @filter_supplier 
				or @filter_supplier is null
			)
		order by 
			case   when @isorderbydesc =  1 and @orderby = 'quote_id'		then   a.qms_quote_id    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'company'		then   company   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'process'		then   h.qms_process   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quote_status'	then   f.status  end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'probalility'	then   g.status end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quotes_expired'	then   a.quote_valid_until end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'quoter'			then   i.supplier end desc  
			,case  when @isorderbydesc =  0 and @orderby = 'quote_id'		then   a.qms_quote_id    end asc  
			,case  when @isorderbydesc =  0 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'company'		then   company   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'process'		then   h.qms_process   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'quote_status'	then   f.status  end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'probalility'	then   g.status end asc 
			,case  when @isorderbydesc =  0 and @orderby = 'quotes_expired'	then   a.quote_valid_until end asc  
			,case  when @isorderbydesc =  0 and @orderby = 'quoter'			then   i.supplier end asc  
						
		offset @pagesize * (@pageno - 1) rows
		fetch next @pagesize rows only
	end
	/* */
	/* M2-2313 M - My Company Quotes page - DB */
	--my company archived quotes 
	else if @qms_type = 9
	begin
		select 
			a.qms_quote_id as qms_quote_id
			, a.quote_id as quote_id
			, a.qms_quote_name as quote_name
			, a.quote_valid_until as quotes_expired
			, b.qms_contact_id as qms_company_id
			, b.company
			, b.first_name +' ' + b.last_name as contact
			, h.qms_process as process
			, f.status as quote_status
			, g.status as probalility
			, i.*
			, count(1) over () total_row_count
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 101) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteDowloaded
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 102) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToSelf
			, case 
				when (select count(1) from  mp_qms_quote_activities (nolock) where a.qms_quote_id = qms_quote_id and qms_quote_activity_id = 103) > 0 then cast('true' as bit) 
				else cast('false' as bit) 
			  end as QuoteSentToCustomer
			, b.email as CustomerEmail
		from mp_qms_quotes					(nolock) a
		join mp_qms_contacts				(nolock) b on a.qms_contact_id = b.qms_contact_id
		join 
		(
			select a1.* from mp_qms_quote_parts (nolock)  a1
			join 
			(
				select qms_quote_id , min(qms_quote_part_id) qms_quote_part_id from mp_qms_quote_parts (nolock) group by qms_quote_id
			) b1 on a1.qms_quote_part_id = b1.qms_quote_part_id
		) c on a.qms_quote_id = c.qms_quote_id --and c.status_id = 2
		-- left join mp_mst_part_category		(nolock) e on c.part_category_id = e.part_category_id
		left join 
		(
			select qms_status_id  , description status 
			from mp_mst_qms_status (nolock) where  is_active = 1 and sys_key in ( 'EMAIL_STATUS')
			union 
			select mp_mst_qms_additional_email_status_id , email_status 
			from mp_mst_qms_additional_email_statuses a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id		
		) f	on a.email_status_id = f.qms_status_id 
		left join 
		(
			select qms_status_id qms_status_id , description status
			from mp_mst_qms_status (nolock)  where  is_active = 1 and sys_key in ( 'PROBABILITY')
			union 
			select mp_mst_qms_additional_probability_id , probability 
			from mp_mst_qms_additional_probabilities a  (nolock) 
			where a.is_active = 1 and a.supplier_company_id = @supplier_company_id
		) g on a.probability = g.qms_status_id 
		left join mp_mst_qms_processes		(nolock) h on c.part_category_id = h.qms_process_id
		join 
		(
				select contact_id supplierid , first_name + ' ' + last_name  supplier 
				from mp_contacts (nolock)
				where company_id = @supplier_company_id and is_buyer= 0
		) i on a.created_by = i.supplierid
		where 
			a.status_id = 19
			and 
			a.created_by in
			(
				select contact_id from mp_contacts where company_id = @supplier_company_id and is_buyer= 0
			) 
			and 
			(						 
					(b.company like '%'+@search+'%')	
					OR	
					(b.company like '%'+@search+'%')		
					OR
					(@search is null)		
					OR
					(i.supplier like '%'+@search+'%')			 				
			)
			and 
			(
				b.qms_contact_id = @filter_company 
				or @filter_company is null
			)
			and 
			(
				f.qms_status_id = @filter_status 
				or @filter_status is null
			)
			and 
			(
				g.qms_status_id = @filter_probability 
				or @filter_probability is null
			)
			and 
			(
				i.supplierid = @filter_supplier 
				or @filter_supplier is null
			)
		order by 
			case   when @isorderbydesc =  1 and @orderby = 'quote_id'		then   a.qms_quote_id    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'company'		then   company   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'process'		then   h.qms_process   end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quote_status'	then   f.status  end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'probalility'	then   g.status end desc   
			,case  when @isorderbydesc =  1 and @orderby = 'quotes_expired'	then   a.quote_valid_until end desc  
			,case  when @isorderbydesc =  1 and @orderby = 'quoter'			then   i.supplier end desc  
			,case  when @isorderbydesc =  0 and @orderby = 'quote_id'		then   a.qms_quote_id    end asc  
			,case  when @isorderbydesc =  0 and @orderby = 'qms_quote_name'	then   a.qms_quote_name    end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'company'		then   company   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'contact'		then   (b.first_name +' ' + b.last_name) end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'process'		then   h.qms_process   end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'quote_status'	then   f.status  end asc   
			,case  when @isorderbydesc =  0 and @orderby = 'probalility'	then   g.status end asc 
			,case  when @isorderbydesc =  0 and @orderby = 'quotes_expired'	then   a.quote_valid_until end asc  
			,case  when @isorderbydesc =  0 and @orderby = 'quoter'			then   i.supplier end asc  
						
		offset @pagesize * (@pageno - 1) rows
		fetch next @pagesize rows only
	end
	/* */
end
GO
PRINT N'Altering Procedure [dbo].[proc_get_qms_quotes_pdf]...';


GO


/*
	exec [proc_get_qms_quotes_pdf] @qms_quote_id=184

*/
ALTER procedure [dbo].[proc_get_qms_quotes_pdf]
(
@qms_quote_id	int
)
as
begin
	set nocount on
	/*
	M2-1900 M - Step 4 Review Quote - PDF preview window - DB
	*/
		declare @listfeetypes nvarchar(max)
		declare @sql_query varchar(max)
		declare @supplier_company_id int

		drop table if exists #tmp_quote_feetypes
		drop table if exists ##tmp_quote_feetypes1


		set @supplier_company_id  = 
			(
				select e.company_id 
				from mp_qms_quotes	(nolock)	a
				join mp_contacts			(nolock)	e on a.created_by = e.contact_id  where qms_quote_id = @qms_quote_id 
			)


		select  a.qms_quote_id , b.qms_quote_part_id , c.qms_quote_part_qty_id , c.part_qty, qty_level , fee_type_id , fee_type , value
		into #tmp_quote_feetypes
		from 
		mp_qms_quotes							(nolock)	a
		join mp_qms_quote_parts					(nolock)	b on a.qms_quote_id = b.qms_quote_id 
		join mp_qms_quote_part_quantities		(nolock)    c on b.qms_quote_part_id = c.qms_quote_part_id and c.is_deleted = 0
		join mp_contacts						(nolock)	e on a.created_by = e.contact_id
		join mp_qms_quote_part_qty_fee_types	(nolock)    d on c.qms_quote_part_qty_id = d.qms_quote_part_qty_id
		left join 
		(
			select qms_fee_type_id  ,fee_type
			from mp_mst_qms_fee_types (nolock) 
			union
			select qms_dynamic_fee_type_id as QMSFeeTypeId,fee_type as FeeType
			from mp_mst_qms_dynamic_fee_types (nolock) a 
			where supplier_company_id = @supplier_company_id 
			
		) f on d.fee_type_id = f.qms_fee_type_id
		where a.qms_quote_id = @qms_quote_id
		order by a.qms_quote_id , b.qms_quote_part_id , c.part_qty , fee_type_id
     
	 --select distinct
		--		qms_quote_id,	qms_quote_part_id	, qms_quote_part_qty_id	, qty_level ,
		--		(
		--			select value 
		--			from #tmp_quote_feetypes 
		--			where 
		--				qms_quote_id= a.qms_quote_id 
		--				and qms_quote_part_id = a.qms_quote_part_id 
		--				and qms_quote_part_qty_id= a.qms_quote_part_qty_id
		--				and qty_level= a.qty_level
		--				and fee_type_id = 1
		--		) per_unit_price
		--		,(
		--			select sum(value)
		--			from #tmp_quote_feetypes 
		--			where 
		--				qms_quote_id= a.qms_quote_id 
		--				and qms_quote_part_id = a.qms_quote_part_id 
		--				and qms_quote_part_qty_id= a.qms_quote_part_qty_id
		--				and qty_level= a.qty_level
		--				and fee_type_id <> 1
		--		) miscellaneous_cost

		--	from   #tmp_quote_feetypes  a




		select 
			a.quote_id
			, a.qms_quote_name as quote_name
			, a.quote_ref_no as quote_ref_no
			, a.created_date as quote_date
			, a.quote_valid_until as quote_valid_until
			, a.probability as probability
			, b.company as customer_company
			, (isnull(b.address,'') +','  +char(13) + char(10)+ isnull(city,'')+',' +char(13) + char(10)+ isnull(b.state,'')+','  +char(13) + char(10)+ isnull(b.zip_code,'')+','+char(13) + char(10)+ isnull(o.iso_code,''))   as customer_company_address
			, isnull(b.first_name,'') +' ' + isnull(b.last_name,'') as customer_name 
			, b.email as customer_email
			, b.phone as customer_phone
			, c.qms_quote_part_id
			, c.part_name
			, c.part_no
			, c.created_date as qms_quote_part_creation_date
			, a.payment_term_id
			, a.shipping_method_id
			, q.value as payment_terms
			, r.value as shipping_terms
			, a.estimated_delivery_date
			, a.notes
			, s.qms_process as process
			, t.qms_post_production as post_production
			, u.qms_material  as material
			, w.FILE_NAME as primary_part_file
			, a.created_by			 
			, case when a.is_active = 0 then cast('false' as bit) when a.is_active = 1 then cast('true' as bit)  end as is_active
			, case when a.is_notified = 0 then cast('false' as bit) when a.is_notified = 1 then cast('true' as bit)  end as is_notified
			, a.qms_contact_id
			, a.status_id
			, c.is_accepted 
			, p.qms_quote_part_id
			, p.part_qty
			, x.value as part_qty_unit
			, p.qms_quote_part_qty_id
			/* M2-2590 M - QMS - Reorder the Quantities on the Review page - DB */
			--, p.qty_level
			, (row_number() over(partition by a.quote_id , c.qms_quote_part_id   order by a.quote_id , c.qms_quote_part_id , p.part_qty , p.qms_quote_part_qty_id) -1)qty_level
			/**/
			, convert(decimal(20,4),(p.part_qty * isnull(y.per_unit_price,0) ) + isnull(y.miscellaneous_cost,0)) as qty_level_sum
			, a.email_status_id
			, c.qms_part_status_id
			, a.who_pays_for_shipping
		from mp_qms_quotes					(nolock) a
		join mp_qms_contacts				(nolock) b on a.qms_contact_id = b.qms_contact_id
		left join mp_mst_country			(nolock) o on b.country_id = o.country_id
		left join mp_qms_quote_parts		(nolock) c on a.qms_quote_id = c.qms_quote_id 
		left join mp_qms_quote_part_files    (nolock) v on c.qms_quote_part_id = v.qms_quote_part_id  and v.is_primary = 1 and v.status_id = 2
		left join mp_special_files				(nolock) w on v.file_id = w.file_id  and w.FILETYPE_ID = 108 and w.IS_DELETED = 0
		left join mp_qms_quote_part_quantities	(nolock) p on c.qms_quote_part_id = p.qms_quote_part_id and p.is_deleted = 0
		left join mp_system_parameters		(nolock) x on p.part_qty_unit_id = x.id and x.sys_key = '@UNIT2_LIST'
		left join 
		(
			select id , value from mp_system_parameters	(nolock) where sys_key = '@QMS_PAYMENT_TERMS' 
			union 
			select qms_additional_payment_term_id, payment_terms from mp_mst_qms_additional_payment_terms	(nolock) where supplier_company_id= @supplier_company_id
		)  q on a.payment_term_id = q.id 
		left join 
		(
			select id , value from mp_system_parameters	(nolock) where sys_key = '@QMS_SHIPPING_TERMS' 
			union 
			select qms_additional_shipping_method_id, shipping_methods from mp_mst_qms_additional_shipping_methods	(nolock) where supplier_company_id= @supplier_company_id
		) r on a.shipping_method_id = r.id 
		left join mp_mst_qms_processes		(nolock) s on c.part_category_id = s.qms_process_id 
		left join mp_mst_qms_post_productions  	(nolock) t on c.post_production_id = t.qms_post_production_id 
		left join mp_mst_qms_materials		(nolock) u on c.material_id = u.qms_material_id 
		--left join mp_mst_region				(nolock) on b.state_id = mp_mst_region.region_id 
		left join 
		(
			select distinct
				qms_quote_id,	qms_quote_part_id	, qms_quote_part_qty_id	,  qty_level ,
				(
					select value 
					from #tmp_quote_feetypes 
					where 
						qms_quote_id= a.qms_quote_id 
						and qms_quote_part_id = a.qms_quote_part_id 
						and qms_quote_part_qty_id= a.qms_quote_part_qty_id
						and qty_level= a.qty_level
						and fee_type_id = 1
				) per_unit_price
				,(
					select sum(value)
					from #tmp_quote_feetypes 
					where 
						qms_quote_id= a.qms_quote_id 
						and qms_quote_part_id = a.qms_quote_part_id 
						and qms_quote_part_qty_id= a.qms_quote_part_qty_id
						and qty_level= a.qty_level
						and fee_type_id <> 1
				) miscellaneous_cost

			from   #tmp_quote_feetypes  a
		) y on 
			a.qms_quote_id= y.qms_quote_id 
			and p.qms_quote_part_id = y.qms_quote_part_id 
			and p.qms_quote_part_qty_id= y.qms_quote_part_qty_id
			and p.qty_level= y.qty_level
		where a.qms_quote_id = @qms_quote_id
		order by a.qms_quote_id, p.qms_quote_part_id ,p.part_qty

		select 
			qms_quote_id	,qms_quote_part_id	,qms_quote_part_qty_id	,part_qty	
			/* M2-2590 M - QMS - Reorder the Quantities on the Review page - DB */
			--,qty_level	
			,(dense_rank() over(partition by qms_quote_id , qms_quote_part_id   order by qms_quote_id , qms_quote_part_id , part_qty , qms_quote_part_qty_id) -1) as qty_level
			--,(dense_rank() over(partition by qms_quote_id,	qms_quote_part_id	 order by qms_quote_id,	qms_quote_part_id	,part_qty ) -1) as qty_level
			/**/
			,fee_type_id	,fee_type	,value
		from #tmp_quote_feetypes  
		

		/* M2-2503 M - QMS Step 2 - Add an independent fee type box with price, no quantity - DB */
		select  a.qms_quote_id QMSQuoteId, b.qms_quote_part_id QMSQuotePartId, fee_type_id SpecialFeeTypeId, fee_type SpecialFeeType , value SpecialFeeTypeValue
		
		from 
		mp_qms_quotes							(nolock)	a
		join mp_qms_quote_parts					(nolock)	b on a.qms_quote_id = b.qms_quote_id 
		join mp_qms_quote_part_special_fees		(nolock)    c on b.qms_quote_part_id = c.qms_quote_part_id and c.is_deleted = 0
		left join 
		(
			select qms_fee_type_id  ,fee_type
			from mp_mst_qms_fee_types (nolock) 
			union
			select qms_dynamic_fee_type_id as QMSFeeTypeId,fee_type as FeeType
			from mp_mst_qms_dynamic_fee_types (nolock) a 
			where supplier_company_id = @supplier_company_id 			
		) f on c.fee_type_id = f.qms_fee_type_id		
		where a.qms_quote_id = @qms_quote_id
		/**/


		/* M2-2503 M - QMS Step 2 - Add an independent fee type box with price, no quantity - DB */
		select  
			a.qms_quote_id QMSQuoteId
			, b.lead_time_id QMSLeadTimeId
			, lead_time as QMSLeadTime
			, lead_time_value as QMSLeadTimeValue
			, lead_time_range as QMSLeadTimeRange
		
		from 
		mp_qms_quotes	(nolock)	a
		join mp_qms_quote_lead_times (nolock)	b on a.qms_quote_id = b.qms_quote_id
		left join 
		(
			select qms_lead_time_id  ,lead_time
			from mp_mst_qms_lead_time (nolock) 
			union
			select qms_additional_lead_time_id ,lead_time 
			from mp_mst_qms_additional_lead_time (nolock) a 
			where supplier_company_id = @supplier_company_id 
			
		) f on b.lead_time_id = f.qms_lead_time_id
		where a.qms_quote_id = @qms_quote_id
		order by qms_quote_lead_time_id 

		/* M2-2505 M - QMS Step 2 part drawer - Add the profile certifications module to the bottom of the part drawer - DB */
		select 
			a.qms_quote_id as QMSQuoteId
			,b.qms_quote_part_id as QMSQuotePartId
			,c.certificate_id as QMSQuotePartCertificateId
			,d.certificate_code as QMSQuotePartCertificates
		from mp_qms_quotes						(nolock)	a
		join mp_qms_quote_parts					(nolock)	b on a.qms_quote_id = b.qms_quote_id 
		join mp_qms_quote_part_certificates		(nolock)	c on b.qms_quote_part_id = c.qms_quote_part_id
		join mp_certificates					(nolock)	d on c.certificate_id = d.certificate_id
		where a.qms_quote_id = @qms_quote_id 
		order by QMSQuoteId , QMSQuotePartId


		drop table if exists #tmp_quote_feetypes
		

end
GO
PRINT N'Altering Procedure [dbo].[proc_get_Rfq_NDALevel_&_File_Access_Info]...';


GO






/*


-- basic / standard / nda level 1  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194969 , @SupplierID = 1373306
-- basic / standard / nda level 2  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194969 , @SupplierID = 1373306
-- basic / custom / nda level 1  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194969 , @SupplierID = 1373306
-- basic / custom / nda level 2  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194969 , @SupplierID = 1373306


-- starter / standard / nda level 1  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194929 , @SupplierID = 1373278
-- starter / standard / nda level 2  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194926 , @SupplierID = 1373278
-- starter / custom / nda level 1  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194927 , @SupplierID = 1373278
-- starter / custom / nda level 2  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194928 , @SupplierID = 1373278


-- growth / standard / nda level 1  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194929 , @SupplierID = 1373279
-- growth / standard / nda level 2  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194926 , @SupplierID = 1373279
-- growth / custom / nda level 1  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194927 , @SupplierID = 1373279
-- growth / custom / nda level 2  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194928 , @SupplierID = 1373279


-- gold / standard / nda level 1  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194929 , @SupplierID = 1373280
-- gold / standard / nda level 2  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194926 , @SupplierID = 1373280
-- gold / custom / nda level 1  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194927 , @SupplierID = 1373280
-- gold / custom / nda level 2  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194928 , @SupplierID = 1373280



-- platinum / standard / nda level 1  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194929 , @SupplierID = 1373281
-- platinum / standard / nda level 2  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194926 , @SupplierID = 1373281
-- platinum / custom / nda level 1  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194927 , @SupplierID = 1373281
-- platinum / custom / nda level 2  
EXEC [proc_get_Rfq_NDALevel_&_File_Access_Info] @RfqId = 1194928 , @SupplierID = 1373281

*/

ALTER PROCEDURE [dbo].[proc_get_Rfq_NDALevel_&_File_Access_Info]
(
	@RfqId INT
	,@SupplierId INT
)
AS
BEGIN

	-- M2-5257 NDA - Supplier can see the part files without buyer level approval if the page didn’t refresh.
	DECLARE @RfqAccessInfo	VARCHAR(8000)
	DECLARE @CompanyId		INT
	DECLARE @AccountType	INT = 83
	DECLARE @NDALevel		INT
	DECLARE @IsRfqUnlocked	INT
	DECLARE @UnlockedRfqsCount INT = 0
	DECLARE @SubscriptionStatus VARCHAR(25), @RunningSubscriptionId INT
	DECLARE @ActionForGrowthPackage  VARCHAR(25)
	DECLARE @MatchedPartCount INT = 0
	DECLARE @IsNDAAcceptedBySupplier	INT 
	DECLARE @IsNDAApprovedByBuyer		INT 
	DECLARE @IsSubscriptionSupplier		BIT = 0
	DECLARE @IsCustomNDA		INT = 0


	-- fetch companyid based on contact id
	SET @CompanyId = (SELECT company_id FROM mp_contacts (NOLOCK) WHERE contact_id = @SupplierId)
	
	-- fetch company account type based on company id
	SET @AccountType = (SELECT account_type FROM mp_registered_supplier (NOLOCK) WHERE company_id = @CompanyId)
	SET @AccountType = ISNULL(@AccountType,83)
	
	-- fetch nda level based on rfq id
	SET @NDALevel = (SELECT pref_NDA_Type FROM mp_rfq (NOLOCK) WHERE rfq_id = @RfqId)
	
	-- fetch rfq unlock info
	SET @IsRfqUnlocked = (SELECT Rfq_Id  FROM mpGrowthPackageUnlockRFQsInfo (NOLOCK) WHERE CompanyId = 	@CompanyId	AND IsDeleted = 0 AND Rfq_Id = @RfqId )

	-- fetch supplier has quoting capability
	SET @IsSubscriptionSupplier =
	(
		CASE	
			WHEN (SELECT COUNT(1) FROM mp_gateway_subscription_company_processes (NOLOCK)  WHERE  company_id =  @CompanyId AND is_active = 1)> 0 THEN CAST('true' AS BIT) 
			ELSE CAST('false' AS BIT) 
		END 
	)

	-- identity standard or custum nda
	SET @IsCustomNDA = (SELECT COUNT(1) FROM mp_rfq_accepted_nda (NOLOCK) WHERE rfq_id = @RfqId  AND nda_content = '' AND status_id = 2)

	-- fetching nda accepted and approved info 
	SELECT 
		@IsNDAAcceptedBySupplier = is_prefered_nda_type_accepted 
		, @IsNDAApprovedByBuyer = isapprove_by_buyer  
	FROM [dbo].[mp_rfq_supplier_nda_accepted] (NOLOCK) WHERE rfq_id = @RfqId AND contact_id = @SupplierId


	-- for basic users hide NDA 1 Modal / NDA2 Modal  and disable file download
	IF @AccountType = 83
	BEGIN
		
		SET @RfqAccessInfo =
			(
				SELECT 
					CAST('false' AS BIT)  AS showNDA1Modal 
					,CAST('false' AS BIT) AS showNDA2Modal
					,CAST('false' AS BIT) AS isCustomNDA
					,CAST('false' AS BIT) AS showNDA2ModalWarning
					,CAST('false' AS BIT) AS isFileDownloadable
				FOR JSON PATH  , INCLUDE_NULL_VALUES , WITHOUT_ARRAY_WRAPPER 
			)

	END

	-- for starter users hide NDA 1 Modal / NDA2 Modal  and disable file download
	IF @AccountType = 313
	BEGIN
		
		SET @RfqAccessInfo =
			(
				SELECT 
					CAST('false' AS BIT)  AS showNDA1Modal 
					,CAST('false' AS BIT) AS showNDA2Modal
					,CAST('false' AS BIT) AS isCustomNDA
					,CAST('false' AS BIT) AS showNDA2ModalWarning
					,CAST('false' AS BIT) AS isFileDownloadable
				FOR JSON PATH  , INCLUDE_NULL_VALUES , WITHOUT_ARRAY_WRAPPER 
			)

	END
	
	-- for growth users hide NDA 1 Modal / NDA2 Modal  and disable file download
	IF @AccountType = 84
	BEGIN

		;WITH cte AS 
		(
			SELECT   MAX(b.subscription_start)  subscription_start 
			, MAX(b.subscription_end) subscription_end
			FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
			JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON a.id= b.customer_id
			WHERE a.gateway_id = 310 
			AND a.company_id = @CompanyId
		)  
		SELECT  TOP 1     
			@SubscriptionStatus =   b.status 
			,@RunningSubscriptionId = b.id 
		FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
		JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON a.id= b.customer_id
		JOIN cte on cte.subscription_start = b.subscription_start and cte.subscription_end = b.subscription_end
		WHERE a.gateway_id = 310 
		AND a.company_id = @CompanyId
		ORDER BY b.ID DESC

		IF @SubscriptionStatus = 'active'
		BEGIN
		    ---- getting RFQ count as per company level based on current subscription start and end date range
			SET @UnlockedRfqsCount =
			(
				SELECT COUNT(DISTINCT c.rfq_id)
				FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
				JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON 
					a.id = b.customer_id 
					AND a.company_id = @CompanyId
				JOIN  mpGrowthPackageUnlockRFQsInfo (NOLOCK) c on c.CompanyId = a.company_id
					AND c.IsDeleted = 0
				WHERE 
					b.id = @RunningSubscriptionId
					AND c.UnlockDate  >= b.subscription_start
					AND c.UnlockDate <= b.subscription_end
			)

		END
		ELSE
		BEGIN
			---- getting RFQ count as per company level based on current subscription start and end date range
			SET @UnlockedRfqsCount =
				(
					SELECT COUNT(DISTINCT c.rfq_id)
					FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
					JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON 
					a.id = b.customer_id 
					AND a.company_id = @CompanyId
					JOIN  mpGrowthPackageUnlockRFQsInfo (NOLOCK) c on c.CompanyId = a.company_id
						AND c.IsDeleted = 0
					WHERE 
						b.id = @RunningSubscriptionId
						AND c.UnlockDate  >= b.subscription_start
						AND CAST(c.UnlockDate AS DATE) <=  CAST(DATEADD(dd,30, b.subscription_end) AS DATE)
			   )
		END

		
		SET @MatchedPartCount = 
		(
			SELECT 
				COUNT(c.part_category_id) MatchedPartCount
			FROM mp_rfq					(NOLOCK) a
			LEFT JOIN mp_rfq_parts		(NOLOCK) b ON a.rfq_id = b.rfq_id AND b.status_id  = 2
			LEFT JOIN mp_gateway_subscription_company_processes  (NOLOCK) c ON b.part_category_id = c.part_category_id AND c.company_id = @CompanyId  AND c.is_active = 1
 			WHERE  
				a.rfq_id = @RfqId
			GROUP BY a.rfq_id
		)

		SET @ActionForGrowthPackage = 
		(
			CASE	
				WHEN @IsRfqUnlocked IS NOT NULL  THEN 'No Action'
				WHEN @UnlockedRfqsCount = 3 OR @NDALevel = 2 THEN 'Upgrade to Quote'
				WHEN @UnlockedRfqsCount < 3 AND @MatchedPartCount = 0  THEN 'Upgrade to Quote'
				ELSE 'Unlock Rfq Button'
			END
		
		)

		IF @NDALevel = 1 
		BEGIN

			SET @RfqAccessInfo =
			(
				SELECT 
					CASE 
						WHEN @IsCustomNDA > 0 THEN CAST('false' AS BIT)
						WHEN @ActionForGrowthPackage IN  ('Upgrade to Quote' , 'Unlock Rfq Button' ) THEN CAST('false' AS BIT)
						WHEN @ActionForGrowthPackage IN  ('No Action') AND @IsNDAAcceptedBySupplier IS  NULL THEN CAST('true' AS BIT)
						WHEN @ActionForGrowthPackage IN  ('No Action') AND @IsNDAAcceptedBySupplier IS NOT NULL THEN CAST('false' AS BIT)
					END AS showNDA1Modal
					,CAST('false' AS BIT) AS showNDA2Modal
					,CASE WHEN @IsCustomNDA > 0 AND @IsNDAAcceptedBySupplier IS  NULL AND @ActionForGrowthPackage IN  ('No Action') THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END isCustomNDA
					,CAST('false' AS BIT) AS showNDA2ModalWarning
					,CASE 
						WHEN @ActionForGrowthPackage IN  ('Upgrade to Quote' , 'Unlock Rfq Button' ) THEN CAST('false' AS BIT)
						WHEN @ActionForGrowthPackage IN  ('No Action') AND @IsNDAAcceptedBySupplier IS NULL THEN CAST('false' AS BIT)
						WHEN @ActionForGrowthPackage IN  ('No Action') AND @IsNDAAcceptedBySupplier IS NOT NULL THEN CAST('true' AS BIT)
					END AS isFileDownloadable
				FOR JSON PATH  , INCLUDE_NULL_VALUES , WITHOUT_ARRAY_WRAPPER 
			)
		END

		IF @NDALevel = 2 
		BEGIN

			SET @RfqAccessInfo =
			(
				SELECT 
					CAST('false' AS BIT) AS showNDA1Modal 
					,CAST('false' AS BIT) AS showNDA2Modal
					,CAST('false' AS BIT) AS isCustomNDA
					,CAST('false' AS BIT) AS showNDA2ModalWarning
					,CAST('false' AS BIT) AS isFileDownloadable
				FOR JSON PATH  , INCLUDE_NULL_VALUES , WITHOUT_ARRAY_WRAPPER 
			)
		END

	END

	-- for growth users hide NDA 1 Modal / NDA2 Modal  and disable file download
	IF @AccountType IN (85,86)
	BEGIN

		SET @MatchedPartCount = 
		(
			SELECT 
				COUNT(c.part_category_id) MatchedPartCount
			FROM mp_rfq					(NOLOCK) a
			LEFT JOIN mp_rfq_parts		(NOLOCK) b ON a.rfq_id = b.rfq_id AND b.status_id  = 2
			LEFT JOIN mp_gateway_subscription_company_processes  (NOLOCK) c ON b.part_category_id = c.part_category_id AND c.company_id = @CompanyId  AND c.is_active = 1
 			WHERE  
				a.rfq_id = @RfqId
			GROUP BY a.rfq_id
		)

		IF @NDALevel = 1 
		BEGIN

			SET @RfqAccessInfo =
			(
				SELECT 
					CASE 
						WHEN @IsCustomNDA > 0 THEN CAST('false' AS BIT)
						WHEN @IsSubscriptionSupplier = 1  AND @MatchedPartCount > 0 AND @IsNDAAcceptedBySupplier IS  NULL  THEN CAST('true' AS BIT)
						ELSE CAST('false' AS BIT)
					END AS showNDA1Modal
					,CAST('false' AS BIT) AS showNDA2Modal
					,CASE WHEN @IsCustomNDA > 0 AND @IsNDAAcceptedBySupplier IS  NULL AND @IsSubscriptionSupplier = 1  AND @MatchedPartCount > 0 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END isCustomNDA
					,CAST('false' AS BIT) AS showNDA2ModalWarning
					,CASE 
						WHEN @IsSubscriptionSupplier = 1  AND @MatchedPartCount > 0 AND @IsNDAAcceptedBySupplier IS  NOT NULL  THEN CAST('true' AS BIT)
						ELSE CAST('false' AS BIT)						
					END AS isFileDownloadable
				FOR JSON PATH  , INCLUDE_NULL_VALUES , WITHOUT_ARRAY_WRAPPER 
			)
		END

		IF @NDALevel = 2 
		BEGIN

			SET @RfqAccessInfo =
			(
				SELECT 
					CAST('false' AS BIT) AS showNDA1Modal
					,CASE 
						WHEN @IsCustomNDA > 0 THEN CAST('false' AS BIT)
						WHEN @IsSubscriptionSupplier = 1  AND @MatchedPartCount > 0 AND @IsNDAAcceptedBySupplier IS  NULL  THEN CAST('true' AS BIT)
						ELSE CAST('false' AS BIT)
					END AS showNDA2Modal
					,CASE WHEN @IsCustomNDA > 0 AND @IsNDAAcceptedBySupplier IS  NULL AND @IsSubscriptionSupplier = 1  AND @MatchedPartCount > 0 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END isCustomNDA
					,CASE 
						WHEN @IsSubscriptionSupplier = 1  AND @MatchedPartCount > 0 AND @IsNDAAcceptedBySupplier IS  NOT NULL  AND @IsNDAApprovedByBuyer IS NULL THEN CAST('true' AS BIT)
						ELSE CAST('false' AS BIT)						
					 END AS showNDA2ModalWarning
					,CASE 
						WHEN @IsSubscriptionSupplier = 1  AND @MatchedPartCount > 0 AND @IsNDAAcceptedBySupplier IS  NOT NULL  AND @IsNDAApprovedByBuyer = 1 THEN CAST('true' AS BIT)
						ELSE CAST('false' AS BIT)						
					END AS isFileDownloadable
				FOR JSON PATH  , INCLUDE_NULL_VALUES , WITHOUT_ARRAY_WRAPPER 
			)
		END

	END


	SELECT 
		@RfqAccessInfo	AS RfqAccessInfo 
		, @RfqId		AS RfqId
		, @SupplierId	AS SupplierId
		, @CompanyId	AS CompanyId 
		, @AccountType	AS AccountType
		, @NDALevel		AS NDALevel
		, @IsCustomNDA	AS IsCustomNDA
		, @IsRfqUnlocked AS IsRfqUnlocked
		, @ActionForGrowthPackage AS ActionForGrowthPackage
		, @UnlockedRfqsCount AS UnlockedRfqsCount
		, @IsNDAAcceptedBySupplier AS IsNDAAcceptedBySupplier
		, @IsNDAApprovedByBuyer AS IsNDAApprovedByBuyer
		, @IsSubscriptionSupplier AS IsSubscriptionSupplier
		, @MatchedPartCount AS MatchedPartCount



END
GO
PRINT N'Altering Procedure [dbo].[proc_get_rpt_UsersTermAcceptanceDetails]...';


GO
/*
 This SP data used in xls document for user review who Who_Accepted_Or_Declined terms and condition
 */
 -- EXEC [proc_get_rpt_UsersTermAcceptanceDetails]
 ALTER PROCEDURE [dbo].[proc_get_rpt_UsersTermAcceptanceDetails]
 AS
 SET NOCOUNT ON
 BEGIN

	SET NOCOUNT ON

	SELECT DISTINCT
		   c.name[Company Name]
		 , b.Email [Email]
		 , FORMAT (b.Modify_On, 'd','us')  [Accepeted or Declined Date] 
		 , CASE WHEN Is_Acceptances = 1 THEN 'Accepted'
			   WHEN  Is_Acceptances = 0 THEN 'Declined'
			   ELSE 'No Response'
			   END AS [Terms Condition Status]
		 , CASE WHEN Who_Accepted_Or_Declined = 1 THEN 'Buyer'
			   WHEN  Who_Accepted_Or_Declined = 0 THEN 'Manufacturer'
			   END AS [Who_Accepted_Or_Declined]
	FROM mpNewTermAcceptances (NOLOCK)   b 
	JOIN AspNetUsers (NOLOCK) a  ON b.Email = a.Email
	JOIN mp_contacts (NOLOCK) d ON a.id = d.user_id and d.IsTestAccount= 0 
	JOIN mp_companies(NOLOCK) c on d.company_id = c.company_id
	WHERE Is_Acceptances IS NOT NULL
	ORDER BY [Email]

  END
GO
PRINT N'Altering Procedure [dbo].[proc_get_SupplierPublishProfileStatus]...';


GO

/*
	EXEC proc_get_SupplierPublishProfileStatus  @CompanyId = 1720706
*/

ALTER PROCEDURE [dbo].[proc_get_SupplierPublishProfileStatus]
(
	@CompanyId	INT
)
AS
BEGIN

	-- M2-3900 M - Publish my profile decision modal-DB 
	SET NOCOUNT ON

	DECLARE @ProfileStatusId AS INT = (SELECT ProfileStatus FROM mp_companies (NOLOCK) WHERE company_id = @CompanyId)
	DECLARE @IsTestAccount AS BIT = 
		CASE WHEN (SELECT SUM(ISNULL(CONVERT(SMALLINT,IsTestAccount),0)) FROM mp_contacts (NOLOCK) WHERE company_id = @CompanyId) > 0 THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END
	
	
	-- when account is test then show public view button = disable
	IF @IsTestAccount = 1
	BEGIN

		SELECT 
			CAST(1 AS BIT) AS IsProfileComplete 
			, CAST(1 AS BIT) AS IsSubmittedForPublish 
			, CAST(1 AS BIT) AS IsAbleToViewPublicProfile 
			, CAST(0 AS BIT) AS IsProfileApprovedByVision

	END
	ELSE 
	BEGIN

		-- when account is not test and profile is incomplete then show publish button = disable
		IF @ProfileStatusId IN (230)
		BEGIN

			SELECT 
				CAST(0 AS BIT) AS IsProfileComplete 
				, CAST(0 AS BIT) AS IsSubmittedForPublish 
				, CAST(0 AS BIT) AS IsAbleToViewPublicProfile 
				, CAST(0 AS BIT) AS IsProfileApprovedByVision

		END
		-- when account is not test and profile is complete then show publish button = enable (yet to send for approval or rejected by vision)
		ELSE IF @ProfileStatusId IN (231,233)
		BEGIN

			SELECT 
				CAST(1 AS BIT) AS IsProfileComplete 
				, CAST(0 AS BIT) AS IsSubmittedForPublish 
				, CAST(0 AS BIT) AS IsAbleToViewPublicProfile 
				, CAST(0 AS BIT) AS IsProfileApprovedByVision

		END
		-- when account is not test and profile is complete when send for approval then show public profile button = disable
		ELSE IF @ProfileStatusId IN (232)
		BEGIN

			SELECT 
				CAST(1 AS BIT) AS IsProfileComplete 
				, CAST(1 AS BIT) AS IsSubmittedForPublish 
				, CAST(1 AS BIT) AS IsAbleToViewPublicProfile 
				, CAST(0 AS BIT) AS IsProfileApprovedByVision

		END
		-- when account is not test and profile is complete and approved by vision then show public profile button = enable
		ELSE IF @ProfileStatusId IN (234)
		BEGIN

			SELECT 
				CAST(1 AS BIT) AS IsProfileComplete 
				, CAST(1 AS BIT) AS IsSubmittedForPublish 
				, CAST(1 AS BIT) AS IsAbleToViewPublicProfile 
				, CAST(1 AS BIT) AS IsProfileApprovedByVision

		END

	END


END
GO
PRINT N'Altering Procedure [dbo].[proc_get_vision_action_tracker_community]...';


GO

------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------

/*

select * from aspnetusers where email = 'testsupplieremail@yopmail.com'

truncate table mpcommunityratings

INSERT INTO mpCommunityRatings
(IpAddress ,SenderCompany ,SenderEmail ,FirstName ,LastName ,IsBuyer ,ReceiverCompany ,ReceiverEmail ,Rating
,Comment ,RatingDate)
SELECT '152.57.105.80' , 'Kalsi Pvt Ltd.' , 'ikalsi@delaplex.com' , 'Inderpreet Singh' , 'Kalsi' ,1 , 'SupplierQA' , 'supplierqa@yopmail.com' , 5 , 'Satisfied customer' , GETUTCDATE()


select * from mpcommunityratings

EXEC [proc_get_vision_action_tracker_community]
	@TrackerType = 'All'   -- All ,CatchAll , DirectoryRfqs , SimpleRFQs , Ratings
	,@ByDate	= NULL
	,@TimeRange	= NULL
	,@Search		=NULL
	,@PageNumber	= 1
	,@PageSize		= 20
	,@IsOrderByDesc = 'True'
	,@OrderBy = NULL
	,@IsCommunityAllRfqsReleased	 = 0
	,@IsCommunityAllRfqsNotReleased	 = 0
	,@IsCommunityAllRfqsClosed		 = 0
	,@StatusId						 = -1  -- Values -1, 0 ,1 ,2

exec proc_get_vision_action_tracker_community 
@TrackerType=N'Ratings'
,@ByDate=default
,@TimeRange=default
,@Search=N''
,@PageNumber=1
,@PageSize=24
,@IsOrderByDesc=1
,@OrderBy=default
,@IsCommunityAllRfqsReleased=0
,@IsCommunityAllRfqsNotReleased=0
,@IsCommunityAllRfqsClosed=0
,@StatusId=-1

*/
ALTER PROCEDURE [dbo].[proc_get_vision_action_tracker_community]
(
	@TrackerType					VARCHAR(100)
	,@ByDate						DATE	=NULL
	,@TimeRange						INT		=NULL
	,@Search						VARCHAR(1000)		=NULL
	,@PageNumber					INT		= 1
	,@PageSize						INT		= 24
	,@IsOrderByDesc					BIT		='FALSE'
	,@OrderBy						VARCHAR(100)	= NULL
	,@IsCommunityAllRfqsReleased	BIT = NULL
	,@IsCommunityAllRfqsNotReleased	BIT = NULL
	,@IsCommunityAllRfqsClosed		BIT = NULL	
	,@StatusId						INT = NULL	
)
AS
BEGIN

	SET NOCOUNT ON

	/* Feb 23, 2021:	M2-3670 Directory RFQ - New Simple RFQ Form data */

	DROP TABLE IF EXISTS #tmp_vision_action_tracker_community
	DROP TABLE IF EXISTS #tmp_vision_action_tracker_community_CatchAll
	DROP TABLE IF EXISTS #tmp_vision_action_tracker_community_DirectoryRfqs
	DROP TABLE IF EXISTS #tmp_vision_action_tracker_community_DirectRfqs
	/* M2-3994 Vision - Action Tracker - Add Ratings and Reviews tab to Community Users - API */
	DROP TABLE IF EXISTS #tmp_vision_action_tracker_community_Ratings
	/**/
	DROP TABLE IF EXISTS #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqReleased	
	DROP TABLE IF EXISTS #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqClosed
	
	 
	CREATE TABLE #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqReleased ([Value] INT)
	CREATE TABLE #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqClosed ([Value] INT)
	CREATE TABLE #tmp_vision_action_tracker_community
	(
		Type						VARCHAR(50) NULL
		,Id							INT NULL
		,LeadDate					VARCHAR(50) NULL
		,LeadDateTime				DATETIME NULL
		,BuyerId					INT NULL
		,Buyer						VARCHAR(150) NULL
		,BuyerCompany				VARCHAR(150) NULL
		,BuyerEmail					VARCHAR(150) NULL
		,BuyerPhoneNo				VARCHAR(150) NULL
		,EmailSubject				VARCHAR(500) NULL
		,EmailBody					VARCHAR(MAX) NULL
		,EmailAttachment			BIT NULL
		,LeadId						INT NULL
		,SupplierId					INT NULL
		,StatusId					INT NULL
		,SupplierCompanyId			INT NULL
		,SupplierCompany			VARCHAR(150) NULL
		,SalesloftPeopleId			INT NULL
		,RfqId						INT NULL
		,RfqStatus					VARCHAR(150) NULL
		,BuyerNpsScoreCode			DECIMAL(18,2) NULL
		,ActionTakenBy				VARCHAR(150) NULL
		,ActionTakenDate			DATETIME NULL
		,rfq_created_on				DATETIME NULL
		,IsCommunityRfqReleased		BIT NULL
		,IsCommunityRfqClosed		BIT NULL
		,IsMfgCommunityRfq			BIT NULL
		,IsQMSEnabled				BIT NULL
		,CommunityRfqReleaseDate	DATETIME NULL
		,CommunityRfqReleaseById	INT NULL
		,CommunityRfqReleaseBy		VARCHAR(150) NULL	
		,CommunityRfqClosedDate		DATETIME NULL
		,CommunityRfqClosedById		INT NULL
		,CommunityRfqClosedBy		VARCHAR(150) NULL
		,WantsMp					BIT NULL
		,IsCommunityRatingApproved	BIT NULL
		,CommunityRatingApprovedDeclineBy	VARCHAR(150) NULL
		,CommunityRatingApprovedDeclineDate	DATETIME NULL
		,TotalRecordCount			INT NULL
                ,MessageID INT NULL  --- Added with M2-4525
	)


	IF (@OrderBy IS NULL OR  @OrderBy = '' )
		SET @OrderBy  = 'LeadDateTime'

		
	IF @IsCommunityAllRfqsNotReleased = 0 AND @IsCommunityAllRfqsReleased = 0 AND @IsCommunityAllRfqsClosed = 0
	BEGIN

		INSERT INTO #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqReleased
		SELECT 0 [Value] 
		UNION
		SELECT 1 [Value]	

		INSERT INTO #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqClosed
		SELECT 0 [Value] 
		UNION
		SELECT 1 [Value]	

	END
	ELSE IF @IsCommunityAllRfqsNotReleased = 1 AND @IsCommunityAllRfqsReleased = 0 AND @IsCommunityAllRfqsClosed = 0
	BEGIN

		INSERT INTO #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqReleased
		SELECT 0 [Value]

		INSERT INTO #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqClosed
		SELECT 0 [Value] 
		UNION
		SELECT 1 [Value]	

	END					
	ELSE IF @IsCommunityAllRfqsNotReleased = 0 AND @IsCommunityAllRfqsReleased = 1 AND @IsCommunityAllRfqsClosed = 0
	BEGIN

		INSERT INTO #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqReleased
		SELECT 1 [Value] 

		INSERT INTO #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqClosed
		SELECT 0 [Value] 
		UNION
		SELECT 1 [Value]	

	END	
	ELSE IF @IsCommunityAllRfqsNotReleased = 0 AND @IsCommunityAllRfqsReleased = 0 AND @IsCommunityAllRfqsClosed = 1
	BEGIN

		INSERT INTO #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqReleased
		SELECT 0 [Value]
		UNION
		SELECT 1 [Value]

		INSERT INTO #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqClosed
		SELECT 1 [Value] 

	END		
	

	
	IF @TrackerType = 'CatchAll'
	BEGIN

		INSERT INTO #tmp_vision_action_tracker_community
		SELECT 
			'Catch All'			AS [Type]
			,Id				AS Id
			--,CAST('false' AS BIT)				AS IsBuyer
			--,CAST('false' AS BIT)				AS UnVal
			,
			(	CASE 
					WHEN DATEDIFF(MINUTE,a.EmailMessageDate ,GETUTCDATE()) < 60		THEN CONVERT(VARCHAR(100),DATEDIFF(MINUTE,a.EmailMessageDate ,GETUTCDATE())) + ' mins ago'
					WHEN DATEDIFF(HOUR,a.EmailMessageDate ,GETUTCDATE()) < 24	THEN CONVERT(VARCHAR(100),DATEDIFF(HOUR,a.EmailMessageDate ,GETUTCDATE())) + ' hrs ago'
					ELSE  CONVERT(VARCHAR(10),FORMAT(a.EmailMessageDate , 'd', 'en-US' )) + ' ' + REVERSE(SUBSTRING(REVERSE(CONVERT(VARCHAR(20),a.EmailMessageDate )), 0 , CHARINDEX(' ',REVERSE(CONVERT(VARCHAR(20),a.EmailMessageDate )))))
				END
			)	AS LeadDate
			,EmailMessageDate	AS LeadDateTime
			,0					AS BuyerId
			,(BuyerFirstName+' '+ BuyerLastName) AS Buyer
			--,NULL				AS BuyerCompanyId
			,BuyerCompanyName	AS BuyerCompany
			,BuyerEmail			AS BuyerEmail
			,BuyerPhone			AS BuyerPhoneNo
   --,NULL    AS EmailSubject  
   --,NULL    AS EmailBody  
   , EmailSubject  --- modified with M2-4525
   , EmailBody     --- modified with M2-4525
			,(CASE WHEN  MessageFileId > 0 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END  )    AS EmailAttachment
			,Id					AS LeadId
			--,NULL				AS LeadEmailId
			--,NULL				AS MessageId
			,NULL				AS SupplierId
			,NULL				AS StatusId
			,NULL				AS SupplierCompanyId 
			,SupplierCompanyName	AS SupplierCompany
			--,BuyerFirstName			AS BuyerFirstName 
			--,BuyerLastName			AS BuyerLastName
			,NULL					AS SalesloftPeopleId
			,NULL					AS RfqId
			,NULL				AS RfqStatus
			,NULL				AS BuyerNpsScoreCode
			--,NULL				AS SourcingAdvisorId
			--,NULL				AS SourcingAdvisor
			,NULL				AS ActionTakenBy
			,NULL				AS ActionTakenDate
			--,NULL				AS MarkedById
			--,NULL				AS MarkedBy
			--,NULL				AS MarkedOn
			--,CAST('false' AS BIT)					AS IsMarked
			,NULL				AS rfq_created_on
			,CAST('false' AS BIT)					AS IsCommunityRfqReleased
			,CAST('false' AS BIT)					AS IsCommunityRfqClosed
			,CAST('false' AS BIT)					AS IsMfgCommunityRfq
			,CAST('false' AS BIT)					AS IsQMSEnabled
			,NULL				AS CommunityRfqReleaseDate
			,NULL				AS CommunityRfqReleaseById
			,NULL				AS CommunityRfqReleaseBy
			,NULL				AS CommunityRfqClosedDate
			,NULL				AS CommunityRfqClosedById
			,NULL				AS CommunityRfqClosedBy
			,CAST('false' AS BIT)					AS WantsMp
			, NULL		AS IsCommunityRatingApproved
			, NULL		AS CommunityRatingApprovedDeclineBy
			, NULL		AS CommunityRatingApprovedDeclineDate
			,COUNT(1) OVER () AS TotalRecordCount
   ,MessageFileId AS MessageId --- Added with M2-4525
		FROM mpCommunityExternalDirectoryMessages  (NOLOCK) a
		WHERE 	
            BuyerEmail <> 'zimneth05@gmail.com'	
            AND 
			(
				(BuyerCompanyName	 LIKE '%'+ISNULL(@Search,'')+'%')
				OR
				(BuyerFirstName+' '+ BuyerLastName)  LIKE  '%'+ISNULL(@Search,'')+'%'
				OR
				(BuyerEmail LIKE  '%'+ISNULL(@Search,'')+'%')
			)
			AND (CONVERT(DATE,EmailMessageDate) =  CASE WHEN @ByDate IS NULL THEN		CONVERT(DATE,EmailMessageDate) ELSE @ByDate END 	)
			AND (DATEDIFF(HOUR,EmailMessageDate ,GETUTCDATE()) <=  CASE WHEN @TimeRange IS NULL THEN	DATEDIFF(HOUR,EmailMessageDate ,GETUTCDATE()) ELSE @TimeRange END 	)
		ORDER BY 
				CASE  WHEN @IsOrderByDesc =  1 AND @OrderBy = 'LeadDateTime' THEN   EmailMessageDate END DESC
				,CASE  WHEN @IsOrderByDesc =  0 AND @OrderBy = 'LeadDateTime' THEN   EmailMessageDate END ASC 
				,CASE  WHEN @IsOrderByDesc =  1 AND @OrderBy = 'Buyer' THEN   (BuyerFirstName+' '+ BuyerLastName) END DESC 
				,CASE  WHEN @IsOrderByDesc =  0 AND @OrderBy = 'Buyer' THEN   (BuyerFirstName+' '+ BuyerLastName) END ASC 
		OFFSET @PageSize * (@PageNumber- 1) ROWS
		FETCH NEXT @PageSize ROWS ONLY

		SELECT * FROM #tmp_vision_action_tracker_community

	END

	IF @TrackerType = 'DirectoryRfqs'
	BEGIN
		
		INSERT INTO #tmp_vision_action_tracker_community
		SELECT * FROM 
		(
			SELECT DISTINCT 
				'Directory RFQs'			AS [Type]
				,a.rfq_id		AS Id
				--,CAST('false' AS BIT)				AS IsBuyer
				--,CAST('false' AS BIT)				AS UnVal
				,
				(	CASE 
						WHEN DATEDIFF(MINUTE,a.rfq_created_on ,GETUTCDATE()) < 60		THEN CONVERT(VARCHAR(100),DATEDIFF(MINUTE,a.rfq_created_on ,GETUTCDATE())) + ' mins ago'
						WHEN DATEDIFF(HOUR,a.rfq_created_on ,GETUTCDATE()) < 24	THEN CONVERT(VARCHAR(100),DATEDIFF(HOUR,a.rfq_created_on ,GETUTCDATE())) + ' hrs ago'
						ELSE  CONVERT(VARCHAR(10),FORMAT(a.rfq_created_on , 'd', 'en-US' )) + ' ' + REVERSE(SUBSTRING(REVERSE(CONVERT(VARCHAR(20),a.rfq_created_on )), 0 , CHARINDEX(' ',REVERSE(CONVERT(VARCHAR(20),a.rfq_created_on )))))
					END
				)	AS LeadDate
				,rfq_created_on	AS LeadDateTime
				,a.contact_id		AS BuyerId
				,(x.first_name +' '+ x.last_name) AS Buyer
				--,x.company_id		AS BuyerCompanyId
				,z.name				AS BuyerCompany
				,y.email			AS BuyerEmail
				,a1.communication_value						AS BuyerPhoneNo
				,'RFQ #'+ CONVERT(VARCHAR(150), a.rfq_id) 	AS EmailSubject
				,b1.description				AS EmailBody
				,CAST('true' AS BIT)    AS EmailAttachment
				,NULL					AS LeadId
				--,NULL				AS LeadEmailId
				--,NULL				AS MessageId
				,(SELECT TOP 1 contact_id FROM mp_contacts  (NOLOCK)  WHERE company_id = e1.company_id  AND is_admin = 1)				AS SupplierId
				,NULL				AS StatusId
				,e1.company_id			AS SupplierCompanyId
				,(SELECT TOP 1 name FROM mp_companies  (NOLOCK)  WHERE company_id = e1.company_id  )	AS SupplierCompany
				--,x.first_name			AS BuyerFirstName
				--,x.last_name			AS BuyerLastName
				,NULL					AS SalesloftPeopleId
				,a.rfq_id				AS RfqId
				,b1.description			AS RfqStatus
				,c1.no_of_stars			AS BuyerNpsScoreCode
				--,d1.contact_id			AS SourcingAdvisorId
				--,d1.last_name			AS SourcingAdvisor
				,NULL				AS ActionTakenBy
				,NULL				AS ActionTakenDate
				--,NULL				AS MarkedById
				--,NULL				AS MarkedBy
				--,NULL				AS MarkedOn
				--,CAST('false' AS BIT)					AS IsMarked
				,a.rfq_created_on	AS rfq_created_on
				,CASE WHEN IsCommunityRfqReleased = 0 THEN CAST('false' AS BIT)	ELSE CAST('true' AS BIT) END IsCommunityRfqReleased
				,CASE WHEN IsCommunityRfqClosed = 0 THEN CAST('false' AS BIT)	ELSE CAST('true' AS BIT) END	IsCommunityRfqClosed
				,CASE WHEN IsMfgCommunityRfq = 0 THEN CAST('false' AS BIT)	ELSE CAST('true' AS BIT) END IsMfgCommunityRfq
				,(SELECT CASE WHEN is_mqs_enable = 1 THEN CAST('true' AS bit) ELSE CAST('false' AS bit) END  FROM mp_companies  (NOLOCK)  WHERE company_id = e1.company_id ) AS IsQMSEnabled
				,CommunityRfqReleaseDate
				,CommunityRfqReleaseBy AS CommunityRfqReleaseById
				,(f1.first_name +' '+f1.last_name )				AS CommunityRfqReleaseBy
				,CommunityRfqClosedDate
				,CommunityRfqClosedBy AS CommunityRfqClosedById
				,(g1.first_name +' '+g1.last_name )					AS CommunityRfqClosedBy
				,CAST('false' AS BIT)					AS WantsMp
				, NULL		AS IsCommunityRatingApproved
				, NULL		AS CommunityRatingApprovedDeclineBy
				, NULL		AS CommunityRatingApprovedDeclineDate
				,COUNT(1) OVER () AS TotalRecordCount
	,NULL AS MessageId --- Added with M2-4525
			FROM mp_rfq  (NOLOCK) a
			LEFT JOIN mp_contacts	x	(NOLOCK) ON a.contact_id = x.contact_id AND  x.is_buyer = 1
			LEFT JOIN aspnetusers	y	(NOLOCK) ON x.user_id = y.id
			LEFT JOIN mp_companies	z	(NOLOCK) ON x.company_id = z.company_id  AND x.contact_id <>0 
			LEFT JOIN mp_communication_details  a1 (NOLOCK) ON x.contact_id = a1.contact_id AND a1.communication_type_id = 1
			LEFT JOIN mp_mst_rfq_buyerstatus	b1 (NOLOCK) ON a.rfq_status_id = b1.rfq_buyerstatus_id 
			LEFT JOIN mp_star_rating			c1 (NOLOCK) ON z.company_id = c1.company_id 
			LEFT JOIN mp_contacts				d1 (NOLOCK)	ON z.assigned_sourcingadvisor = d1.contact_id 
			LEFT JOIN mp_rfq_supplier			e1 (NOLOCK)	ON a.rfq_id = e1.rfq_id 
			LEFT JOIN mp_contacts				f1 (NOLOCK) ON a.CommunityRfqReleaseBy = f1.contact_id
			LEFT JOIN mp_contacts				g1 (NOLOCK) ON a.CommunityRfqClosedBy = g1.contact_id
			WHERE IsMfgCommunityRfq = 1
			AND a.rfq_status_id >=2  AND a.rfq_status_id != 13
			AND a.IsCommunityRfqReleased IN (SELECT * FROM #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqReleased)
			AND a.IsCommunityRfqClosed IN (SELECT * FROM #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqClosed)
			AND 
			(
				(z.name	 LIKE '%'+ISNULL(@Search,'')+'%')
				OR
				(x.first_name +' '+ x.last_name)  LIKE  '%'+ISNULL(@Search,'')+'%'
				OR
				(y.email LIKE  '%'+ISNULL(@Search,'')+'%')
			)
			AND (CONVERT(DATE,rfq_created_on) =  CASE WHEN @ByDate IS NULL THEN		CONVERT(DATE,rfq_created_on) ELSE @ByDate END 	)
			AND (DATEDIFF(HOUR,rfq_created_on ,GETUTCDATE()) <=  CASE WHEN @TimeRange IS NULL THEN	DATEDIFF(HOUR,rfq_created_on ,GETUTCDATE()) ELSE @TimeRange END 	)
		) a
		ORDER BY 
				CASE  WHEN @IsOrderByDesc =  1 AND @OrderBy = 'LeadDateTime' THEN   a.LeadDateTime END DESC
				,CASE  WHEN @IsOrderByDesc =  0 AND @OrderBy = 'LeadDateTime' THEN   a.LeadDateTime END ASC 
				,CASE  WHEN @IsOrderByDesc =  1 AND @OrderBy = 'Buyer' THEN   Buyer END DESC 
				,CASE  WHEN @IsOrderByDesc =  0 AND @OrderBy = 'Buyer' THEN   Buyer END ASC 
		OFFSET @PageSize * (@PageNumber- 1) ROWS
		FETCH NEXT @PageSize ROWS ONLY

		SELECT * FROM #tmp_vision_action_tracker_community

	END

	IF @TrackerType = 'SimpleRFQs'
	BEGIN
		
		INSERT INTO #tmp_vision_action_tracker_community
		SELECT 
			'Simple RFQs'	AS [Type]
			,a.Id		AS Id
			--,CAST('false' AS BIT)				AS IsBuyer
			--,CAST('false' AS BIT)				AS UnVal
			,
			(	CASE 
					WHEN DATEDIFF(MINUTE,a.CreatedOn ,GETUTCDATE()) < 60		THEN CONVERT(VARCHAR(100),DATEDIFF(MINUTE,a.CreatedOn ,GETUTCDATE())) + ' mins ago'
					WHEN DATEDIFF(HOUR,a.CreatedOn ,GETUTCDATE()) < 24	THEN CONVERT(VARCHAR(100),DATEDIFF(HOUR,a.CreatedOn ,GETUTCDATE())) + ' hrs ago'
					ELSE  CONVERT(VARCHAR(10),FORMAT(a.CreatedOn , 'd', 'en-US' )) + ' ' + REVERSE(SUBSTRING(REVERSE(CONVERT(VARCHAR(20),a.CreatedOn )), 0 , CHARINDEX(' ',REVERSE(CONVERT(VARCHAR(20),a.CreatedOn )))))
				END
			)	AS LeadDate
			,CreatedOn			AS LeadDateTime
			,ISNULL(x.contact_id,0)		AS BuyerId
			--,(x.first_name +' '+ x.last_name) AS Buyer
			/* M2-4336 Adding Fname and Lname from community portal simple RFQ table */
			,IIF(ISNULL(X.first_name,'')= '' AND ISNULL(X.last_name,'') ='',ISNULL(a.firstname,'') +' '+ ISNULL(a.lastname,''),ISNULL(x.first_name,'') +' '+ ISNULL(x.last_name,'')) AS Buyer
			--,x.company_id		AS BuyerCompanyId
			,z.name				AS BuyerCompany
			,COALESCE(y.email,a.BuyerEmail)						AS BuyerEmail
			,COALESCE(a1.communication_value,a.BuyerPhone)		AS BuyerPhoneNo
			,'Simple RFQ: ' + Capability +' - '+ Material 		AS EmailSubject
			,PartDesc				AS EmailBody
			----below code commented with M2-4873
			--,CASE WHEN PartFileId > 0 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END     AS EmailAttachment
			---- added below code with M2-4873
			, (SELECT TOP 1 CASE WHEN g1.CommunityDirectRfqId IS NOT NULL THEN  CAST('true' AS BIT) ELSE CAST('false' AS BIT) END 
			   FROM mpCommunityDirectRfqsFiles g1(NOLOCK)  WHERE g1.CommunityDirectRfqId = a.id )    AS EmailAttachment 
			,e1.lead_id			AS LeadId
			--,NULL				AS LeadEmailId
			--,NULL				AS MessageId
			,(SELECT TOP 1 contact_id FROM mp_contacts  (NOLOCK)  WHERE company_id = a.SupplierCompanyId  AND is_admin = 1)				AS SupplierId
			,CASE WHEN e1.status_id IN (0,1,2) THEN CONVERT(INT,e1.status_id) ELSE NULL END AS StatusId
			,a.SupplierCompanyId	AS SupplierCompanyId
			,(SELECT TOP 1 name FROM mp_companies  (NOLOCK)  WHERE company_id = a.SupplierCompanyId  )	AS SupplierCompany
			--,x.first_name			AS BuyerFirstName
			--,x.last_name			AS BuyerLastName
			,NULL					AS SalesloftPeopleId
			,NULL					AS RfqId
			,NULL					AS RfqStatus
			,c1.no_of_stars			AS BuyerNpsScoreCode
			--,d1.contact_id			AS SourcingAdvisorId
			--,d1.last_name			AS SourcingAdvisor
			,(f1.first_name +' '+ f1.last_name)	AS ActionTakenBy
			,e1.ModifiedOn						AS ActionTakenDate
			--,NULL				AS MarkedById
			--,NULL				AS MarkedBy
			--,NULL				AS MarkedOn
			--,CAST('false' AS BIT)					AS IsMarked
			,NULL				AS rfq_created_on
			,CAST('false' AS BIT)					AS IsCommunityRfqReleased
			,CAST('false' AS BIT)					AS IsCommunityRfqClosed
			,CAST('false' AS BIT)					AS IsMfgCommunityRfq
			,(SELECT CASE WHEN is_mqs_enable = 1 THEN CAST('true' AS bit) ELSE CAST('false' AS bit) END  FROM mp_companies  (NOLOCK)  WHERE company_id = a.SupplierCompanyId ) AS IsQMSEnabled
			,NULL				AS CommunityRfqReleaseDate
			,NULL				AS CommunityRfqReleaseBy
			,NULL				AS CommunityRfqReleaseBy
			,NULL				AS CommunityRfqClosedDate
			,NULL				AS CommunityRfqClosedBy
			,NULL				AS CommunityRfqClosedBy
			,CASE WHEN WantsMP = 0 THEN CAST('false' AS BIT) WHEN WantsMP = 1 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END				AS WantsMp
			, NULL		AS IsCommunityRatingApproved
			, NULL		AS CommunityRatingApprovedDeclineBy
			, NULL		AS CommunityRatingApprovedDeclineDate
			,COUNT(1) OVER () AS TotalRecordCount
   ,NULL AS MessageId --- Added with M2-4525
		FROM [mpCommunityDirectRfqs]  (NOLOCK) a
		LEFT JOIN aspnetusers	y	(NOLOCK) ON a.BuyerEmail = y.Email
		LEFT JOIN mp_contacts	x	(NOLOCK) ON x.user_id = y.id AND  x.is_buyer = 1
		LEFT JOIN mp_companies	z	(NOLOCK) ON x.company_id = z.company_id  AND x.contact_id <>0 
		LEFT JOIN mp_communication_details  a1 (NOLOCK) ON x.contact_id = a1.contact_id AND a1.communication_type_id = 1
		LEFT JOIN mp_star_rating			c1 (NOLOCK) ON z.company_id = c1.company_id 
		LEFT JOIN mp_contacts				d1 (NOLOCK)	ON z.assigned_sourcingadvisor = d1.contact_id 
		LEFT JOIN mp_lead					e1 (NOLOCK) ON a.LeadId = e1.lead_id
		LEFT JOIN mp_contacts				f1 (NOLOCK) ON e1.ModifiedBy = f1.contact_id 
		WHERE  
			(
				COALESCE(y.email,a.BuyerEmail)  LIKE  '%'+ISNULL(@Search,'')+'%'
			)
		AND ISNULL(e1.status_id,-1) = CASE WHEN @StatusId = -1 THEN ISNULL(e1.status_id,-1) ELSE @StatusId END
		AND ISNULL(e1.status_id,-1) <> 2
		AND (CONVERT(DATE,CreatedOn) =  CASE WHEN @ByDate IS NULL THEN		CONVERT(DATE,CreatedOn) ELSE @ByDate END 	)
		AND (DATEDIFF(HOUR,CreatedOn ,GETUTCDATE()) <=  CASE WHEN @TimeRange IS NULL THEN	DATEDIFF(HOUR,CreatedOn ,GETUTCDATE()) ELSE @TimeRange END 	)

		ORDER BY 
				CASE  WHEN @IsOrderByDesc =  1 AND @OrderBy = 'LeadDateTime' THEN   CreatedOn END DESC
				,CASE  WHEN @IsOrderByDesc =  0 AND @OrderBy = 'LeadDateTime' THEN   CreatedOn END ASC 
				,CASE  WHEN @IsOrderByDesc =  1 AND @OrderBy = 'Buyer' THEN   (x.first_name +' '+ x.last_name) END DESC 
				,CASE  WHEN @IsOrderByDesc =  0 AND @OrderBy = 'Buyer' THEN   (x.first_name +' '+ x.last_name) END ASC 
		OFFSET @PageSize * (@PageNumber- 1) ROWS
		FETCH NEXT @PageSize ROWS ONLY

		SELECT * FROM #tmp_vision_action_tracker_community

	END

	/* M2-3994 Vision - Action Tracker - Add Ratings and Reviews tab to Community Users - API */
	IF @TrackerType = 'Ratings'
	BEGIN
		
		INSERT INTO #tmp_vision_action_tracker_community
		SELECT 
			'Ratings'			AS [Type]
			,a.Id				AS Id
			--,CAST('false' AS BIT)				AS IsBuyer
			--,CAST('false' AS BIT)				AS UnVal
			,
			(	CASE 
					WHEN DATEDIFF(MINUTE,a.RatingDate ,GETUTCDATE()) < 60		THEN CONVERT(VARCHAR(100),DATEDIFF(MINUTE,a.RatingDate ,GETUTCDATE())) + ' mins ago'
					WHEN DATEDIFF(HOUR,a.RatingDate ,GETUTCDATE()) < 24	THEN CONVERT(VARCHAR(100),DATEDIFF(HOUR,a.RatingDate ,GETUTCDATE())) + ' hrs ago'
					ELSE  CONVERT(VARCHAR(10),FORMAT(a.RatingDate , 'd', 'en-US' )) + ' ' + REVERSE(SUBSTRING(REVERSE(CONVERT(VARCHAR(20),a.RatingDate )), 0 , CHARINDEX(' ',REVERSE(CONVERT(VARCHAR(20),a.RatingDate )))))
				END
			)	AS LeadDate
			,RatingDate	AS LeadDateTime
			,0					AS BuyerId
			,(a.FirstName+' '+ a.LastName) AS Buyer
			--,NULL				AS BuyerCompanyId
			,SenderCompany		AS BuyerCompany
			,SenderEmail		AS BuyerEmail
			,''				AS BuyerPhoneNo
			,CONVERT(VARCHAR(100),Rating) 	AS EmailSubject
			,CONVERT(VARCHAR(MAX),Comment)	AS EmailBody
			,CAST('false' AS BIT)			AS EmailAttachment
			,NULL				AS LeadId
			--,NULL				AS LeadEmailId
			--,NULL				AS MessageId
			,NULL				AS SupplierId
			,NULL				AS StatusId
			,c.company_id		AS SupplierCompanyId 
			,ReceiverCompany	AS SupplierCompany
			--,BuyerFirstName			AS BuyerFirstName
			--,BuyerLastName			AS BuyerLastName
			,NULL					AS SalesloftPeopleId
			,NULL					AS RfqId
			,''					AS RfqStatus
			,NULL				AS BuyerNpsScoreCode
			--,NULL				AS SourcingAdvisorId
			--,''					AS SourcingAdvisor
			,''				AS ActionTakenBy
			,NULL				AS ActionTakenDate
			--,NULL				AS MarkedById
			--,NULL				AS MarkedBy
			--,NULL				AS MarkedOn
			--,CAST('false' AS BIT)					AS IsMarked
			,NULL				AS rfq_created_on
			,CAST('false' AS BIT)					AS IsCommunityRfqReleased
			,CAST('false' AS BIT)					AS IsCommunityRfqClosed
			,CAST('false' AS BIT)					AS IsMfgCommunityRfq
			,CAST('false' AS BIT)					AS IsQMSEnabled
			,NULL				AS CommunityRfqReleaseDate
			,NULL				AS CommunityRfqReleaseById
			,''					AS CommunityRfqReleaseBy
			,NULL				AS CommunityRfqClosedDate
			,NULL				AS CommunityRfqClosedById
			,''					AS CommunityRfqClosedBy
			,CAST('false' AS BIT)					AS WantsMp
			, IsApproved							AS IsCommunityRatingApproved
			, (f1.first_name +' '+ f1.last_name)	AS CommunityRatingApprovedDeclineBy
			, ApprovedDeclineDate					AS CommunityRatingApprovedDeclineDate
			,COUNT(1) OVER () AS TotalRecordCount
   ,NULL    AS MessageId  ---- Added with M2-4525
		FROM mpCommunityRatings  (NOLOCK) a
		----- Slack issue : include MFG suppliers only in the list so left join are removed from join tables
		LEFT JOIN mp_contacts	 (NOLOCK) f1  ON a.ApprovedDeclineBy = f1.contact_id
		/* M2-5049 LEFT JOIN added in below tables */
		LEFT JOIN aspnetusers	 (NOLOCK) b ON a.ReceiverEmail = b.email
		LEFT JOIN mp_contacts	 (NOLOCK) c ON b.id = c.user_id
		WHERE 		 
			(
				(SenderCompany	 LIKE '%'+ISNULL(@Search,'')+'%')
				OR
				(a.FirstName+' '+ a.LastName)  LIKE  '%'+ISNULL(@Search,'')+'%'
				OR
				(SenderEmail LIKE  '%'+ISNULL(@Search,'')+'%')
			)
			AND (CONVERT(DATE,RatingDate) =  CASE WHEN @ByDate IS NULL THEN		CONVERT(DATE,RatingDate) ELSE @ByDate END 	)
			AND (DATEDIFF(HOUR,RatingDate ,GETUTCDATE()) <=  CASE WHEN @TimeRange IS NULL THEN	DATEDIFF(HOUR,RatingDate ,GETUTCDATE()) ELSE @TimeRange END 	)
		ORDER BY 
				CASE  WHEN @IsOrderByDesc =  1 AND @OrderBy = 'LeadDateTime' THEN   RatingDate END DESC
				,CASE  WHEN @IsOrderByDesc =  0 AND @OrderBy = 'LeadDateTime' THEN   RatingDate END ASC 
				,CASE  WHEN @IsOrderByDesc =  1 AND @OrderBy = 'Buyer' THEN   (a.FirstName+' '+ a.LastName) END DESC 
				,CASE  WHEN @IsOrderByDesc =  0 AND @OrderBy = 'Buyer' THEN   (a.FirstName+' '+ a.LastName) END ASC 
		OFFSET @PageSize * (@PageNumber- 1) ROWS
		FETCH NEXT @PageSize ROWS ONLY


		SELECT * FROM #tmp_vision_action_tracker_community

	END
	/**/


	IF @TrackerType = 'All' 
	BEGIN 
			
		INSERT INTO #tmp_vision_action_tracker_community
			(Type,Id,LeadDate,LeadDateTime,BuyerId,Buyer,BuyerCompany,BuyerEmail,BuyerPhoneNo,EmailSubject,EmailBody
			,EmailAttachment,LeadId , SupplierId,StatusId,SupplierCompanyId,SupplierCompany,SalesloftPeopleId,RfqId,RfqStatus ,BuyerNpsScoreCode
			,ActionTakenBy,ActionTakenDate,rfq_created_on,IsCommunityRfqReleased,	IsCommunityRfqClosed,IsMfgCommunityRfq,IsQMSEnabled
			,CommunityRfqReleaseDate,CommunityRfqReleaseById,CommunityRfqReleaseBy,CommunityRfqClosedDate,	CommunityRfqClosedById,CommunityRfqClosedBy,WantsMp,IsCommunityRatingApproved
   ,CommunityRatingApprovedDeclineBy,CommunityRatingApprovedDeclineDate,MessageID)  
		SELECT DISTINCT 
			'Directory RFQs'AS [Type]
			,a.rfq_id		AS Id
			--,CAST('false' AS BIT)				AS IsBuyer
			--,CAST('false' AS BIT)				AS UnVal
			,
			(	CASE 
					WHEN DATEDIFF(MINUTE,a.rfq_created_on ,GETUTCDATE()) < 60		THEN CONVERT(VARCHAR(100),DATEDIFF(MINUTE,a.rfq_created_on ,GETUTCDATE())) + ' mins ago'
					WHEN DATEDIFF(HOUR,a.rfq_created_on ,GETUTCDATE()) < 24	THEN CONVERT(VARCHAR(100),DATEDIFF(HOUR,a.rfq_created_on ,GETUTCDATE())) + ' hrs ago'
					ELSE  CONVERT(VARCHAR(10),FORMAT(a.rfq_created_on , 'd', 'en-US' )) + ' ' + REVERSE(SUBSTRING(REVERSE(CONVERT(VARCHAR(20),a.rfq_created_on )), 0 , CHARINDEX(' ',REVERSE(CONVERT(VARCHAR(20),a.rfq_created_on )))))
				END
			)	AS LeadDate
			,rfq_created_on	AS LeadDateTime
			,ISNULL(a.contact_id,0)		AS BuyerId
			,(x.first_name +' '+ x.last_name) AS Buyer
			--,x.company_id		AS BuyerCompanyId
			,z.name				AS BuyerCompany
			,y.email			AS BuyerEmail
			,a1.communication_value						AS BuyerPhoneNo
			,'RFQ #'+ CONVERT(VARCHAR(150), a.rfq_id) 	AS EmailSubject
			,b1.description				AS EmailBody
			,CAST('true' AS BIT)    AS EmailAttachment
			,NULL					AS LeadId
			--,NULL				AS LeadEmailId
			--,NULL				AS MessageId
			,(SELECT TOP 1 contact_id FROM mp_contacts  (NOLOCK)  WHERE company_id = e1.company_id  AND is_admin = 1)				AS SupplierId
			,NULL				AS StatusId
			,e1.company_id			AS SupplierCompanyId
			,(SELECT TOP 1 name FROM mp_companies  (NOLOCK)  WHERE company_id = e1.company_id  )	AS SupplierCompany
			--,x.first_name			AS BuyerFirstName
			--,x.last_name			AS BuyerLastName
			,NULL					AS SalesloftPeopleId
			,a.rfq_id				AS RfqId
			,b1.description			AS RfqStatus
			,c1.no_of_stars			AS BuyerNpsScoreCode
			--,d1.contact_id			AS SourcingAdvisorId
			--,d1.last_name			AS SourcingAdvisor
			,''			AS ActionTakenBy
			,NULL			AS ActionTakenDate
			--,NULL				AS MarkedById
			--,NULL				AS MarkedBy
			--,NULL				AS MarkedOn
			--,CAST('false' AS BIT)					AS IsMarked
			,a.rfq_created_on	AS rfq_created_on
			,CASE WHEN IsCommunityRfqReleased = 0 THEN CAST('false' AS BIT)	ELSE CAST('true' AS BIT) END IsCommunityRfqReleased
			,CASE WHEN IsCommunityRfqClosed = 0 THEN CAST('false' AS BIT)	ELSE CAST('true' AS BIT) END	IsCommunityRfqClosed
			,CASE WHEN IsMfgCommunityRfq = 0 THEN CAST('false' AS BIT)	ELSE CAST('true' AS BIT) END IsMfgCommunityRfq
			,(SELECT CASE WHEN is_mqs_enable = 1 THEN CAST('true' AS bit) ELSE CAST('false' AS bit) END  FROM mp_companies  (NOLOCK)  WHERE company_id = e1.company_id ) AS IsQMSEnabled
			,CommunityRfqReleaseDate
			,CommunityRfqReleaseBy AS CommunityRfqReleaseById
			,(f1.first_name +' '+f1.last_name )				AS CommunityRfqReleaseBy
			,CommunityRfqClosedDate
			,CommunityRfqClosedBy AS CommunityRfqClosedById
			,(g1.first_name +' '+g1.last_name )					AS CommunityRfqClosedBy
			,CAST('false' AS BIT)					AS WantsMp
			, NULL		AS IsCommunityRatingApproved
			, ''		AS CommunityRatingApprovedDeclineBy
			, NULL		AS CommunityRatingApprovedDeclineDate
   , NULL AS MessageId ---- Added with M2-4525
		FROM mp_rfq  (NOLOCK) a
		LEFT JOIN mp_contacts	x	(NOLOCK) ON a.contact_id = x.contact_id AND  x.is_buyer = 1
		LEFT JOIN aspnetusers	y	(NOLOCK) ON x.user_id = y.id
		LEFT JOIN mp_companies	z	(NOLOCK) ON x.company_id = z.company_id  AND x.contact_id <>0 
		LEFT JOIN mp_communication_details  a1 (NOLOCK) ON x.contact_id = a1.contact_id AND a1.communication_type_id = 1
		LEFT JOIN mp_mst_rfq_buyerstatus	b1 (NOLOCK) ON a.rfq_status_id = b1.rfq_buyerstatus_id 
		LEFT JOIN mp_star_rating			c1 (NOLOCK) ON z.company_id = c1.company_id 
		LEFT JOIN mp_contacts				d1 (NOLOCK)	ON z.assigned_sourcingadvisor = d1.contact_id 
		LEFT JOIN mp_rfq_supplier			e1 (NOLOCK)	ON a.rfq_id = e1.rfq_id 
		LEFT JOIN mp_contacts				f1 (NOLOCK) ON a.CommunityRfqReleaseBy = f1.contact_id
		LEFT JOIN mp_contacts				g1 (NOLOCK) ON a.CommunityRfqClosedBy = g1.contact_id
		WHERE IsMfgCommunityRfq = 1
		AND a.rfq_status_id >=2  AND a.rfq_status_id != 13
		AND a.IsCommunityRfqReleased IN (SELECT * FROM #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqReleased)
		AND a.IsCommunityRfqClosed IN (SELECT * FROM #tmp_vision_action_tracker_community_CommunityFilter_IsCommunityRfqClosed)
		AND 
			(
				(z.name	 LIKE '%'+ISNULL(@Search,'')+'%')
				OR
				(x.first_name +' '+ x.last_name)  LIKE  '%'+ISNULL(@Search,'')+'%'
				OR
				(y.email LIKE  '%'+ISNULL(@Search,'')+'%')
				
			)
		AND (CONVERT(DATE,rfq_created_on) =  CASE WHEN @ByDate IS NULL THEN		CONVERT(DATE,rfq_created_on) ELSE @ByDate END 	)
		AND (DATEDIFF(HOUR,rfq_created_on ,GETUTCDATE()) <=  CASE WHEN @TimeRange IS NULL THEN	DATEDIFF(HOUR,rfq_created_on ,GETUTCDATE()) ELSE @TimeRange END 	)

		INSERT INTO #tmp_vision_action_tracker_community
			(Type,Id,LeadDate,LeadDateTime,BuyerId,Buyer,BuyerCompany,BuyerEmail,BuyerPhoneNo,EmailSubject,EmailBody
			,EmailAttachment,LeadId , SupplierId,StatusId,SupplierCompanyId,SupplierCompany,SalesloftPeopleId,RfqId,RfqStatus ,BuyerNpsScoreCode
			,ActionTakenBy,ActionTakenDate,rfq_created_on,IsCommunityRfqReleased,	IsCommunityRfqClosed,IsMfgCommunityRfq,IsQMSEnabled
			,CommunityRfqReleaseDate,CommunityRfqReleaseById,CommunityRfqReleaseBy,CommunityRfqClosedDate,	CommunityRfqClosedById,CommunityRfqClosedBy,WantsMp,IsCommunityRatingApproved
   ,CommunityRatingApprovedDeclineBy,CommunityRatingApprovedDeclineDate,MessageId)  
		SELECT 
			'Catch All'			AS [Type]
			,a.Id		AS Id
			--,CAST('false' AS BIT)				AS IsBuyer
			--,CAST('false' AS BIT)				AS UnVal
			,
			(	CASE 
					WHEN DATEDIFF(MINUTE,a.EmailMessageDate ,GETUTCDATE()) < 60		THEN CONVERT(VARCHAR(100),DATEDIFF(MINUTE,a.EmailMessageDate ,GETUTCDATE())) + ' mins ago'
					WHEN DATEDIFF(HOUR,a.EmailMessageDate ,GETUTCDATE()) < 24	THEN CONVERT(VARCHAR(100),DATEDIFF(HOUR,a.EmailMessageDate ,GETUTCDATE())) + ' hrs ago'
					ELSE  CONVERT(VARCHAR(10),FORMAT(a.EmailMessageDate , 'd', 'en-US' )) + ' ' + REVERSE(SUBSTRING(REVERSE(CONVERT(VARCHAR(20),a.EmailMessageDate )), 0 , CHARINDEX(' ',REVERSE(CONVERT(VARCHAR(20),a.EmailMessageDate )))))
				END
			)	AS LeadDate
			,EmailMessageDate	AS LeadDateTime
			,0					AS BuyerId
			,(BuyerFirstName+' '+ BuyerLastName) AS Buyer
			--,NULL				AS BuyerCompanyId
			,BuyerCompanyName	AS BuyerCompany
			,BuyerEmail			AS BuyerEmail
			,BuyerPhone			AS BuyerPhoneNo
   --,''     AS EmailSubject  
   --,''    AS EmailBody 
   , EmailSubject  --- modified with M2-4525
   , EmailBody     --- modified with M2-4525
			,(CASE WHEN  MessageFileId > 0 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END  )    AS EmailAttachment
			,Id					AS LeadId
			--,NULL				AS LeadEmailId
			--,NULL				AS MessageId
			,NULL				AS SupplierId
			,NULL				AS StatusId
			,NULL				AS SupplierCompanyId
			,SupplierCompanyName	AS SupplierCompany
			--,BuyerFirstName			AS BuyerFirstName
			--,BuyerLastName			AS BuyerLastName
			,NULL					AS SalesloftPeopleId
			,NULL					AS RfqId
			,''					AS RfqStatus
			,NULL				AS BuyerNpsScoreCode
			--,NULL				AS SourcingAdvisorId
			--,''					AS SourcingAdvisor
			,''				AS ActionTakenBy
			,NULL				AS ActionTakenDate
			--,NULL				AS MarkedById
			--,NULL				AS MarkedBy
			--,NULL				AS MarkedOn
			--,CAST('false' AS BIT)					AS IsMarked
			,NULL				AS rfq_created_on
			,CAST('false' AS BIT)					AS IsCommunityRfqReleased
			,CAST('false' AS BIT)					AS IsCommunityRfqClosed
			,CAST('false' AS BIT)					AS IsMfgCommunityRfq
			,CAST('false' AS BIT)					AS IsQMSEnabled
			,NULL				AS CommunityRfqReleaseDate
			,NULL				AS CommunityRfqReleaseById
			,''					AS CommunityRfqReleaseBy
			,NULL				AS CommunityRfqClosedDate
			,NULL				AS CommunityRfqClosedById
			,''					AS CommunityRfqClosedBy
			,CAST('false' AS BIT)					AS WantsMp
			, NULL		AS IsCommunityRatingApproved
			, ''		AS CommunityRatingApprovedDeclineBy
			, NULL		AS CommunityRatingApprovedDeclineDate
   , MessageFileId    AS MessageId  ---- Added with M2-4525 
		FROM mpCommunityExternalDirectoryMessages  (NOLOCK) a
		WHERE 	
            BuyerEmail <> 'zimneth05@gmail.com'
            AND 	 
			(
				(BuyerCompanyName	 LIKE '%'+ISNULL(@Search,'')+'%')
				OR
				(BuyerFirstName+' '+ BuyerLastName)  LIKE  '%'+ISNULL(@Search,'')+'%'
				OR
				(BuyerEmail LIKE  '%'+ISNULL(@Search,'')+'%')
				
			)
			AND (CONVERT(DATE,EmailMessageDate) =  CASE WHEN @ByDate IS NULL THEN		CONVERT(DATE,EmailMessageDate) ELSE @ByDate END 	)
			AND (DATEDIFF(HOUR,EmailMessageDate ,GETUTCDATE()) <=  CASE WHEN @TimeRange IS NULL THEN	DATEDIFF(HOUR,EmailMessageDate ,GETUTCDATE()) ELSE @TimeRange END 	)

		INSERT INTO #tmp_vision_action_tracker_community
			(Type,Id,LeadDate,LeadDateTime,BuyerId,Buyer,BuyerCompany,BuyerEmail,BuyerPhoneNo,EmailSubject,EmailBody
			,EmailAttachment,LeadId , SupplierId,StatusId,SupplierCompanyId,SupplierCompany,SalesloftPeopleId,RfqId,RfqStatus ,BuyerNpsScoreCode
			,ActionTakenBy,ActionTakenDate,rfq_created_on,IsCommunityRfqReleased,	IsCommunityRfqClosed,IsMfgCommunityRfq,IsQMSEnabled
			,CommunityRfqReleaseDate,CommunityRfqReleaseById,CommunityRfqReleaseBy,CommunityRfqClosedDate,	CommunityRfqClosedById,CommunityRfqClosedBy,WantsMp,IsCommunityRatingApproved
   ,CommunityRatingApprovedDeclineBy,CommunityRatingApprovedDeclineDate,MessageId)  
		SELECT 
			'Simple RFQs'	AS [Type]
			,a.Id		AS Id
			--,CAST('false' AS BIT)				AS IsBuyer
			--,CAST('false' AS BIT)				AS UnVal
			,
			(	CASE 
					WHEN DATEDIFF(MINUTE,a.CreatedOn ,GETUTCDATE()) < 60		THEN CONVERT(VARCHAR(100),DATEDIFF(MINUTE,a.CreatedOn ,GETUTCDATE())) + ' mins ago'
					WHEN DATEDIFF(HOUR,a.CreatedOn ,GETUTCDATE()) < 24	THEN CONVERT(VARCHAR(100),DATEDIFF(HOUR,a.CreatedOn ,GETUTCDATE())) + ' hrs ago'
					ELSE  CONVERT(VARCHAR(10),FORMAT(a.CreatedOn , 'd', 'en-US' )) + ' ' + REVERSE(SUBSTRING(REVERSE(CONVERT(VARCHAR(20),a.CreatedOn )), 0 , CHARINDEX(' ',REVERSE(CONVERT(VARCHAR(20),a.CreatedOn )))))
				END
			)	AS LeadDate
			,CreatedOn			AS LeadDateTime
			,ISNULL(x.contact_id,0)			AS BuyerId
			,(x.first_name +' '+ x.last_name) AS Buyer
			--,x.company_id		AS BuyerCompanyId
			,z.name				AS BuyerCompany
			,COALESCE(y.email,a.BuyerEmail)						AS BuyerEmail
			,COALESCE(a1.communication_value,a.BuyerPhone)		AS BuyerPhoneNo
			,'Simple RFQ: ' + Capability +' - '+ Material 			AS EmailSubject
			,PartDesc				AS EmailBody
			----below code commented with M2-4873
			--,CASE WHEN PartFileId > 0 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END     AS EmailAttachment
			---- added below code with M2-4873
			, (SELECT TOP 1 CASE WHEN g1.CommunityDirectRfqId IS NOT NULL THEN  CAST('true' AS BIT) ELSE CAST('false' AS BIT) END 
			   FROM mpCommunityDirectRfqsFiles g1(NOLOCK)  WHERE g1.CommunityDirectRfqId = a.id )    AS EmailAttachment 
			,e1.lead_id			AS LeadId
			--,NULL				AS LeadEmailId
			--,NULL				AS MessageId
			,(SELECT TOP 1 contact_id FROM mp_contacts  (NOLOCK)  WHERE company_id = a.SupplierCompanyId  AND is_admin = 1)				AS SupplierId
			,CASE WHEN e1.status_id IN (0,1,2) THEN CONVERT(INT,e1.status_id) ELSE NULL END 			AS StatusId
			,a.SupplierCompanyId	AS SupplierCompanyId
			,(SELECT TOP 1 name FROM mp_companies  (NOLOCK)  WHERE company_id = a.SupplierCompanyId  )	AS SupplierCompany
			--,x.first_name			AS BuyerFirstName
			--,x.last_name			AS BuyerLastName
			,NULL					AS SalesloftPeopleId
			,NULL					AS RfqId
			,''						AS RfqStatus
			,c1.no_of_stars			AS BuyerNpsScoreCode
			--,d1.contact_id			AS SourcingAdvisorId
			--,d1.last_name			AS SourcingAdvisor
			,(f1.first_name +' '+ f1.last_name)	AS ActionTakenBy
			,e1.ModifiedOn						AS ActionTakenDate
			--,NULL				AS MarkedById
			--,NULL				AS MarkedBy
			--,NULL				AS MarkedOn
			--,CAST('false' AS BIT)					AS IsMarked
			,NULL				AS rfq_created_on
			,CAST('false' AS BIT)					AS IsCommunityRfqReleased
			,CAST('false' AS BIT)					AS IsCommunityRfqClosed
			,CAST('false' AS BIT)					AS IsMfgCommunityRfq
			,(SELECT CASE WHEN is_mqs_enable = 1 THEN CAST('true' AS bit) ELSE CAST('false' AS bit) END  FROM mp_companies  (NOLOCK)  WHERE company_id = a.SupplierCompanyId ) AS IsQMSEnabled
			,NULL				AS CommunityRfqReleaseDate
			,NULL				AS CommunityRfqReleaseById
			,''					AS CommunityRfqReleaseBy
			,NULL				AS CommunityRfqClosedDate
			,NULL				AS CommunityRfqClosedById
			,''					AS CommunityRfqClosedBy
			,CASE WHEN WantsMP = 0 THEN CAST('false' AS BIT) WHEN WantsMP = 1 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END				AS WantsMp
			, NULL		AS IsCommunityRatingApproved
			, ''		AS CommunityRatingApprovedDeclineBy
			, NULL		AS CommunityRatingApprovedDeclineDate
   ,NULL    AS MessageId  ---- Added with M2-4525 
		FROM [mpCommunityDirectRfqs]  (NOLOCK) a
		LEFT JOIN aspnetusers	y	(NOLOCK) ON a.BuyerEmail = y.Email
		LEFT JOIN mp_contacts	x	(NOLOCK) ON x.user_id = y.id AND  x.is_buyer = 1
		LEFT JOIN mp_companies	z	(NOLOCK) ON x.company_id = z.company_id  AND x.contact_id <>0 
		LEFT JOIN mp_communication_details  a1 (NOLOCK) ON x.contact_id = a1.contact_id AND a1.communication_type_id = 1
		LEFT JOIN mp_star_rating			c1 (NOLOCK) ON z.company_id = c1.company_id 
		LEFT JOIN mp_contacts				d1 (NOLOCK)	ON z.assigned_sourcingadvisor = d1.contact_id 
		LEFT JOIN mp_lead					e1 (NOLOCK) ON a.LeadId = e1.lead_id
		LEFT JOIN mp_contacts				f1 (NOLOCK) ON e1.ModifiedBy = f1.contact_id 
		WHERE  
			(
				COALESCE(y.email,a.BuyerEmail)  LIKE  '%'+ISNULL(@Search,'')+'%'
				
			)
		AND (CONVERT(DATE,CreatedOn) =  CASE WHEN @ByDate IS NULL THEN		CONVERT(DATE,CreatedOn) ELSE @ByDate END 	)
		AND (DATEDIFF(HOUR,CreatedOn ,GETUTCDATE()) <=  CASE WHEN @TimeRange IS NULL THEN	DATEDIFF(HOUR,CreatedOn ,GETUTCDATE()) ELSE @TimeRange END 	)
		AND ISNULL(e1.status_id,-1) = CASE WHEN @StatusId = -1 THEN ISNULL(e1.status_id,-1) ELSE @StatusId END
		AND ISNULL(e1.status_id,-1) <> 2

		/* M2-3994 Vision - Action Tracker - Add Ratings and Reviews tab to Community Users - API */
		INSERT INTO #tmp_vision_action_tracker_community
			(Type,Id,LeadDate,LeadDateTime,BuyerId,Buyer,BuyerCompany,BuyerEmail,BuyerPhoneNo,EmailSubject,EmailBody
			,EmailAttachment,LeadId , SupplierId,StatusId,SupplierCompanyId,SupplierCompany,SalesloftPeopleId,RfqId,RfqStatus ,BuyerNpsScoreCode
			,ActionTakenBy,ActionTakenDate,rfq_created_on,IsCommunityRfqReleased,	IsCommunityRfqClosed,IsMfgCommunityRfq,IsQMSEnabled
			,CommunityRfqReleaseDate,CommunityRfqReleaseById,CommunityRfqReleaseBy,CommunityRfqClosedDate,	CommunityRfqClosedById,CommunityRfqClosedBy,WantsMp,IsCommunityRatingApproved
   ,CommunityRatingApprovedDeclineBy,CommunityRatingApprovedDeclineDate,MessageId)  
		SELECT 
			'Ratings'			AS [Type]
			,a.Id				AS Id
			--,CAST('false' AS BIT)				AS IsBuyer
			--,CAST('false' AS BIT)				AS UnVal
			,
			(	CASE 
					WHEN DATEDIFF(MINUTE,a.RatingDate ,GETUTCDATE()) < 60		THEN CONVERT(VARCHAR(100),DATEDIFF(MINUTE,a.RatingDate ,GETUTCDATE())) + ' mins ago'
					WHEN DATEDIFF(HOUR,a.RatingDate ,GETUTCDATE()) < 24	THEN CONVERT(VARCHAR(100),DATEDIFF(HOUR,a.RatingDate ,GETUTCDATE())) + ' hrs ago'
					ELSE  CONVERT(VARCHAR(10),FORMAT(a.RatingDate , 'd', 'en-US' )) + ' ' + REVERSE(SUBSTRING(REVERSE(CONVERT(VARCHAR(20),a.RatingDate )), 0 , CHARINDEX(' ',REVERSE(CONVERT(VARCHAR(20),a.RatingDate )))))
				END
			)	AS LeadDate
			,RatingDate	AS LeadDateTime
			,0					AS BuyerId
			,(a.FirstName+' '+ a.LastName) AS Buyer
			--,NULL				AS BuyerCompanyId
			,SenderCompany		AS BuyerCompany
			,SenderEmail		AS BuyerEmail
			,''				AS BuyerPhoneNo
			,CONVERT(VARCHAR(100),Rating) 	AS EmailSubject
			,CONVERT(VARCHAR(MAX),Comment)	AS EmailBody
			,CAST('false' AS BIT)			AS EmailAttachment
			,NULL				AS LeadId
			--,NULL				AS LeadEmailId
			--,NULL				AS MessageId
			,NULL				AS SupplierId
			,NULL				AS StatusId
			,c.company_id			AS SupplierCompanyId 
			,ReceiverCompany	AS SupplierCompany
			--,BuyerFirstName			AS BuyerFirstName
			--,BuyerLastName			AS BuyerLastName
			,NULL					AS SalesloftPeopleId
			,NULL					AS RfqId
			,''					AS RfqStatus
			,NULL				AS BuyerNpsScoreCode
			--,NULL				AS SourcingAdvisorId
			--,''					AS SourcingAdvisor
			,''				AS ActionTakenBy
			,NULL				AS ActionTakenDate
			--,NULL				AS MarkedById
			--,NULL				AS MarkedBy
			--,NULL				AS MarkedOn
			--,CAST('false' AS BIT)					AS IsMarked
			,NULL				AS rfq_created_on
			,CAST('false' AS BIT)					AS IsCommunityRfqReleased
			,CAST('false' AS BIT)					AS IsCommunityRfqClosed
			,CAST('false' AS BIT)					AS IsMfgCommunityRfq
			,CAST('false' AS BIT)					AS IsQMSEnabled
			,NULL				AS CommunityRfqReleaseDate
			,NULL				AS CommunityRfqReleaseById
			,''					AS CommunityRfqReleaseBy
			,NULL				AS CommunityRfqClosedDate
			,NULL				AS CommunityRfqClosedById
			,''					AS CommunityRfqClosedBy
			,CAST('false' AS BIT)					AS WantsMp
			, IsApproved		AS IsCommunityRatingApproved
			, (f1.first_name +' '+ f1.last_name) AS CommunityRatingApprovedDeclineBy
			, ApprovedDeclineDate AS CommunityRatingApprovedDeclineDate
   ,NULL    AS MessageId  ---- Added with M2-4525 
		FROM mpCommunityRatings  (NOLOCK) a
		----- Slack issue : include MFG suppliers only in the list so left join are removed from join tables
		LEFT JOIN mp_contacts	 (NOLOCK) f1  ON a.ApprovedDeclineBy = f1.contact_id 
		/* M2-5049 LEFT JOIN added in below tables */
		LEFT JOIN aspnetusers	 (NOLOCK) b ON a.ReceiverEmail = b.email
		LEFT JOIN mp_contacts	 (NOLOCK) c ON b.id = c.user_id
		WHERE 		 
			(
				(SenderCompany	 LIKE '%'+ISNULL(@Search,'')+'%')
				OR
				(a.FirstName+' '+ a.LastName)  LIKE  '%'+ISNULL(@Search,'')+'%'
				OR
				(SenderEmail LIKE  '%'+ISNULL(@Search,'')+'%')
			)
			AND (CONVERT(DATE,RatingDate) =  CASE WHEN @ByDate IS NULL THEN		CONVERT(DATE,RatingDate) ELSE @ByDate END 	)
			AND (DATEDIFF(HOUR,RatingDate ,GETUTCDATE()) <=  CASE WHEN @TimeRange IS NULL THEN	DATEDIFF(HOUR,RatingDate ,GETUTCDATE()) ELSE @TimeRange END 	)
		ORDER BY 
				CASE  WHEN @IsOrderByDesc =  1 AND @OrderBy = 'LeadDateTime' THEN   RatingDate END DESC
				,CASE  WHEN @IsOrderByDesc =  0 AND @OrderBy = 'LeadDateTime' THEN   RatingDate END ASC 
				,CASE  WHEN @IsOrderByDesc =  1 AND @OrderBy = 'Buyer' THEN   (a.FirstName+' '+ a.LastName) END DESC 
				,CASE  WHEN @IsOrderByDesc =  0 AND @OrderBy = 'Buyer' THEN   (a.FirstName+' '+ a.LastName) END ASC 
		OFFSET @PageSize * (@PageNumber- 1) ROWS
		FETCH NEXT @PageSize ROWS ONLY
		/**/

		SELECT * ,COUNT(1) OVER () AS TotalRecordCount FROM 
		(
			SELECT 
				Type	,
				Id	,
				LeadDate	,
				LeadDateTime	,
				BuyerId	,
				Buyer	,
				BuyerCompany	,
				BuyerEmail	,
				BuyerPhoneNo	,
				EmailSubject	,
				EmailBody	,
				EmailAttachment	,
				LeadId	,
				SupplierId	,
				StatusId	,
				SupplierCompanyId ,
				SupplierCompany	,
				SalesloftPeopleId	,
				RfqId	,
				RfqStatus	,
				BuyerNpsScoreCode	,
				ActionTakenBy	,
				ActionTakenDate	,
				rfq_created_on	,
				IsCommunityRfqReleased	,
				IsCommunityRfqClosed	,
				IsMfgCommunityRfq	,
				IsQMSEnabled	,
				CommunityRfqReleaseDate	,
				CommunityRfqReleaseById	,
				CommunityRfqReleaseBy	,
				CommunityRfqClosedDate	,
				CommunityRfqClosedById	,
				CommunityRfqClosedBy	,
				WantsMp	,
				IsCommunityRatingApproved	,
				CommunityRatingApprovedDeclineBy	,
    CommunityRatingApprovedDeclineDate,
	MessageId  ---- Added with M2-4525
			FROM #tmp_vision_action_tracker_community
		) a
		ORDER BY 
				CASE  WHEN @IsOrderByDesc =  1 AND @OrderBy = 'LeadDateTime' THEN   LeadDateTime END DESC
				,CASE  WHEN @IsOrderByDesc =  0 AND @OrderBy = 'LeadDateTime' THEN   LeadDateTime END ASC 
				,CASE  WHEN @IsOrderByDesc =  1 AND @OrderBy = 'Buyer' THEN   Buyer END DESC 
				,CASE  WHEN @IsOrderByDesc =  0 AND @OrderBy = 'Buyer' THEN   Buyer END ASC 
		OFFSET @PageSize * (@PageNumber- 1) ROWS
		FETCH NEXT @PageSize ROWS ONLY

	END

END
GO
PRINT N'Altering Procedure [dbo].[proc_get_vision_sourcingadvisor]...';


GO
-- EXEC proc_get_vision_sourcingadvisor @ForBuyer = 1
ALTER PROCEDURE [dbo].[proc_get_vision_sourcingadvisor]
(
	@ForBuyer BIT
)
AS
BEGIN
	SET NOCOUNT ON
	/*
		-- Created	:	May 29, 2020
		--			:	M2-2906 Vision - Action Tracker Page - DB

		---Modified on 03-Jul-2023
		1. Removed these 2 ids from below list 1571 , 1349037 , As per request from Soel
		2. Contact id : 1421952 added in code on 14-jul-2023

		--Modified on 13-Sep-2023
		can you add Shonta Lockett as Account Owner for Buyers - she is already created in vision and her phone number should be - 678-981-4040
	*/

	IF @ForBuyer = 1
	BEGIN

		SELECT 
			b.contact_id SourcingAdvisorId 
			,b.first_name +' '+b.last_name AS SourcingAdvisor 
		FROM mp_contacts	b (NOLOCK)
		WHERE b.contact_id in 
		(1560,1247,1577,1585,1345421,1367274,1415016,1415017,1419517,1421952,1423839)
		ORDER BY SourcingAdvisor

	END
	ELSE IF @ForBuyer = 0
	BEGIN

		SELECT 
			b.contact_id SourcingAdvisorId 
			,b.first_name +' '+b.last_name AS SourcingAdvisor 
		FROM mp_contacts	b (NOLOCK)
		WHERE b.contact_id in 
		(1483,1247,1585,1339475,1367274,1415016,1415017,1419517,1421952
		---- below are customer support rep
		,1349037,1548,1579,1419075,1421106
		)
		ORDER BY SourcingAdvisor
	
	END

END
GO
PRINT N'Altering Procedure [dbo].[proc_get_VisionUserList]...';


GO

/*

EXEC [proc_get_VisionUserList] 
@PageNumber=1
,@PageSize=200
,@sortby=N'email'
,@isorderbydesc=0
,@searchtext=N''
,@filterby=N''



*/
ALTER  PROCEDURE [dbo].[proc_get_VisionUserList]      
  @PageNumber INT=1,  
  @PageSize INT=20,  
  @sortby varchar(100) = null ,  
  @isorderbydesc int = 1,  
  @searchtext nvarchar(200) = null,  
  @filterby varchar(200) = null  
AS  
BEGIN    

 set nocount on     	 
 	 
    
	 if @sortby is null or @sortby= ''  
		set @sortby = 'CreatedOn'  
  
	 if (@PageSize is null or @PageSize = 0) and (@PageNumber is null or @PageNumber = 0)  
	 begin  
		set @PageSize = 20  
		set @PageNumber = 1  
	 end  
  
	 if @filterby is null  
		set @filterby = ''  
    
	 
	select *,  count(1) over () TotalCount 
	from 
	(
	   select distinct d.first_name as FirstName,
	   d.last_name as LastName,
	   a.Email as Email,
	   a.Id as UserId,
	   c.Name as Role,
	   d.is_active as IsActive,
	   d.contact_id as ContactId,
	   d.created_on as CreatedOn
	   from AspNetUsers a
	   join mp_contacts d on a.Id = d.User_Id  
	   join  AspNetUserRoles b on a.Id = b.UserId
	   join AspNetRoles c on b.RoleId = c.Id
	   where b.RoleId in ('667763D5-9440-4766-81D4-FBA5AB85FC1C','720DE5EB-25B1-49BE-8FA2-6423524C4693','7711E6AA-FF40-45F6-AA3E-BB2B741EFA49','AF74F5D7-9DD6-4D54-9725-4943679690B2') 
	   and d.is_active = 1
	   
	) a	 
	order by   
	case   when @isorderbydesc =  1 and @sortby = 'FirstName'	then   a.FirstName end desc  
	,case  when @isorderbydesc =  1 and @sortby = 'LastName'		then   a.LastName end desc  
	,case  when @isorderbydesc =  1 and @sortby = 'Email'			then   a.Email end desc  
	,case  when @isorderbydesc =  1 and @sortby = 'Role'			then   a.Role end desc  
	,case  when @isorderbydesc =  1 and @sortby = 'CreatedOn'			then   a.CreatedOn end desc  
	,case  when @isorderbydesc =  0 and @sortby = 'FirstName'	then   a.FirstName end asc    
	,case  when @isorderbydesc =  0 and @sortby = 'LastName'		then   a.LastName end asc  
	,case  when @isorderbydesc =  0 and @sortby = 'Email'			then   a.Email end asc  
	,case  when @isorderbydesc =  0 and @sortby = 'Role'			then   a.Role end asc  
	,case  when @isorderbydesc =  0 and @sortby = 'CreatedOn'			then   a.CreatedOn end asc  
	offset @pagesize * (@pagenumber - 1) rows  
	fetch next @pagesize rows only  	  	
	
    
END
GO
PRINT N'Altering Procedure [dbo].[proc_mfgzoho_rfq_create_update_sink]...';


GO


-- EXEC [proc_mfgzoho_rfq_create_update_sink]
ALTER procedure [dbo].[proc_mfgzoho_rfq_create_update_sink]  
as  
begin  
/*  
    M2-1679 Zoho RFQ module Create Sync (records from MFG Db to Zoho CRM.) - DB          -- insert  
    M2-1680 Zoho RFQ module Update Sync (modified records from MFG Db to Zoho CRM.) - DB -- update  
	M2-1841 RFQ job update for field "Buyer RFQ status field" - DB

*/  
  
set nocount on  
declare @todaydate datetime = getutcdate()  
declare @lastidentity int  
DECLARE @HoursDifferenceBetweenUTCandEST  INT


  
declare @rfq_log_details table  
    (  
        oldfieldvalue      nvarchar(max),  
        newfieldvalue      nvarchar(max),  
        table_name         varchar(100),  
        fieldname          varchar(100),  
        tranmode           varchar(15),  
        rfq_id             int  
    )  
   
  /* getting information on old and new values from both the databases (MFG and Zoho) */  
    declare @rfq_updatesync_log table  
    (  
		mfg_zoho_rfq_id						int,  
		mfg_rfq_name						nvarchar(100),  
		zoho_rfq_name						nvarchar(100),  
		mfg_rfq_description					nvarchar(max),  
		zoho_rfq_description				nvarchar(max),  
		mfg_rfq_part_count					nvarchar(max),    
		zoho_part_count						nvarchar(max),  
		mfg_rfq_pref_location_id			nvarchar(max),      
		zoho_region							nvarchar(max),  
		mfg_release_date					varchar(50),    
		zoho_release_date					varchar(50),  
		mfg_closedate						varchar(50),    
		zoho_close_date						varchar(50),  
		mfg_buyer_name						nvarchar(max),   
		zoho_buyer_name						nvarchar(max),  
		mfg_assigned_sourcingadvisor		varchar(50),  
		zoho_assigned_sourcingadvisor		varchar(50),  
		mfg_rfqstatus						nvarchar(max),   
		zoho_rfq_buyerstatus_id             nvarchar(max),
		mfg_rfq_number_of_quotes			nvarchar(max),      
		zoho_number_of_quotes				nvarchar(max),  
		mfg_discipline_level0				nvarchar(max),  
		zoho_discipline_level0				nvarchar(max),  
		mfg_discipline_level1				nvarchar(max),  
		zoho_discipline_level1				nvarchar(max),  
		mfg_discipline_level2				nvarchar(max),  
		zoho_discipline_level2				nvarchar(max),  
		mfg_rfq_guid						nvarchar(200),  
		zoho_visionlink						nvarchar(200),  
		mfg_mfglegacyrfqid					nvarchar(200),  
		zoho_mfglegacyrfqid					nvarchar(200),  
		mfg_buyer_id						varchar(200),  
		zoho_buyer_id						varchar(200),  
		table_name							varchar(100)  
    )  
   

 drop table if exists #tmp_mfg_rfq_not_exists -- this is for newly created rfq id  
 drop table if exists #tmp_mfg_rfq_exists     -- this is for rfq details are available in both database MFG and zoho  
 drop table if exists #tmp_rfq_discipline  
 drop table if exists #tmp_inserted_rfq_id  
 drop table if exists #tmp_rfq_materials
 
SET @HoursDifferenceBetweenUTCandEST  = 
(
	CASE	
		WHEN (SELECT current_utc_offset FROM sys.time_zone_info WHERE name = 'Eastern Standard Time') = N'-05:00' THEN -5
		WHEN (SELECT current_utc_offset FROM sys.time_zone_info WHERE name = 'Eastern Standard Time') = N'-04:00' THEN -4
	END
)
 
 
   
   /* load companies discipline_level*/  
   select    
    mr.rfq_id as rfq_num  
    , (select childid from dbo.fn_rfq_discipline (mrp.part_category_id, 0))  as discipline_level0  
    , (select childid from dbo.fn_rfq_discipline (mrp.part_category_id, 1))  as discipline_level1  
    , (select childid from dbo.fn_rfq_discipline (mrp.part_category_id, 2))  as discipline_level2 
   into #tmp_rfq_discipline   
   from   
   mp_companies mcom (nolock)  
   join mp_contacts mcon (nolock) on mcom.company_id = mcon.company_id  
   join mp_rfq mr (nolock) on mcon.contact_id = mr.contact_id  
   left join mp_rfq_parts mrp (nolock) on mr.rfq_id = mrp.rfq_id  
   left join mp_parts mp  (nolock) on mrp.part_id = mp.part_id  
   /* */  

    /* getting not exist quote id */
		 select rfq_id
		 into #tmp_inserted_rfq_id
		 from  mp_rfq(nolock) a
		 where not exists (select rfq_number from zoho..zoho_rfq(nolock) b  where b.rfq_number = a.rfq_id and b.synctype = 1)

 	/* */
		
    /* fetching mfg rfq details which are not in zoho table zoho_rfq*/    
    select    
		a.rfq_id, isnull(a.rfq_name,convert(varchar(500),a.rfq_id)) rfq_name 
		,a.rfq_description ,  a.contact_id ,j.assigned_sourcingadvisor  
		,rfq_status_id [rfqstatus]
		--,Quotes_needed_by [CloseDate]
		,
		(
		case 			
			when rfq_pref_manufacturing_location_id = 4 then 	convert(datetime,dateadd(minute,-00,dateadd(hour,@HoursDifferenceBetweenUTCandEST,quotes_needed_by )))  
			when rfq_pref_manufacturing_location_id = 5 then  convert(datetime,dateadd(minute,-00,dateadd(hour,@HoursDifferenceBetweenUTCandEST,quotes_needed_by )))  
			when rfq_pref_manufacturing_location_id = 6 then  convert(datetime,dateadd(minute,-00,dateadd(hour,@HoursDifferenceBetweenUTCandEST,quotes_needed_by )))  
			when rfq_pref_manufacturing_location_id = 7 then 	convert(datetime,dateadd(minute,-00,dateadd(hour,@HoursDifferenceBetweenUTCandEST,quotes_needed_by ))) 
			when rfq_pref_manufacturing_location_id = 2 then 	convert(datetime,dateadd(hour,+2,quotes_needed_by )) 	
			when rfq_pref_manufacturing_location_id = 3 then 	convert(datetime,dateadd(minute,+30,dateadd(hour,+5,quotes_needed_by )))  
			else quotes_needed_by
		end
		) [CloseDate] 		
		,rfq_guid,release_date,rfq_part_count,rfq_number_of_quotes,e.first_name + ' ' + e.last_name as buyer_name  
		,rfq_pref_manufacturing_location_id  
		,g.discipline_level0  
		,h.discipline_level1  
		,i.discipline_level2  
		,e.company_id  
    into #tmp_mfg_rfq_not_exists    
    from mp_rfq (nolock) a    
    left join (select rfq_id , max(status_date) release_date from mp_rfq_release_history(nolock) group by rfq_id ) b  on b.rfq_id = a.rfq_id     
    left join (select rfq_id , count(rfq_part_id) rfq_part_count from mp_rfq_parts(nolock) group by rfq_id ) c  on c.rfq_id = a.rfq_id  
    left join (select rfq_id , count(contact_id) rfq_number_of_quotes from  mp_rfq_quote_supplierquote(nolock) where is_quote_submitted = 1 group by rfq_id ) d on d.rfq_id = a.rfq_id    
    left join mp_contacts(nolock) e on e.contact_id =  a.contact_id  
    left join  
   (      
    select distinct  abc.rfq_id as rfq_id   
    ,case when cnt = 1 then b.rfq_pref_manufacturing_location_id else 7 end as rfq_pref_manufacturing_location_id  
     from (  
      select  rfq_id    
      ,count(rfq_pref_manufacturing_location_id) cnt  
      from mp_rfq_preferences   (nolock) 
      group by rfq_id    
    ) abc  join mp_rfq_preferences b on abc.rfq_id = b.rfq_id  
   ) f on f.rfq_id = a.rfq_id  
     left join   
   (  
    select   
     mr.rfq_id   
     ,STUFF((SELECT distinct ',' +  convert(varchar,discipline_level0 )  
    from #tmp_rfq_discipline  
    where rfq_num = mr.rfq_id  
    FOR XML PATH('')), 1, 1, '') AS discipline_level0  
    from mp_rfq mr  
   ) g on g.rfq_id = a.rfq_id  
   left join   
   (  
    select   
     mr1.rfq_id   
     ,STUFF((SELECT distinct ',' +  convert(varchar,discipline_level1 )  
    from #tmp_rfq_discipline  
    where rfq_num = mr1.rfq_id  
    FOR XML PATH('')), 1, 1, '') AS discipline_level1  
    from mp_rfq mr1  
   ) h on h.rfq_id = a.rfq_id  
   left join   
   (  
    select   
     mr2.rfq_id   
     ,STUFF((SELECT distinct ',' +  convert(varchar,discipline_level2 )  
    from #tmp_rfq_discipline  
    where rfq_num = mr2.rfq_id  
    FOR XML PATH('')), 1, 1, '') AS discipline_level2  
    from mp_rfq mr2  
   ) i on i.rfq_id = a.rfq_id  
   left join  
    (   
    select a1.company_id,a1.assigned_sourcingadvisor  
    from mp_companies (nolock) a1  
    join mp_contacts (nolock) b1 on a1.Assigned_SourcingAdvisor = b1.contact_id  
    ) j on  j.company_id = e.company_id  
    where    a.rfq_id in     
    (    
     select rfq_id from #tmp_inserted_rfq_id (nolock)
    )    
	and a.contact_id is not null   
		    
	if (select count(1) from #tmp_mfg_rfq_not_exists(nolock) ) > 0   
    begin  
   begin try   
      begin transaction  
        /* inserting into zoho table zoho_rfq from MFG dB */  
     merge zoho..zoho_rfq as target  
     using #tmp_mfg_rfq_not_exists as source on  
      (target.RFQ_Number = source.rfq_id)  
     when not matched then  
      insert (rfq_number,rfq_name,buyer_id,rfq_description,close_date,assigned_engineer,rfq_buyerstatus_id,visionlink,release_date  
      ,part_count,number_of_quotes,buyer_name,mfg_discipline,mfg_1st_discipline,mfg_2nd_discipline,region,mfglegacyrfqid  
      ,created_time,  synctype, issync)   
      values (source.rfq_id,source.rfq_name,source.contact_id, source.rfq_description  
      ,source.CloseDate,source.assigned_sourcingadvisor,source.rfqstatus,source.rfq_guid,source.release_date  
      ,source.rfq_part_count,source.rfq_number_of_quotes,source.buyer_name  
      ,source.discipline_level0,source.discipline_level1,source.discipline_level2,source.rfq_pref_manufacturing_location_id,source.rfq_id  
      ,@todaydate,1,0);  
      
       insert into zoho..zoho_sink_down_job_running_logs (zoho_module_id,job_date,job_status)  
       select 11 zoho_module_id , @todaydate , 'success : RFQ create sync'  
        
    commit  
   end try  
  
   begin catch  
    rollback  
      insert into zoho..zoho_sink_down_job_running_logs  
     (zoho_module_id,job_date,job_status)  
     select 11 zoho_module_id , @todaydate , 'fail : RFQ create sync' + error_message()  
     set @lastidentity = @@identity  
       
     insert into zoho..zoho_sink_down_job_running_logs_detail (job_running_id , zoho_id)  
     select @lastidentity , rfq_id as company_zoho_id  from #tmp_mfg_rfq_not_exists (nolock)  
  
  
   end catch  
    end  
    else  
    begin  
	 insert into zoho..zoho_sink_down_job_running_logs (zoho_module_id,job_date,job_status)  
	 select 11 zoho_module_id , @todaydate , 'No records found for RFQ create sync'  
    end  
      
    /* fetching mfg rfq details which are exist in MFG and zoho databse table*/    
    select    
		a.rfq_id, isnull(a.rfq_name,convert(varchar(500),a.rfq_id)) rfq_name 
		, a.rfq_description ,  a.contact_id ,j.assigned_sourcingadvisor  
		,rfq_status_id [rfqstatus]
		--,Quotes_needed_by [CloseDate]
		,
		(
		case 			
			when rfq_pref_manufacturing_location_id = 4 then 	convert(datetime,dateadd(minute,-00,dateadd(hour,@HoursDifferenceBetweenUTCandEST,quotes_needed_by )))  
			when rfq_pref_manufacturing_location_id = 5 then  convert(datetime,dateadd(minute,-00,dateadd(hour,@HoursDifferenceBetweenUTCandEST,quotes_needed_by )))  
			when rfq_pref_manufacturing_location_id = 6 then  convert(datetime,dateadd(minute,-00,dateadd(hour,@HoursDifferenceBetweenUTCandEST,quotes_needed_by )))  
			when rfq_pref_manufacturing_location_id = 7 then 	convert(datetime,dateadd(minute,-00,dateadd(hour,@HoursDifferenceBetweenUTCandEST,quotes_needed_by ))) 
			when rfq_pref_manufacturing_location_id = 2 then 	convert(datetime,dateadd(hour,+2,quotes_needed_by )) 	
			when rfq_pref_manufacturing_location_id = 3 then 	convert(datetime,dateadd(minute,+30,dateadd(hour,+5,quotes_needed_by )))  
			else quotes_needed_by
		end
		) [CloseDate] 
		,rfq_guid,release_date,rfq_part_count  
		,rfq_number_of_quotes,e.first_name + ' ' + e.last_name as buyer_name  
		,rfq_pref_manufacturing_location_id  
		,g.discipline_level0  
		,h.discipline_level1  
		,i.discipline_level2  
		,e.company_id  
    into #tmp_mfg_rfq_exists    
    from mp_rfq (nolock) a   
    left join (select rfq_id , max(status_date) release_date from mp_rfq_release_history (nolock)  group by rfq_id ) b  on b.rfq_id = a.rfq_id   
    left join (select rfq_id , count(rfq_part_id) rfq_part_count from mp_rfq_parts (nolock) group by rfq_id ) c  on c.rfq_id = a.rfq_id  
    left join (select rfq_id , count(contact_id) rfq_number_of_quotes from  mp_rfq_quote_SupplierQuote(nolock) where is_quote_submitted = 1 group by rfq_id ) d on d.rfq_id = a.rfq_id     
    left join mp_contacts(nolock) e on e.contact_id =  a.contact_id  
     left join  
   (      
    select distinct  abc.rfq_id as rfq_id   
    ,case when cnt = 1 then b.rfq_pref_manufacturing_location_id else 7 end as rfq_pref_manufacturing_location_id  
     from (  
      select  rfq_id    
      ,count(rfq_pref_manufacturing_location_id) cnt  
      from mp_rfq_preferences   (nolock) 
      group by rfq_id    
    ) abc  join mp_rfq_preferences b on abc.rfq_id = b.rfq_id  
   ) f on f.rfq_id = a.rfq_id  
   left join   
   (  
    select   
     mr.rfq_id   
     ,STUFF((SELECT distinct ',' +  convert(varchar,discipline_level0 )  
    from #tmp_rfq_discipline  
    where rfq_num = mr.rfq_id  
    FOR XML PATH('')), 1, 1, '') AS discipline_level0  
    from mp_rfq mr  
   ) g on g.rfq_id = a.rfq_id  
   left join   
   (  
    select   
     mr1.rfq_id   
     ,STUFF((SELECT distinct ',' +  convert(varchar,discipline_level1 )  
    from #tmp_rfq_discipline  
    where rfq_num = mr1.rfq_id  
    FOR XML PATH('')), 1, 1, '') AS discipline_level1  
    from mp_rfq mr1  
   ) h on h.rfq_id = a.rfq_id  
   left join   
   (  
    select   
     mr2.rfq_id   
     ,STUFF((SELECT distinct ',' +  convert(varchar,discipline_level2 )  
    from #tmp_rfq_discipline  
    where rfq_num = mr2.rfq_id  
    FOR XML PATH('')), 1, 1, '') AS discipline_level2  
    from mp_rfq mr2  
   ) i on i.rfq_id = a.rfq_id  
   left join  
    (   
    select a1.company_id,a1.assigned_sourcingadvisor  
    from mp_companies (nolock) a1  
    join mp_contacts (nolock) b1 on a1.Assigned_SourcingAdvisor = b1.contact_id  
    ) j on  j.company_id = e.company_id  
    where a.contact_id is not null   
    and a.rfq_id in     
    (    
     select RFQ_Number from zoho.dbo.zoho_rfq (nolock)  where synctype = 1  
	 /* Dec 03 , 2020*/
	 --and isnull(id,0) != 0 
	 ----isnull(isprocessed,0) = 0  
	/**/
    )    
		
	if (select count(1) from #tmp_mfg_rfq_exists(nolock) ) > 0  
    begin  
   begin try  
    begin transaction  
      /* Updating users records into zoho_user_accounts from MFG dB */  
    merge zoho..zoho_rfq as target  
    using #tmp_mfg_rfq_exists as source on  
     (target.RFQ_Number = source.rfq_id and target.synctype = 1)  
    when matched  
    and (  
      isnull(target.rfq_name,'')				!= source.rfq_name  
      or isnull(target.rfq_description,'')		!= source.rfq_description  
      or isnull(target.buyer_name,'')			!= source.buyer_name  
      or isnull(target.rfq_buyerstatus_id,'')   != source.rfqstatus  
      or isnull(target.region,'')				!= source.rfq_pref_manufacturing_location_id  
      or isnull(target.part_count,'')			!= source.rfq_part_count  
      or isnull(target.number_of_quotes,'')		!= source.rfq_number_of_quotes  
      or isnull(target.close_date,'')			!= source.closedate  
      or isnull(target.release_date,''  )		!= source.release_date  
      or isnull(target.Assigned_Engineer,'')	!= source.assigned_sourcingadvisor  
      or isnull(target.mfg_discipline,'')		!= source.discipline_level0  
      or isnull(target.mfg_1st_discipline,'')   != source.discipline_level1  
      or isnull(target.mfg_2nd_discipline,'')   != source.discipline_level2  
      or isnull(target.visionlink,'')			!= cast(source.rfq_guid as nvarchar(200))  
      or isnull(target.mfglegacyrfqid,'')		!= source.rfq_id  
      or isnull(target.Buyer_id,'')				!= source.contact_id  
     ) then  
     update set  
      target.rfq_name			            = source.rfq_name  
     ,target.rfq_description				= source.rfq_description  
     ,target.buyer_name						= source.buyer_name  
     ,target.rfq_buyerstatus_id				= source.rfqstatus  
     ,target.region							= source.rfq_pref_manufacturing_location_id  
     ,target.part_count						= source.rfq_part_count  
     ,target.number_of_quotes				= source.rfq_number_of_quotes  
     ,target.close_date						= source.closedate  
     ,target.release_date					= source.release_date  
     ,target.Assigned_Engineer				= source.assigned_sourcingadvisor  
     ,target.mfg_discipline					= source.discipline_level0  
     ,target.mfg_1st_discipline				= source.discipline_level1  
     ,target.mfg_2nd_discipline				= source.discipline_level2  
     ,target.visionlink						= cast(source.rfq_guid as nvarchar(200))  
     ,target.mfglegacyrfqid					= source.rfq_id  
     ,target.buyer_id						= source.contact_id  
     ,Modified_Time							= @todaydate  
    output  
     source.rfq_id					as mfg_rfq_id,  
     inserted.rfq_name				as mfg_rfq_name,  
     deleted.rfq_name				as zoho_rfq_name,  
     inserted.rfq_description		as mfg_rfq_description,  
     deleted.rfq_description		as zoho_rfq_description,  
     inserted.part_count			as mfg_rfq_part_count,   
     deleted.part_count				as zoho_part_count,  
     inserted.region				as mfg_rfq_pref_location_id,        
     deleted.region					as zoho_region,   
     inserted.release_date			as mfg_release_date,       
     deleted.release_date			as zoho_release_date,    
     inserted.close_date			as mfg_closedate,        
     deleted.close_date				as zoho_close_date,  
     inserted.buyer_name			as mfg_buyer_name,   
     deleted.buyer_name				as zoho_buyer_name,  
     inserted.Assigned_Engineer		as mfg_assigned_sourcingadvisor,   
     deleted.Assigned_Engineer		as zoho_assigned_sourcingadvisor,  
     inserted.rfq_buyerstatus_id    as mfg_rfqstatus,   
     deleted.rfq_buyerstatus_id     as zoho_rfq_buyerstatus_id,  
     inserted.number_of_quotes		as mfg_rfq_number_of_quotes,  
     deleted.number_of_quotes		as zoho_number_of_quotes,  
     inserted.mfg_discipline		as mfg_discipline_level0,   
     deleted.mfg_discipline			as zoho_discipline_level0,   
     inserted.mfg_1st_discipline	as mfg_discipline_level1,   
     deleted.mfg_1st_discipline		as zoho_discipline_level1,   
     inserted.mfg_2nd_discipline	as mfg_discipline_level2,   
     deleted.mfg_2nd_discipline		as zoho_discipline_level2,    
     inserted.visionlink			as mfg_rfq_guid,    
     deleted.visionlink				as zoho_visionlink,    
     inserted.mfglegacyrfqid		as mfg_mfglegacyrfqid,   
     deleted.mfglegacyrfqid			as zoho_mfglegacyrfqid,   
     inserted.buyer_id				as mfg_buyer_id,    
     deleted.buyer_id				as zoho_buyer_id,      
     'zoho_rfq'						as table_name          
    into @rfq_updatesync_log;  
  
      
    if (select count(1) from @rfq_updatesync_log ) > 0   
    Begin  
     insert  into @rfq_log_details (oldfieldvalue,newfieldvalue,table_name,fieldname,tranmode,rfq_id)  
     select oldfieldid,newfieldid,table_name,fieldname,transactionmode,mfg_zoho_rfq_id  
     from(  
      select isnull(zoho_rfq_name,'') as oldfieldid , mfg_rfq_name as newfieldid , table_name, 'rfq_name' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
      union all  
      select isnull(zoho_rfq_description,'') as oldfieldid , mfg_rfq_description as newfieldid , table_name, 'rfq_description' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
      union all  
      select isnull(zoho_part_count,'') as oldfieldid , mfg_rfq_part_count as newfieldid , table_name, 'part_count' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
      union all  
      select isnull(zoho_region,'') as oldfieldid , mfg_rfq_pref_location_id as newfieldid , table_name, 'region' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
      union all  
      select isnull(zoho_release_date,'') as oldfieldid , mfg_release_date as newfieldid , table_name, 'release_date' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
      union all  
      select isnull(zoho_close_date,'') as oldfieldid , mfg_closedate as newfieldid , table_name, 'close_date' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
      union all  
      select isnull(zoho_buyer_name,'') as oldfieldid , mfg_buyer_name as newfieldid , table_name, 'buyer_name' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
      union all  
      select isnull(zoho_assigned_sourcingadvisor,'') as oldfieldid , mfg_assigned_sourcingadvisor as newfieldid , table_name, 'assigned_engineer' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
      union all  
      select isnull(zoho_rfq_buyerstatus_id,'') as oldfieldid , mfg_rfqstatus as newfieldid , table_name, 'rfq_buyerstatus_id' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
      union all  
      select isnull(zoho_number_of_quotes,'') as oldfieldid , mfg_rfq_number_of_quotes as newfieldid , table_name, 'number_of_quotes' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
      union all  
      select isnull(zoho_discipline_level0,'') as oldfieldid , mfg_discipline_level0 as newfieldid , table_name, 'mfg_discipline' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
        union all  
      select isnull(zoho_discipline_level1,'') as oldfieldid , mfg_discipline_level1 as newfieldid , table_name, 'mfg_1st_discipline' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
        union all  
      select isnull(zoho_discipline_level2,'') as oldfieldid , mfg_discipline_level2 as newfieldid , table_name, 'mfg_2nd_discipline' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
        union all  
      select isnull(zoho_visionlink,'') as oldfieldid , mfg_rfq_guid as newfieldid , table_name, 'visionlink' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
        union all  
      select isnull(zoho_mfglegacyrfqid,'') as oldfieldid , mfg_mfglegacyrfqid as newfieldid , table_name, 'mfglegacyrfqid' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
        union all  
      select isnull(zoho_buyer_id,'') as oldfieldid , mfg_buyer_id as newfieldid , table_name, 'buyer_id' as fieldname,'update' transactionmode , mfg_zoho_rfq_id  from @rfq_updatesync_log  
      )  abc  
     where oldfieldid != newfieldid  
  
     /* creating log for updated records */  
     insert into zoho..zoho_sink_down_logs  
     (zoho_module_id,company_id,company_zoho_id,log_date,table_name,field_name,oldfieldvalue,newfieldvalue,transaction_mode,user_contact_id,user_zoho_id,rfq_id)  
     select  11 as zoho_module_id, null ,null , @todaydate,a.table_name,a.fieldname  
     ,a.oldfieldvalue,a.newfieldvalue,a.tranmode,null,null,rfq_id  
     from @rfq_log_details a   
     /* */  
      
      /* update for zoho_rfq */  
     update a  
     set  a.IsSync = 0  
     ,a.IsProcessed = null  
     ,a.Modified_Time = @todaydate  
     ,a.SyncDatetime = null  
     ,a.ProcessedDatetime = null  
     from zoho..zoho_rfq a  
     join @rfq_updatesync_log b on a.rfq_number = b.mfg_zoho_rfq_id  
     where a.synctype = 1;  
     --/* */  
      
       insert into zoho..zoho_sink_down_job_running_logs (zoho_module_id,job_date,job_status)  
       select 11 zoho_module_id , @todaydate , 'success : RFQ update sync'  
  
       
    end  
    else  
    begin  
      insert into zoho..zoho_sink_down_job_running_logs (zoho_module_id,job_date,job_status)  
       select 11 zoho_module_id , @todaydate , 'No records found for RFQ update sync'  
    end  
  
	/* M2-2837 Zoho - RFQ - Part Materials Sync up - DB */
		SELECT DISTINCT 
			A.RFQ_ID 
			,D.MATERIAL_NAME_EN AS MATERIAL  
		INTO #tmp_rfq_materials
		FROM MP_RFQ				A (NOLOCK) 
		JOIN MP_RFQ_PARTS		B (NOLOCK) ON A.RFQ_ID = B.RFQ_ID
		JOIN MP_MST_MATERIALS	D (NOLOCK) ON B.MATERIAL_ID = D.MATERIAL_ID

		
		 
		UPDATE A	
			SET 
				a.rfq_materials = B.MATERIALS
				,a.IsSync = 0  
				,a.IsProcessed = null  
				,a.Modified_Time = @todaydate
		FROM ZOHO..ZOHO_RFQ A  (nolock) 
		JOIN
		(
			SELECT DISTINCT
			A.RFQ_ID 
			,STUFF((SELECT ', ' + CAST(MATERIAL AS VARCHAR(500)) [text()]
					 FROM #tmp_rfq_materials 
					 WHERE RFQ_ID = A.RFQ_ID
					 FOR XML PATH(''), TYPE)
					.value('.','NVARCHAR(MAX)'),1,2,' ') MATERIALS
 
			FROM #tmp_rfq_materials A
		) B ON A.RFQ_NUMBER = B.RFQ_ID
		WHERE  LEN(ISNULL(A.rfq_materials,''))  != LEN(B.MATERIALS)

	/**/

	/* M2-3616 ZOHO - Push new Directory RFQ flag to ZOHO - DB */
	
		UPDATE A	
			SET 
				a.IsMfgCommunityRfq = B.IsMfgCommunityRfq
				,a.IsSync = 0  
				,a.IsProcessed = null  
				,a.Modified_Time = @todaydate
		FROM ZOHO..ZOHO_RFQ A (nolock) 
		JOIN
		mp_rfq  B (nolock)  ON A.RFQ_NUMBER = B.RFQ_ID
		WHERE B.IsMfgCommunityRfq = 1 

    commit  

	 drop table if exists #tmp_mfg_rfq_not_exists -- this is for newly created rfq id  
	 drop table if exists #tmp_mfg_rfq_exists     -- this is for rfq details are available in both database MFG and zoho  
	 drop table if exists #tmp_rfq_discipline  
	 drop table if exists #tmp_inserted_rfq_id  
	 drop table if exists #tmp_rfq_materials

   end try  
  
   begin catch  
    rollback   
  
     insert into zoho..zoho_sink_down_job_running_logs  
     (zoho_module_id,job_date,job_status)  
     select 11 zoho_module_id , @todaydate , 'fail : RFQ update sync ' + error_message()  
     set @lastidentity = @@identity  
       
     insert into zoho..zoho_sink_down_job_running_logs_detail (job_running_id , zoho_id)  
     select @lastidentity , rfq_id as company_zoho_id     from #tmp_mfg_rfq_exists  (nolock)  
  
     --here updated those records having some data issue to update the records  
     update c set c.isprocessed = 1 , c.syncdatetime = null  
     from zoho.dbo.zoho_sink_down_job_running_logs(nolock) a  
     join zoho.dbo.zoho_sink_down_job_running_logs_detail(nolock) b on a.job_running_id = b.job_running_id  
     join zoho..zoho_rfq  (nolock) c on b.zoho_id   = c.rfq_number  
     join #tmp_mfg_rfq_exists d on d.rfq_id =  c.rfq_number  
     where a.job_running_id = @lastidentity  
     and synctype = 1 and isnull(issync,0) = 0 and isnull(isprocessed,0) = 0  
  
      
   end catch  
    end  
end
GO
PRINT N'Altering Procedure [dbo].[proc_set_ActionTrackerRfq]...';


GO


/*
EXEC proc_set_ActionTrackerRfq
*/
ALTER PROCEDURE [dbo].[proc_set_ActionTrackerRfq]
AS
BEGIN

	-- M2-3378 Vision - RFQ Tracker - page data -DB

	DECLARE @RfqThumbnails			VARCHAR(1000) 
	DECLARE @RfqDefaultThumbnails	VARCHAR(1000) 

	DROP TABLE IF EXISTS #setActionTrackerRfq
	DROP TABLE IF EXISTS #setActionTrackerRfqUpdate

	
	SET @RfqDefaultThumbnails = 'https://s3.us-east-2.amazonaws.com/mfg.mp2020/thumbnails/3-d-big.png'

	IF DB_NAME() = 'mp2020_dev'
	BEGIN
		SET @RfqThumbnails = 'https://s3.us-east-2.amazonaws.com/mfg.mp2020/thumbnails/'
	END
	ELSE IF DB_NAME() = 'mp2020_uat'
	BEGIN
		SET @RfqThumbnails = 'https://s3.us-east-2.amazonaws.com/mfg.mp2020/thumbnails/'
	END
	ELSE IF DB_NAME() = 'mp2020_prod'
	BEGIN
		SET @RfqThumbnails = 'https://s3.us-east-2.amazonaws.com/mfg.mp2020.public/thumbnails/'
	END


	SELECT DISTINCT
		A.RFQ_ID
		,A.RFQ_NAME
		,CASE	WHEN A.RFQ_QUALITY = 126 THEN 5
				WHEN A.RFQ_QUALITY = 127 THEN 4
				WHEN A.RFQ_QUALITY = 128 THEN 3
				WHEN A.RFQ_QUALITY = 129 THEN 2
				WHEN A.RFQ_QUALITY = 130 THEN 1
				ELSE NULL
		 END RFQ_QUALITY
		,I.PARENT_RFQ_ID AS ParentRfqId
		,A.CONTACT_ID AS BuyerId
		,B.FIRST_NAME +' '+B.LAST_NAME AS Buyer
		,H.EMAIL AS BuyerEmail
		,C.NAME AS BUYERCOMPANY
		,ISNULL(E.TERRITORY_CLASSIFICATION_NAME,'') AS [LOCATION]
		,F.DESCRIPTION AS [STATUS]
		,A.QUOTES_NEEDED_BY AS RfqCloseDate
		,G.ReleaseDate AS RfqReleaseDate
		,ISNULL(@RfqThumbnails+J.FILE_NAME,@RfqDefaultThumbnails) AS RfqThumbnails
	INTO #setActionTrackerRfq
	FROM MP_RFQ			A (NOLOCK)
	JOIN MP_CONTACTS	B (NOLOCK) ON A.CONTACT_ID = B.CONTACT_ID  AND A.IsMfgCommunityRfq = 0 -- AND B.IsTestAccount = 0
	JOIN MP_COMPANIES	C (NOLOCK) ON B.COMPANY_ID = C.COMPANY_ID
	LEFT JOIN 
	(
		SELECT DISTINCT RFQ_ID , 4  RFQ_PREF_MANUFACTURING_LOCATION_ID 
		FROM MP_RFQ_PREFERENCES (NOLOCK) A WHERE RFQ_ID IN (SELECT RFQ_ID FROM MP_RFQ_PREFERENCES (NOLOCK) GROUP BY RFQ_ID HAVING COUNT(1) > 1)
		UNION 
		SELECT RFQ_ID ,  RFQ_PREF_MANUFACTURING_LOCATION_ID 
		FROM MP_RFQ_PREFERENCES (NOLOCK) A WHERE RFQ_ID IN (SELECT RFQ_ID FROM MP_RFQ_PREFERENCES (NOLOCK) GROUP BY RFQ_ID HAVING COUNT(1) = 1)
	
	) D  ON A.RFQ_ID= D.RFQ_ID
	LEFT JOIN MP_MST_TERRITORY_CLASSIFICATION E (NOLOCK) ON D.RFQ_PREF_MANUFACTURING_LOCATION_ID = E.TERRITORY_CLASSIFICATION_ID
	LEFT JOIN MP_MST_RFQ_BUYERSTATUS F (NOLOCK) ON A.RFQ_STATUS_ID = F.RFQ_BUYERSTATUS_ID
	LEFT JOIN (SELECT RFQ_ID , MAX(STATUS_DATE) ReleaseDate FROM MP_RFQ_RELEASE_HISTORY (NOLOCK) GROUP BY RFQ_ID) G ON A.RFQ_ID= G.RFQ_ID
	JOIN ASPNETUSERS				H (NOLOCK) ON B.USER_ID = H.ID
	LEFT JOIN MP_RFQ_CLONED_LOGS	I (NOLOCK) ON A.RFQ_ID = I.CLONED_RFQ_ID
	LEFT JOIN MP_SPECIAL_FILES		J (NOLOCK) ON A.file_id = J.file_id
	ORDER BY A.RFQ_ID


	-- INSERT & UPDATE RFQ BASIC DETAILS 
	MERGE ActionTrackerRFQ AS TARGET
    USING #setActionTrackerRfq AS SOURCE ON
    (TARGET.RfqId = SOURCE.RFQ_ID)
    WHEN MATCHED
    AND (
            ISNULL(TARGET.RfqName,'')				!= ISNULL(SOURCE.RFQ_NAME,'') 
			OR ISNULL(TARGET.Rating,'')				!= ISNULL(SOURCE.RFQ_QUALITY,'') 
			OR ISNULL(TARGET.BuyerCompany,'')		!= ISNULL(SOURCE.BUYERCOMPANY,'') 
			OR ISNULL(TARGET.[Location],'')         != ISNULL(SOURCE.[LOCATION],'') 
			OR ISNULL(TARGET.[Status],'')           != ISNULL(SOURCE.[STATUS],'')
			OR ISNULL(TARGET.[RfqCloseDate],'')     != ISNULL(SOURCE.[RfqCloseDate],'')
			OR ISNULL(TARGET.[RfqReleaseDate],'')   != ISNULL(SOURCE.[RfqReleaseDate],'') 
			OR ISNULL(TARGET.Buyer,'')				!= ISNULL(SOURCE.Buyer,'') 
			OR ISNULL(TARGET.BuyerEmail,'')			!= ISNULL(SOURCE.BuyerEmail,'') 
			OR ISNULL(TARGET.ParentRfqId,'')		!= ISNULL(SOURCE.ParentRfqId,'') 
			OR ISNULL(TARGET.RfqThumbnails,'')		!= ISNULL(SOURCE.RfqThumbnails,'') 
			OR ISNULL(TARGET.BuyerId,'')			!= ISNULL(SOURCE.BuyerId ,'')	
		)
	THEN
		UPDATE SET
			TARGET.RfqName				= ISNULL(SOURCE.RFQ_NAME,'') 
			,TARGET.Rating				= SOURCE.RFQ_QUALITY 
			,TARGET.BuyerCompany		= ISNULL(SOURCE.BUYERCOMPANY,'') 
			,TARGET.[Location]			= ISNULL(SOURCE.[LOCATION],'') 
			,TARGET.[Status]			= ISNULL(SOURCE.[STATUS],'') 
			,TARGET.[RfqCloseDate]		= ISNULL(SOURCE.[RfqCloseDate],'')
			,TARGET.[RfqReleaseDate]	= ISNULL(SOURCE.[RfqReleaseDate],'') 
			,TARGET.BuyerId				= SOURCE.BuyerId
			,TARGET.Buyer				= ISNULL(SOURCE.Buyer,'') 
			,TARGET.BuyerEmail			= ISNULL(SOURCE.BuyerEmail,'') 
			,TARGET.ParentRfqId			= ISNULL(SOURCE.ParentRfqId,'') 
			,TARGET.RfqThumbnails		= ISNULL(SOURCE.RfqThumbnails,'') 

	WHEN NOT MATCHED BY TARGET 
	THEN 
	INSERT (RfqId,RfqName,Rating,BuyerCompany,[Location],[Status],[RfqCloseDate],[RfqReleaseDate],BuyerId,ParentRfqId ,RfqThumbnails)
	VALUES (SOURCE.RFQ_ID,ISNULL(SOURCE.RFQ_NAME,''),SOURCE.RFQ_QUALITY,ISNULL(SOURCE.BUYERCOMPANY,''),ISNULL(SOURCE.[LOCATION],'') ,ISNULL(SOURCE.[STATUS],'') , ISNULL(SOURCE.[RfqCloseDate],''),ISNULL(SOURCE.[RfqReleaseDate],'') , SOURCE.BuyerId,SOURCE.ParentRfqId ,SOURCE.RfqThumbnails)   ;    


	SELECT 
		a.RfqId 
		, (SELECT COUNT(DISTINCT supplier_id ) FROM mp_rfq_supplier_read (NOLOCK) WHERE rfq_id = a.RfqId ) AS Reviewed
		, (SELECT COUNT(DISTINCT company_id ) FROM mp_rfq_supplier_likes (NOLOCK) WHERE rfq_id = a.RfqId ) AS Liked
		, (SELECT COUNT(DISTINCT contact_id ) FROM mp_rfq_quote_suplierstatuses (NOLOCK) WHERE rfq_id = a.RfqId AND rfq_userStatus_id = 2 ) AS Marked 
		, 
		(
		  SELECT SUM (contact_id) FROM
		  (
			SELECT COUNT(DISTINCT contact_id ) AS contact_id FROM mp_rfq_quote_supplierquote (NOLOCK) WHERE rfq_id = a.RfqId AND is_quote_submitted = 1 AND is_rfq_resubmitted = 0
			UNION ----M2-4428 : here fetching data for decline quote
			SELECT COUNT(DISTINCT contact_id ) AS contact_id FROM mp_rfq_quote_supplierquote (NOLOCK) WHERE rfq_id = a.RfqId AND is_quote_submitted = 1 AND is_rfq_resubmitted = 1 AND is_quote_declined = 1 
		  ) QuotesCnt
		) AS Quotes 
	INTO #setActionTrackerRfqUpdate
	FROM ActionTrackerRFQ  (NOLOCK) A
	WHERE [Status] IN ('Quoting','Closed','Awarded','Not Awarded')


	-- UPDATE RFQ - Viewed ,Liked ,Marked ,Quoted INFO
	MERGE ActionTrackerRFQ AS TARGET
    USING #setActionTrackerRfqUpdate AS SOURCE ON
    (TARGET.RfqId = SOURCE.RfqId)
    WHEN MATCHED
    AND (
            TARGET.Reviewed				!= SOURCE.Reviewed 
			OR TARGET.Liked				!= SOURCE.Liked 
			OR TARGET.Marked			!= SOURCE.Marked 
			OR TARGET.Quotes			!= SOURCE.Quotes 
		)
	THEN
		UPDATE SET
            TARGET.Reviewed			= SOURCE.Reviewed 
			, TARGET.Liked			= SOURCE.Liked 
			, TARGET.Marked			= SOURCE.Marked 
			, TARGET.Quotes			= SOURCE.Quotes ;

	---- if duplicate RFQ id inserted into ActionTrackerRFQ then Job failed SQLJob_Set_ActionTracker_Rfq_Data
	---- so prevent this below code is written to remove dupicate RFQs
	; WITH cteDuplicateRFQ AS
	(
		SELECT   RfqId 
		FROM ActionTrackerRFQ (NOLOCK) 	
		GROUP BY RfqId	 
		HAVING COUNT(1) > 1		
	) 
	DELETE FROM ActionTrackerRFQ WHERE id in 
	(
		SELECT id FROM  
		(	SELECT b.id , b.rfqid,ROW_NUMBER() OVER( PARTITION BY b.rfqid ORDER BY id DESC) rn
			FROM cteDuplicateRFQ a 
			JOIN ActionTrackerRFQ(NOLOCK) b on a.rfqid = b.RfqId
		) deleteATR 
		WHERE rn > 1
	)

END
GO
PRINT N'Altering Procedure [dbo].[proc_set_buyer_dashboard_new_suppliers]...';


GO

/*

EXEC proc_set_buyer_dashboard_new_suppliers

*/
ALTER PROCEDURE [dbo].[proc_set_buyer_dashboard_new_suppliers]
AS
BEGIN

		/*
		-- Created	:	May 28, 2020
					:	M2-2904 Buyer - New Manufacturer module - DB
		*/


		INSERT INTO mp_buyer_dashboard_new_suppliers
		(BuyerId,SupplierId)
		SELECT a.buyer_id, a.supplier_id
		FROM
		(
			SELECT a.contact_id buyer_id, b.supplier_id 
			FROM mp_contacts a (NOLOCK)
			CROSS APPLY
			(
				SELECT DISTINCT supplier_id
				FROM mp_gateway_subscription_customers a (NOLOCK) 
				JOIN mp_gateway_subscriptions b (NOLOCK) ON a.id = b.customer_id AND b.status = 'Live'
					AND CONVERT(DATE,b.created+7) < CONVERT(DATE,GETUTCDATE()) 
			) b
			WHERE a.is_buyer = 1 AND a.is_active = 1 
		) a
		LEFT JOIN mp_buyer_dashboard_new_suppliers  b (NOLOCK) ON a.buyer_id = b.BuyerId and a.supplier_id = b.SupplierId
		WHERE b.SupplierId IS NULL
END
GO
PRINT N'Altering Procedure [dbo].[proc_set_ClaimProfile]...';


GO


/*

EXEC proc_set_ClaimProfile
@ContactId = 1372454
,@CompanyId = 1800414
,@EmailId = 'schoudhari123@yopmail.com'

*/
ALTER  PROCEDURE proc_set_ClaimProfile
(
	@ContactId	INT
	,@CompanyId	INT
	,@EmailId	VARCHAR(250)
)
AS
BEGIN

	-- M2-3569  M - Claim my profile

	DECLARE @IsCommunityExternalDirectoryMessagesExists INT = 0
	DECLARE @IsCommunityLeadStreamExists	INT = 0
	DECLARE @TransactionStatus				VARCHAR(MAX) = 'Failed'

	BEGIN TRAN
	BEGIN TRY
		-- Checking Community External messages exists or not
		SET @IsCommunityExternalDirectoryMessagesExists = (SELECT COUNT(1) FROM mpCommunityExternalDirectoryMessages WHERE SupplierEmail = @EmailId AND IsClaimed = 0)
		-- Checking Community Leadstream exists or not
		SET @IsCommunityLeadStreamExists = (SELECT COUNT(1) FROM mpCommunityLeadStream WHERE SupplierEmail = @EmailId AND IsClaimed = 0)

		-- Reteriving Community External messages if exists
		IF @IsCommunityExternalDirectoryMessagesExists > 0
		BEGIN

		
			DECLARE @LeadId				INT
			DECLARE @LeadEmailMessageId	INT
			DECLARE @MessageId			INT
			DECLARE @Id					INT
			DECLARE @BuyerId			INT
			DECLARE @BuyerEmail			VARCHAR(150)
			DECLARE @BuyerFirstName		VARCHAR(150)
			DECLARE @BuyerLastName		VARCHAR(150)
			DECLARE @BuyerCompanyName	VARCHAR(250)
			DECLARE @BuyerPhone			VARCHAR(50)
			DECLARE @MessageFileId		INT
			DECLARE @EmailSubject		VARCHAR(250)
			DECLARE @EmailBody			VARCHAR(MAX)
			DECLARE @IpAddress			VARCHAR(150)
			DECLARE @EmailMessageDate	DATETIME
			DECLARE @IsNdaRequired		BIT

		
			DECLARE crCommunityExternalDirectoryMessages CURSOR FOR 
			SELECT 
				Id
				,BuyerEmail
				,BuyerFirstName
				,BuyerLastName
				,BuyerCompanyName
				,BuyerPhone
				,MessageFileId
				,EmailSubject
				,EmailBody
				,IpAddress
				,EmailMessageDate
				,IsNdaRequired 
			FROM mpCommunityExternalDirectoryMessages WHERE SupplierEmail = @EmailId AND IsClaimed = 0
		
		
			OPEN crCommunityExternalDirectoryMessages;
			FETCH NEXT FROM crCommunityExternalDirectoryMessages INTO @Id,@BuyerEmail,@BuyerFirstName,@BuyerLastName,@BuyerCompanyName,@BuyerPhone,@MessageFileId,@EmailSubject,@EmailBody,@IpAddress,@EmailMessageDate,@IsNdaRequired ;

			WHILE @@FETCH_STATUS = 0
			BEGIN

				SET @BuyerId = 
				(
					SELECT b.contact_id
					FROM aspnetusers (NOLOCK) a
					JOIN mp_contacts (NOLOCK) b ON a.id = b.[user_id]
					WHERE email = @BuyerEmail
				)

				INSERT INTO mp_lead
				(company_id , lead_source_id , lead_from_contact , ip_address , lead_date)
				SELECT @CompanyId , 13 , ISNULL(@BuyerId,0) , CASE WHEN @BuyerId IS NULL THEN @IpAddress ELSE '' END , @EmailMessageDate
				SET @LeadId = @@IDENTITY
		
				IF @LeadId > 0 
				BEGIN
				
					INSERT INTO mp_lead_emails
					(first_name , last_name , company , email , phoneno , email_subject , email_message)
					SELECT @BuyerFirstName , @BuyerLastName , @BuyerCompanyName , @BuyerEmail , @BuyerPhone ,@EmailSubject ,@EmailBody
					SET @LeadEmailMessageId = @@IDENTITY

					INSERT INTO mp_lead_email_mappings (lead_id,lead_email_message_id)
					SELECT @LeadId , @LeadEmailMessageId
				END
				
				
				IF @MessageFileId > 0
				BEGIN

					INSERT INTO mp_messages
					( 
						rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read 
						,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author 
						,is_nda_required
					)
					SELECT
						NULL as rfq_id
						, 225				as message_type_id 
						, @EmailSubject		as  message_subject 
						, @EmailBody		as message_descr
						, GETUTCDATE()		as message_date
						, NULL				as from_contact_id 
						, @ContactId		as to_contact_id 
						, 0					as message_sent
						, 0					as message_read
						, 1					as trash
						, 0					as from_trash
						, 0					as real_from_cont_id
						, 0					as is_last_message
						, 0					as message_status_id_recipient
						, 0					as message_status_id_author
						, @IsNdaRequired
					SET @MessageId = @@identity

					INSERT INTO mp_message_file (MESSAGE_ID, [FILE_ID])
					SELECT @MessageId , @MessageFileId 

					INSERT INTO mp_lead_message_mapping (lead_id, message_id)
					SELECT @LeadId ,@MessageId 
					
				END

				UPDATE mpCommunityExternalDirectoryMessages SET IsClaimed = 1 WHERE Id = @Id

			FETCH NEXT FROM crCommunityExternalDirectoryMessages INTO @Id,@BuyerEmail,@BuyerFirstName,@BuyerLastName,@BuyerCompanyName,@BuyerPhone,@MessageFileId,@EmailSubject,@EmailBody,@IpAddress,@EmailMessageDate,@IsNdaRequired ;
			END;

			CLOSE crCommunityExternalDirectoryMessages;
			DEALLOCATE crCommunityExternalDirectoryMessages;
		
		END
		
		
		
		
		--SELECT * FROM mp_lead WHERE LEAD_SOURCE_ID = 6
		--		SELECT TOP 10 * FROM mp_lead WHERE LEAD_ID = 64655;
		--		SELECT TOP 10 * FROM mp_lead_emails WHERE lead_email_message_id=1585;
		--		SELECT TOP 10 * FROM mp_lead_email_mappings WHERE LEAD_ID = 263009;
		--		SELECT TOP 10 * FROM mp_lead_message_mapping WHERE LEAD_ID = 263009;

		--		SELECT * FROM MP_MESSAGES WHERE MESSAGE_ID = 80972
		
		
		--SELECT * FROM mpCommunityExternalDirectoryMessages
		--SELECT * FROM mpCommunityLeadStream
		--SELECT * FROM mp_mst_lead_source
	SET @TransactionStatus = 'Success'
	
	COMMIT
	END TRY
	BEGIN CATCH
	
		
		ROLLBACK
		
		SET @TransactionStatus = 'Failed - ' + ERROR_MESSAGE()
		SELECT @TransactionStatus TransactionStatus
		

	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[proc_set_company_subscription]...';


GO


/*
SELECT * FROM  mp_gateway_subscription_customers (NOLOCK) WHERE gateway_id  =310
SELECT * FROM  mp_gateway_subscription_customers (NOLOCK) WHERE subscription_customer_id = 'cus_Mfmjp4NA5U47kH' 
SELECT * FROM mp_gateway_subscriptions (NOLOCK) WHERE  customer_id =3565
SELECT * FROM mp_companies (NOLOCK) WHERE company_id = 1768083
SELECT * FROM mp_gateway_subscription_products (NOLOCK) WHERE ProductPriceAPIId = 'price_1LfoppGWEpBLxDePfFENpgUq'

update mp_gateway_subscriptions set 
	next_billing_at	= '2022-11-25 13:58:07.000'
	,subscription_start	= '2022-11-24 13:58:07.000'
	,subscription_end = '2022-12-24 13:58:07.000'
WHERE  customer_id =3565 and id = 1048

EXEC proc_set_company_subscription
	@StripeCustomerId			=  'cus_Mfmjp4NA5U47kH'	   
	,@Email						=  ''
	,@SubscriptionId    		=  'sub_1LwRAKGWEpBLxDePrabjMz6K'		            
	,@TotalAmout				=  '7900'		
	,@SubscriptionStart  		=  '2022-11-24'		      
	,@SubscriptionEnd       	=  '2022-12-24'		
	,@ProductPriceAPIId			=  'price_1LfoppGWEpBLxDePfFENpgUq'		
	,@SubscriptionInterval    	=  'month'		                
	,@SubscriptionIntervalCount	=  '1'		            
	,@InvoiceId            		=  'in_1M7fxTGWEpBLxDePBkUKAUEn'
	,@SubscriptionStatus		=  'active'   
	,@RequestType				=  'Recurring Success'

*/
ALTER PROCEDURE [dbo].[proc_set_company_subscription]
(
	@ContactId						INT          = NULL   
	,@StripeCustomerId				VARCHAR(250)                 
	,@Email    						VARCHAR(250) =  NULL 
	,@PaymentStatus					VARCHAR(50)  =  NULL	           
	,@SessionStatus     			VARCHAR(50)  =  NULL	           
	,@SubscriptionId    			VARCHAR(250)            
	,@TotalAmout					BIGINT       =  NULL	
	,@SubscriptionStart  			DATETIME      
	,@SubscriptionEnd       		DATETIME
	,@ProductPriceAPIId				VARCHAR(250)
	,@SubscriptionInterval    		VARCHAR(50)                
	,@SubscriptionIntervalCount		INT            
	,@InvoiceId            			VARCHAR(250)
	,@SubscriptionStatus          	VARCHAR(50)  
	,@RequestType                   VARCHAR(50) = NULL 
)
AS
BEGIN

	-- M2-4663 Webhooks or API call after Successful Payment from the Stripe Hosted Payment Page -DB
	DECLARE @TransactionStatus VARCHAR(50) = ''
	DECLARE @ErrorMessage VARCHAR(MAX) = ''
	DECLARE @CompanyId INT = 0 
	DECLARE @IsCompanyHasPreviousSubscription	INT = 0 
	DECLARE @SubscriptionCustomersRunningId		BIGINT = 0
	DECLARE @SubscriptionProductRunningId		BIGINT = 0
	--M2-5133
	DECLARE @SourceType  VARCHAR(20)
	DECLARE @AccountTypeId INT
	DECLARE @Event VARCHAR(50)

	----below key is different on production (price_1NYtDIGWEpBLxDePwFIo5PPc) and QA and UAT key is same i.e price_1NRG8mGWEpBLxDePxKvHhGnO
	IF @ProductPriceAPIId = 'price_1NYtDIGWEpBLxDePwFIo5PPc' -- Starter package APIId
	BEGIN
		SET @AccountTypeId = 313
		SET @SourceType = 'SP-Purchased'
		SET @Event = 'paid_status_starter'
	END
	ELSE
	BEGIN
		SET @AccountTypeId = 84
		SET @SourceType = 'GP-Purchased'
		SET @Event = 'paid_status_growth'
	END
	--  log subscription webhook into the db 
	DECLARE @WebhookData			VARCHAR(MAX) = ''
	SET @WebhookData = 
	'@ContactId					=  '''+CONVERT(VARCHAR(500),ISNULL(@ContactId,'0'))+'''	 
	,@StripeCustomerId			=  '''+CONVERT(VARCHAR(500),ISNULL(@StripeCustomerId,''))+'	''                 
	,@Email    					=  '''+CONVERT(VARCHAR(500),ISNULL(@Email,''))+'''	 	
	,@PaymentStatus				=  '''+CONVERT(VARCHAR(500),ISNULL(@PaymentStatus,''))+'''	 	        
	,@SessionStatus     		=  '''+CONVERT(VARCHAR(500),ISNULL(@SessionStatus,''))+'''	 	               
	,@SubscriptionId    		=  '''+CONVERT(VARCHAR(500),ISNULL(@SubscriptionId,''))+'''	 		            
	,@TotalAmout				=  '''+CONVERT(VARCHAR(500),ISNULL(@TotalAmout,'0'))+'''	 
	,@SubscriptionStart  		=  '''+CONVERT(VARCHAR,ISNULL(@SubscriptionStart,''), 21)+'''	 	      
	,@SubscriptionEnd       	=  '''+CONVERT(VARCHAR,ISNULL(@SubscriptionEnd,''), 21)+'''	 		
	,@ProductPriceAPIId			=  '''+CONVERT(VARCHAR(500),ISNULL(@ProductPriceAPIId,'')	)+'''	 	
	,@SubscriptionInterval    	=  '''+CONVERT(VARCHAR(500),ISNULL(@SubscriptionInterval,''))+'''	 		                
	,@SubscriptionIntervalCount	=  '''+CONVERT(VARCHAR(500),ISNULL(@SubscriptionIntervalCount,'0'))+'''	 	            
	,@InvoiceId            		=  '''+CONVERT(VARCHAR(500),ISNULL(@InvoiceId,'') )+'''	 
	,@SubscriptionStatus		=  '''+CONVERT(VARCHAR(500),ISNULL(@SubscriptionStatus,''))+'''	   
	'

	INSERT INTO mpGatewayWebhookLogs (ContactId ,Email,WebhookResponse)
	SELECT @ContactId ,  @Email , @WebhookData
	-- M2-4686
	-- Get the contact id using @StripeCustomerId -> subscription_customer_id 
	IF ( SELECT  COUNT(1) FROM  mp_gateway_subscription_customers (NOLOCK) WHERE subscription_customer_id = @StripeCustomerId ) = 1 
	BEGIN
	   	SELECT @ContactId = supplier_id FROM mp_gateway_subscription_customers (NOLOCK) WHERE subscription_customer_id = @StripeCustomerId
	END

	-- M2-4701 
	-- Get the contact id using @Email if @ContactId IS NULL 
	IF @ContactId IS NULL 
	BEGIN
		SELECT @ContactId = b.contact_id 
		FROM  aspnetusers (NOLOCK) a  
		JOIN mp_contacts (NOLOCK) b ON a.id = b.user_id  WHERE   a.email = @Email  
	END
	
	-- fetching company id based on contact 
	SELECT @CompanyId = company_id FROM mp_contacts (NOLOCK) WHERE contact_id = @ContactId
	SELECT @SubscriptionProductRunningId = id FROM mp_gateway_subscription_products (NOLOCK) WHERE ProductPriceAPIId = @ProductPriceAPIId
		
	-- fetching stripe customer id based on contact and company
	SELECT @IsCompanyHasPreviousSubscription = COUNT(1)
	FROM  mp_gateway_subscription_customers (NOLOCK) 
	WHERE supplier_id = @ContactId AND company_id = @CompanyId AND  gateway_id = 310
		
	
		BEGIN TRY
			BEGIN TRAN

			--  new subscription
			IF @IsCompanyHasPreviousSubscription = 0 AND @SubscriptionProductRunningId > 0
			BEGIN
					--  adding manufacturer info related to subscription
					INSERT INTO [mp_gateway_subscription_customers] (gateway_id ,company_id ,supplier_id ,subscription_customer_id)
					SELECT 310 , @CompanyId ,  @ContactId , @StripeCustomerId
					SET @SubscriptionCustomersRunningId = @@IDENTITY

					IF @SubscriptionCustomersRunningId > 0 
					BEGIN
						--  adding subscription info
						INSERT INTO mp_gateway_subscriptions
						(
							subscription_id ,customer_id ,plan_id ,next_billing_at 
							,subscription_start ,subscription_end
							,status ,created  ,PaymentStatus ,SessionStatus ,TotalAmout 
							,SubscriptionInterval ,SubscriptionIntervalCount ,InvoiceId,RequestType
						)
						SELECT @SubscriptionId ,@SubscriptionCustomersRunningId ,@SubscriptionProductRunningId 
						,DATEADD(day , @SubscriptionIntervalCount ,@SubscriptionStart) , @SubscriptionStart ,@SubscriptionEnd
						,@SubscriptionStatus ,GETUTCDATE() ,@PaymentStatus ,@SessionStatus ,@TotalAmout     	                
						,@SubscriptionInterval ,@SubscriptionIntervalCount ,@InvoiceId,@RequestType

						/* M2-4945 HubSpot - Integrate Reshape User Registration API -DB */
							---- adding company details in below table
							IF @CompanyId > 0 
							BEGIN
								IF NOT EXISTS (SELECT CompanyId FROM mpAccountPaidStatusDetails(NOLOCK) WHERE CompanyId = @CompanyId )
								BEGIN
									 INSERT INTO mpAccountPaidStatusDetails (CompanyId,OldValue,NewValue,IsProcessed,IsSynced,SourceType)
									 SELECT @CompanyId, 83 AS OldValue, @AccountTypeId AS NewValue, NULL AS IsProcessed,0 AS IsSynced, @SourceType AS SourceType
								END
							END
						/* */
								
						-- adding in paid manufacturer master list
						IF (SELECT COUNT(1) FROM mp_registered_supplier  (NOLOCK)  WHERE company_id  = @CompanyId) = 0 
						BEGIN 
							IF @SubscriptionStatus = 'canceled'
							BEGIN
								UPDATE mp_companies
									SET IsEligibleForGrowthPackage = 1
									,IsGrowthPackageTaken = 0 
									,IsStarterPackageTaken = 0
									--,IsStarterFreeTrialTaken = 0 --- commented on 25 - jul 
								WHERE company_id = @CompanyId
								
							END
							ELSE
							BEGIN
								INSERT INTO mp_registered_supplier (company_id ,is_registered ,created_on ,account_type ,account_type_source )
								SELECT @CompanyId ,1 ,GETUTCDATE() , @AccountTypeId , 310
							END 					
						END
						ELSE
						BEGIN

							IF @SubscriptionStatus = 'canceled'
							BEGIN
							--- convert this user to Basic so deleted from below table
									DELETE FROM mp_registered_supplier WHERE company_id = @CompanyId

							--- reset the fields
									UPDATE mp_companies
									SET IsEligibleForGrowthPackage = 1
									,IsGrowthPackageTaken = 0 
									,IsStarterPackageTaken = 0
									--,IsStarterFreeTrialTaken = 0  --- commented on 25 - jul 
									WHERE company_id = @CompanyId
									
						END
						ELSE
						BEGIN

								UPDATE mp_registered_supplier
								SET
									updated_on = GETUTCDATE()
									,account_type = @AccountTypeId 
									,account_type_source = 310
								WHERE company_id = @CompanyId
							END

						END

						-- adding manufacturer in directory datasync
						INSERT INTO XML_SupplierProfileCaptureChanges (CompanyId ,Event ,CreatedOn)
						SELECT @CompanyId ,@Event ,GETUTCDATE() 

						-- updating manufacturer growth package taken flag
						IF @AccountTypeId = 84
						BEGIN
							IF @SubscriptionStatus != 'canceled'
						UPDATE mp_companies SET IsEligibleForGrowthPackage =1 , IsGrowthPackageTaken = 1 WHERE company_id = @CompanyId
													
							IF @SubscriptionStatus = 'canceled'
							UPDATE mp_companies SET IsEligibleForGrowthPackage =1 , IsGrowthPackageTaken = 0 WHERE company_id = @CompanyId

						END
						IF @AccountTypeId = 313
						BEGIN
							--- Only 1st time user go for starter package then  IsStarterFreeTrialTaken = 1 and this field never update 
							IF @SubscriptionStatus = 'trialing'
							UPDATE mp_companies SET IsStarterFreeTrialTaken =1 WHERE company_id = @CompanyId

							IF @SubscriptionStatus != 'canceled'
							UPDATE mp_companies SET IsStarterPackageTaken =1 WHERE company_id = @CompanyId
								
							IF @SubscriptionStatus = 'canceled'
							UPDATE mp_companies SET IsStarterPackageTaken =0 WHERE company_id = @CompanyId
						END
						-- adding rfq qouting capatities as per plan for manufacturer
						IF @AccountTypeId = 84
						BEGIN
						
							INSERT INTO mp_gateway_subscription_company_processes (company_id ,part_category_id ,is_active)
							SELECT @CompanyId , part_category_id , 1 FROM [mp_gateway_subscription_products] (NOLOCK) a
							JOIN [mp_gateway_subscription_product_process_mappings] (NOLOCK) b
								ON a.id = b.ProductId
							JOIN [mp_mst_part_category] (NOLOCK) c
								ON b.PartCategoryId = c.parent_part_category_id
							WHERE a.id  = @SubscriptionProductRunningId 
								AND status_id = 2
								AND level = 1
						END

						
						SET @TransactionStatus =  'Success'
						SET @ErrorMessage = ''
						
					END
					ELSE
					BEGIN

						SET @TransactionStatus =  'Fail'
						SET @ErrorMessage = ERROR_MESSAGE()
		
					END

			END
			--  existing subscription
			ELSE IF @IsCompanyHasPreviousSubscription > 0  AND @SubscriptionProductRunningId > 0
			BEGIN
					--  adding manufacturer info related to subscription
					SET @SubscriptionCustomersRunningId = 
					(
						
						SELECT id
						FROM  mp_gateway_subscription_customers (NOLOCK) 
						WHERE supplier_id = @ContactId AND company_id = @CompanyId AND  gateway_id = 310
					
					)

					IF @SubscriptionCustomersRunningId > 0 
					BEGIN
						--  adding subscription info
						IF 
						((  
							SELECT COUNT(1) 
							FROM mp_gateway_subscriptions (NOLOCK) 
							WHERE 
								subscription_id =@SubscriptionId AND  customer_id = @SubscriptionCustomersRunningId 
								AND plan_id =@SubscriptionProductRunningId AND subscription_start = @SubscriptionStart AND subscription_end = @SubscriptionEnd 
								AND status = @SubscriptionStatus 
						)=0)
						BEGIN
							INSERT INTO mp_gateway_subscriptions
							(
								subscription_id ,customer_id ,plan_id ,next_billing_at 
								,subscription_start ,subscription_end
								,status ,created  ,PaymentStatus ,SessionStatus ,TotalAmout 
								,SubscriptionInterval ,SubscriptionIntervalCount ,InvoiceId,RequestType
							)
							SELECT @SubscriptionId ,@SubscriptionCustomersRunningId ,@SubscriptionProductRunningId 
							,DATEADD(day , @SubscriptionIntervalCount ,@SubscriptionStart) , @SubscriptionStart ,@SubscriptionEnd
							,@SubscriptionStatus ,GETUTCDATE() ,@PaymentStatus ,@SessionStatus ,@TotalAmout     	                
							,@SubscriptionInterval ,@SubscriptionIntervalCount ,@InvoiceId,@RequestType
						END
						
						-- adding in paid manufacturer master list
						IF (SELECT COUNT(1) FROM mp_registered_supplier  (NOLOCK)  WHERE company_id  = @CompanyId) = 0 
						BEGIN 
							IF @SubscriptionStatus = 'canceled'
							BEGIN
							--- reset the fields
								UPDATE mp_companies
									SET IsEligibleForGrowthPackage = 1
									,IsGrowthPackageTaken = 0 
									,IsStarterPackageTaken = 0
									---,IsStarterFreeTrialTaken = 0  --- commented on 25 - jul 
								WHERE company_id = @CompanyId
							END
							ELSE
							BEGIN
								INSERT INTO mp_registered_supplier (company_id ,is_registered ,created_on ,account_type ,account_type_source )
								SELECT @CompanyId ,1 ,GETUTCDATE() , @AccountTypeId , 310
							END 					
						END
						ELSE
						BEGIN
							 -- here need to check that if active subscription exists for that company 
							 -- then 
							IF @SubscriptionStatus = 'canceled'
							BEGIN
								 
									IF EXISTS 
									 (
										 SELECT TOP 1 b.id
										 FROM mp_gateway_subscription_customers (NOLOCK) a 
										 JOIN mp_gateway_subscriptions (NOLOCK) b on b.customer_id = a.id
										 where a.company_id = @CompanyID --17700231
										 AND CAST( GETUTCDATE()  AS DATE) BETWEEN CAST ( b.subscription_start AS DATE) AND CAST ( b.subscription_end AS DATE) 
										 AND b.[status] IN ( 'active','trialing')
										 ORDER BY b.id DESC
									 )
									 BEGIN
										
										IF @AccountTypeId = 313
										BEGIN
											UPDATE mp_companies	set IsEligibleForGrowthPackage = 1,IsStarterPackageTaken = 0 WHERE company_id = @CompanyId
											DELETE FROM mp_registered_supplier WHERE company_id = @CompanyId AND account_type = @AccountTypeId 
										END
										ELSE 
											DELETE FROM mp_registered_supplier WHERE company_id = @CompanyId
									 END
									 ELSE
									 BEGIN
									 
										--- convert this user to Basic so deleted from below table
										DELETE FROM mp_registered_supplier WHERE company_id = @CompanyId

										--- reset the fields
										UPDATE mp_companies
										set IsEligibleForGrowthPackage = 1
										,IsGrowthPackageTaken = 0 
										,IsStarterPackageTaken = 0
										---,IsStarterFreeTrialTaken = 0 --- commented on 25 - jul 
										where company_id = @CompanyId
									END
								END 
							ELSE
							BEGIN
							
								UPDATE mp_registered_supplier
								SET
									updated_on = GETUTCDATE()
									----,account_type = 84 
									,account_type = @AccountTypeId
									,account_type_source = 310
								WHERE company_id = @CompanyId
							END 
						 END 

						-- adding manufacturer in directory datasync
						IF @AccountTypeId = 84
						BEGIN
							INSERT INTO XML_SupplierProfileCaptureChanges (CompanyId ,Event ,CreatedOn)
							SELECT @CompanyId ,'paid_status_growth' ,GETUTCDATE() 
						END

						IF @AccountTypeId = 313
						BEGIN
							IF @SubscriptionStatus = 'canceled'
							BEGIN
								INSERT INTO XML_SupplierProfileCaptureChanges (CompanyId ,Event ,CreatedOn)
								SELECT @CompanyId ,'starter_package_canceled' ,GETUTCDATE() 
							END
							ELSE 
							BEGIN
								INSERT INTO XML_SupplierProfileCaptureChanges (CompanyId ,Event ,CreatedOn)
								SELECT @CompanyId ,'paid_status_starter' ,GETUTCDATE() 
							END 
						END
						-- updating manufacturer growth package taken flag
						IF @AccountTypeId = 84
						BEGIN
							IF @SubscriptionStatus != 'canceled'
							UPDATE mp_companies SET IsEligibleForGrowthPackage =1 , IsGrowthPackageTaken = 1 WHERE company_id = @CompanyId

							IF @SubscriptionStatus = 'canceled'
							UPDATE mp_companies SET IsEligibleForGrowthPackage =1 , IsGrowthPackageTaken = 0 WHERE company_id = @CompanyId

						END
						IF @AccountTypeId = 313
						BEGIN
							
							IF @SubscriptionStatus != 'canceled'
							UPDATE mp_companies SET IsStarterPackageTaken =1 WHERE company_id = @CompanyId
													
							IF @SubscriptionStatus = 'canceled'
							UPDATE mp_companies SET IsStarterPackageTaken =0 WHERE company_id = @CompanyId
						END
						/* M2 4888 / 4685 if recurring subscription then don't need to create data for rfq quoting capability
							---- adding rfq qouting capatities as per plan for manufacturer
							--INSERT INTO mp_gateway_subscription_company_processes (company_id ,part_category_id ,is_active)
							--SELECT @CompanyId , part_category_id , 1 FROM [mp_gateway_subscription_products] (NOLOCK) a
							--JOIN [mp_gateway_subscription_product_process_mappings] (NOLOCK) b
							--	ON a.id = b.ProductId
							--JOIN [mp_mst_part_category] (NOLOCK) c
							--	ON b.PartCategoryId = c.parent_part_category_id
							--WHERE a.id  = @SubscriptionProductRunningId 
							--	AND status_id = 2
							--	AND level = 1
						*/
							/* below code added if later growth package taken from any users with M2-5133 */
							IF NOT EXISTS 
							(
								SELECT company_id FROM mp_gateway_subscription_company_processes  WHERE company_id = @CompanyId
							)
							BEGIN
								INSERT INTO mp_gateway_subscription_company_processes (company_id ,part_category_id ,is_active)
								SELECT @CompanyId , part_category_id , 1 FROM [mp_gateway_subscription_products] (NOLOCK) a
								JOIN [mp_gateway_subscription_product_process_mappings] (NOLOCK) b
									ON a.id = b.ProductId
								JOIN [mp_mst_part_category] (NOLOCK) c
									ON b.PartCategoryId = c.parent_part_category_id
								WHERE a.id  = @SubscriptionProductRunningId 
									AND status_id = 2
									AND level = 1
							END

						SET @TransactionStatus =  'Success'
						SET @ErrorMessage = ''
					END
					ELSE
					BEGIN
						SET @TransactionStatus =  'Fail'
						SET @ErrorMessage = ERROR_MESSAGE()
					END

			END
			ELSE 
			BEGIN
				SET @TransactionStatus =  'Success'
			END

			IF @TransactionStatus = 'Success' OR  @TransactionStatus = '' 
			BEGIN				
				COMMIT
			END
			ELSE IF @TransactionStatus = 'Fail' 
			BEGIN				
				ROLLBACK
			END

		
			SELECT @TransactionStatus AS TransactionStatus , @ErrorMessage  ErrorMessage
		
		END TRY
		BEGIN CATCH
			
			SET @TransactionStatus =  'Fail'
			SET @ErrorMessage = ERROR_MESSAGE()

			ROLLBACK
			SELECT @TransactionStatus AS TransactionStatus , @ErrorMessage  ErrorMessage

		END CATCH
	
END
GO
PRINT N'Altering Procedure [dbo].[proc_set_daily_summary_notification]...';


GO

ALTER   procedure [dbo].[proc_set_daily_summary_notification]  
as  
begin  
  
 /* M2-770 Daily Summary Email for buyers- API*/  
  
  
 declare @message_type_id int = (select  message_type_id from mp_mst_message_types where message_type_name = 'BUYER_DAILY_SUMMARY')  
   
 declare @processStatus as varchar(max) = 'SUCCESS'  
 declare @from_username as nvarchar(100) = ''  
 declare @from_user_contactimage as nvarchar(500) = ''  
 declare @from_user_email varchar(200) = ''  
 declare @pending_awards varchar(50) = '0'  
 declare @new_qoutes_received varchar(50) = '0'  
 declare @nda_to_approve varchar(50) = '0'  
 declare @rating_received varchar(50) = '0'  
 declare @rating_to_performed varchar(50) = '0'  
 declare @likes varchar(50) = '0'  
 declare @follows varchar(50) = '0'  
 declare @email_msg_subject as nvarchar(250) = ''  
 declare @email_msg_body as nvarchar(max) = ''  
 declare @notification_email_running_id  table (id int identity(1,1) ,  email_message_id int null)  
 declare @today_date  as datetime =  getutcdate()  
  
 /* getting email subject & body */  
  select   
   @email_msg_body = email_body_template, @email_msg_subject = email_subject_template  
  from mp_mst_email_template where message_type_id = @message_type_id and is_active = 1   
    
 /**/  
   
 drop table if exists #all_buyers  
  
 create table #all_buyers  
 (  
  contact_id   int,  
  summary_date  date default convert(date,getutcdate()) ,  
  pending_awards  varchar(50) default 0,  
  new_qoutes_received varchar(50) default 0,  
  nda_to_approve  varchar(50) default 0,  
  rating_received  varchar(50) default 0,  
  rating_to_performed varchar(50) default 0,  
  likes    varchar(50) default 0,  
  follows    varchar(50) default 0  
 )  
   
 insert into #all_buyers  (contact_id)  
 select a.contact_id   
 from mp_contacts a (nolock)   
 inner join mp_scheduled_job b  (nolock) on a.contact_id=b.contact_id and b.scheduler_type_id = 9   
 where a.is_buyer =  1  and is_notify_by_email = 1 and b.is_deleted=0  
 --and a.contact_id  in  (1338075)
 --(  
 -- select distinct c.contact_id  
 -- from mp_exclude_contacts_from_daily_notification a (nolock)  
 -- join aspnetusers b (nolock) on a.email = b.email  
 -- join mp_contacts c (nolock) on b.contact_id = c.contact_id  and is_buyer = 1  
 --)  
  
 --and b.is_scheduled=1  this condition removed from above query

 -- pending_awards  
 update a set a.pending_awards = b.pending_awards  
 --select *  
 from #all_buyers a  
 join   
 (  
 select   
  b.contact_id as buyer_id , count(*) as  pending_awards  
 from  mp_rfq_quote_items a (nolock)   
 join  mp_rfq_quote_SupplierQuote b  (nolock) on b.rfq_quote_SupplierQuote_id = a.rfq_quote_SupplierQuote_id  
 join  mp_rfq_parts c  (nolock) on a.rfq_part_id = c.rfq_part_id  
 join  mp_rfq d  (nolock) on b.rfq_id = d.rfq_id  
 where (is_awrded is null or is_awrded = 0) and d.rfq_status_id not in (4, 5)  
 and convert(date,b.quote_date) = convert(date,  getutcdate()) and  is_quote_submitted =1  
 group by b.contact_id  
 ) b on a.contact_id= b.buyer_id  
  
  
 -- new_qoutes_received  
 update a set a.new_qoutes_received = b.new_qoutes_received  
 --select *  
 from #all_buyers a  
 join   
 (  
 select    
  b.contact_id as buyer_id , count(*) as  new_qoutes_received  
 from  
  mp_rfq_quote_SupplierQuote a  (nolock)   
 join  mp_rfq b  (nolock) on a.rfq_id = b.rfq_id  
 where   
  convert(date,a.quote_date) = convert(date,  getutcdate()) and    
  is_quote_submitted =1  
 and b.rfq_status_id not in (4, 5)  
 group by b.contact_id  
 ) b on a.contact_id= b.buyer_id  
  
  
 -- nda_to_approve  
 update a set a.nda_to_approve = b.nda_to_approve  
 from #all_buyers a  
 join   
 (  
  
 select b.contact_id  as buyer_id  ,  count(distinct b.rfq_id) nda_to_approve   
 from  mp_rfq_supplier_nda_accepted a (nolock)   
 join  mp_rfq b  (nolock) on a.rfq_id = b.rfq_id  
 where   
  convert(date,prefered_nda_type_accepted_date) = convert(date,  getutcdate()) and   
  (isapprove_by_buyer is null)  
  and b.rfq_status_id not in (4, 5)  
 group by b.contact_id  
 ) b on a.contact_id= b.buyer_id  
  
  
 -- rating received  
 update a set a.rating_received = b.rating_received  
 from #all_buyers a  
 join   
 (  
 select to_id as buyer_id , count(*) as rating_received from mp_rating_responses a (nolock)   
 where   
  convert(date,created_date) = convert(date,  getutcdate())   
 group by to_id  
 ) b on a.contact_id= b.buyer_id  
  
 -- rating to perform  
 update a set a.rating_to_performed = b.rating_to_performed  
 from #all_buyers a  
 join   
 (  
 select from_cont as buyer_id , count(*) rating_to_performed from  mp_messages  (nolock) where message_type_id in (select message_type_id from mp_mst_message_types (nolock)  where message_type_name = 'SUPPLIER_NPS_RATING')  
 --and  convert(date,message_date) = convert(date,  getutcdate())   
 and (message_read = null or message_read = 0 )  
 group by from_cont  
 ) b on a.contact_id= b.buyer_id  
   
 -- likes  
 update a set a.likes = b.likes  
 from #all_buyers a   
 join   
 ( 
  	select  b.contact_id as buyer_id , count(is_rfq_like) likes from
    mp_rfq_supplier_likes   (nolock)   a
	join mp_rfq(nolock)  b on a.rfq_id = b.rfq_id
	and convert(date,a.like_date) = convert(date,  getutcdate())  
	 group by b.contact_id
  ) b on a.contact_id= b.buyer_id
  
  
 -- follows  
update a set a.follows = b.follows  
 from #all_buyers a  
 join   
 (  
  select contact_id as buyer_id, count(*) follows  from   
  (  
    select distinct mpc.contact_id , mbd.company_id from   
    mp_book_details mbd   (nolock)  
    JOIN mp_books  mb   (nolock) on mbd.book_id =mb.book_id  
    JOIN mp_mst_book_type mmbt (nolock) on mmbt.book_type_id = mb.bk_type  
	JOIN mp_contacts mpc (nolock) on mpc.company_id = mbd.company_id
     and mmbt.book_type ='BOOK_BOOKTYPE_HOTLIST'  
     and convert(date,mbd.creation_date) = convert(date,  getutcdate())   
  ) a  
  group by  contact_id  
 ) b on a.contact_id= b.buyer_id   
  
  
 insert into mp_email_messages  
 ( message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email, message_sent,message_read )  
 --output inserted.email_message_id into @notification_email_running_id  
 select    
  @message_type_id    
  , @email_msg_subject email_msg_subject   
  , replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(@email_msg_body, '#Buyer_Name#', b.first_name + ' ' + b.last_name),'#Summary_Date_Time#',  convert(varchar(5),@today_date, 108) +', ' +convert(varchar(18),
@today_date, 103) ), '#pending_awards#', pending_awards),'#new_qoutes_received#', new_qoutes_received), '#nda_to_approve#' , nda_to_approve),'#rating_received#', rating_received), '#rating_to_performed#', rating_to_performed), '#likes#', likes), '#follows#' , follows),'Email Me', isnull(n.email,'')) ,'+678-981-4023' ,    isnull(m.communication_value,'') ) , 'Kevin Witherspoon' , isnull(l.first_name,'') + ' ' + isnull(l.last_name,'')) as email_msg_body  
  , @today_date email_message_date  
  , a.contact_id from_cont  
  , a.contact_id to_cont  
  , c.email  
  , 0 message_sent  
  , 0 message_read  
  --, isnull(l.title,'')  
  --, isnull(l.first_name,'') + ' ' + isnull(l.last_name,'')  
  --, isnull(m.communication_value,'')  
  --, isnull(n.email,'')  
 from #all_buyers  a  
 join  mp_contacts b  (nolock) on a.contact_id = b.contact_id  
	AND b.is_notify_by_email = 1  /* M2-4789*/
 join  aspnetusers c  (nolock) on b.user_id = c.id  
 --left join   mp_special_files d on a.contact_id = d.cont_id and filetype_id = 17  
 join mp_companies k   (nolock) on b.company_id = k.company_id   
 left join mp_contacts l     (nolock) on k.Assigned_SourcingAdvisor = l.contact_id     
 left join mp_communication_details m     (nolock) on l.contact_id   = m.contact_id and m.communication_type_id = 1  
 left join aspnetusers n on l.user_id = n.id  
 where  (pending_awards + new_qoutes_received  + nda_to_approve + rating_received + likes + follows) >0   
  
end
GO
PRINT N'Altering Procedure [dbo].[proc_set_DataSync_Update_HubSpotToMarketplace_CompanyContact]...';


GO

ALTER PROCEDURE [dbo].[proc_set_DataSync_Update_HubSpotToMarketplace_CompanyContact]
 AS

 BEGIN
		SET NOCOUNT ON

		IF OBJECT_ID('tempdb..#tmp_HubSpotContactsDownSyncLogs') IS NOT NULL  
        DROP TABLE #tmp_HubSpotContactsDownSyncLogs

		IF OBJECT_ID('tempdb..#HubSpotCompaniesDownSyncLogs') IS NOT NULL  
        DROP TABLE #HubSpotCompaniesDownSyncLogs

		IF OBJECT_ID('tempdb..#HubSpotCompanies_mp_registered_supplier_insert') IS NOT NULL  
        DROP TABLE #HubSpotCompanies_mp_registered_supplier_insert

        DECLARE @TodaysDate Date = GETUTCDATE()--- M2-4691  
		 
	IF OBJECT_ID('tempdb..#tmp_GetSubscriptionCompanies') IS NOT NULL  
        DROP TABLE #tmp_GetSubscriptionCompanies

		CREATE TABLE #tmp_GetSubscriptionCompanies
		(
			[Id] INT    IDENTITY (1,1)
			,[CompanyId]  INT NULL
			,[SubscriptionEndDate] DATE
			,[SubscriptionEndDateAfter7Days] DATE
			,[SubscriptionStatus] VARCHAR(25)
     	)

		--- if SyncType = 2 records are found then go for further process
		IF (SELECT COUNT(1) FROM DataSync_MarketplaceHubSpot.dbo.HubSpotContacts (NOLOCK) 
			WHERE SyncType = 2 and ISNULL(issynced,0) = 0 
			and ISNULL(isprocessed,0) = 0 
		) > 0
		BEGIN
		PRINT 'RECORDS FOUND TO UPDATE CONTACT DETAILS'
		/*
			Contact Module : Buyer and Supplier
		*/

		CREATE TABLE #tmp_HubSpotContactsDownSyncLogs    
		(   [id] INT IDENTITY (1,1)
			,[Vision Contact Id]  INT null
			,[First Name] VARCHAR (255) null
			,[Last Name] VARCHAR (255) null
			,[Email Opt Out] BIT null
			,[HubSpot Identity] INT null
			,[HubSpot Contact Id] VARCHAR (255) null ----M2-4863
		) 

		---- Inserted records inserted into temporary table for further processing
		INSERT INTO #tmp_HubSpotContactsDownSyncLogs  
		(
			    [Vision Contact Id]
			  , [First Name]
			  , [Last Name]
			  , [Email Opt Out]
			  , [HubSpot Identity] ---- this is pk field of HubSpotContacts table
			  , [HubSpot Contact Id]  ----M2-4863
		)
		---- Buyer details 
		SELECT 
			[Vision Buyer Id]
			, [buyer first name] 
			, [buyer last name]
			, CASE WHEN [Unsubscribed from all email] = 1 THEN 0 ELSE 1 END AS  [Unsubscribed from all email]
			, [Id]
			, [HubSpot Contact Id]
		FROM  DataSync_MarketplaceHubSpot.dbo.HubSpotContacts(NOLOCK) a 
		WHERE a.SyncType = 2 and ISNULL(a.IsSynced,0)=0 
		and ISNULL(a.isprocessed,0) = 0 
		UNION ALL
		---- Supplier details 
			SELECT 
			[Vision Supplier Id]
			, [First Name]
			, [Last Name]
			--, [Unsubscribed from all email] 
			, CASE WHEN [Unsubscribed from all email] = 1 THEN 0 ELSE 1 END AS  [Unsubscribed from all email]
			, [Id]
			, [HubSpot Contact Id]
			FROM  DataSync_MarketplaceHubSpot.dbo.HubSpotContacts(NOLOCK) a 
		WHERE a.SyncType = 2  and ISNULL(a.IsSynced,0)=0 
		and ISNULL(a.isprocessed,0) = 0 
		--and ISNULL(a.ProcessedDate,0)=0

		
		---- Hubspot log table insertion
		INSERT INTO DataSync_MarketplaceHubSpot.dbo.HubSpotContactsDownSyncLogs  
		(
			    [Vision Contact Id]
			  , [First Name]
			  , [Last Name]
			  , [Email Opt Out]
		)
		  SELECT [Vision Contact Id]
			  , [First Name]
			  , [Last Name]
			  , [Email Opt Out]
			  FROM #tmp_HubSpotContactsDownSyncLogs

		----- update following fields 
		---- first name  
		UPDATE b
		SET b.first_name = a.[First Name]
		FROM #tmp_HubSpotContactsDownSyncLogs(NOLOCK) a 
		JOIN dbo.mp_contacts(NOLOCK) b ON a.[Vision Contact Id]  = b.contact_id
		WHERE a.[First Name] != ISNULL(b.first_name,'')
		AND a.[First Name] IS NOT NULL 
 
		---- last name  
		UPDATE b
		SET b.last_name = a.[Last Name]
		FROM #tmp_HubSpotContactsDownSyncLogs(NOLOCK) a 
		JOIN dbo.mp_contacts(NOLOCK) b on a.[Vision Contact Id]  = b.contact_id
		WHERE a.[Last Name] != b.last_name
		AND a.[Last Name] IS NOT NULL

 		---- Email_Opt_Out
		UPDATE b
		SET b.is_notify_by_email =  a.[Email Opt Out]
		FROM #tmp_HubSpotContactsDownSyncLogs(NOLOCK) a 
		JOIN dbo.mp_contacts(NOLOCK) b on a.[Vision Contact Id]  = b.contact_id
		WHERE a.[Email Opt Out] != b.is_notify_by_email
		AND a.[Email Opt Out] IS NOT NULL

		----  M2-4863 Update HubSpotContactId from HubSpot DB to MFG DB
		UPDATE b
		SET b.HubSpotContactId =  a.[HubSpot Contact Id]
		FROM #tmp_HubSpotContactsDownSyncLogs(NOLOCK) a 
		JOIN dbo.mp_contacts(NOLOCK) b on a.[Vision Contact Id]  = b.contact_id
		WHERE  a.[HubSpot Contact Id] IS NOT NULL 
				AND b.HubSpotContactId IS NULL
		 		
		----finally update fields in hubspot -> HubSpotContacts
		UPDATE a
		set a.IsSynced = 1
		, a.SyncedDate = GETUTCDATE()
        , a.IsProcessed =  1
		, a.ProcessedDate = GETUTCDATE()
		from 
		DataSync_MarketplaceHubSpot.dbo.HubSpotContacts (NOLOCK) a 
		join #tmp_HubSpotContactsDownSyncLogs b ON a.id = b.[HubSpot Identity]
		WHERE a.SyncType = 2 
		AND ISNULL(a.issynced,0) = 0
		AND  ISNULL(a.IsProcessed,0)=0
		--AND  a.ProcessedDate IS NULL
			   

END
ELSE
BEGIN
PRINT 'NO RECORDS FOUND TO UPDATE CONTACT DETAILS'
END
		/* Contact module
		   M2-4983
		*/
		  
		   ---- Buyer details 
		    UPDATE  b
			SET b.HubSpotContactId = a.[HubSpot Contact Id]
			FROM  DataSync_MarketplaceHubSpot.dbo.HubSpotContacts(NOLOCK) a 
			JOIN mp_contacts(NOLOCK) b on  a.[Vision Buyer Id] = b.contact_id AND b.is_buyer = 1
			WHERE a.[Vision Buyer Id] IS NOT NULL 
			AND a.[HubSpot Contact Id] IS NOT NULL
			AND b.HubSpotContactId IS NULL 
		
			---- Supplier details 
			UPDATE b
			SET b.HubSpotContactId = a.[HubSpot Contact Id]
			FROM  DataSync_MarketplaceHubSpot.dbo.HubSpotContacts(NOLOCK) a 
			JOIN mp_contacts(NOLOCK) b on  a.[Vision Supplier Id] = b.contact_id AND b.is_buyer = 0
			WHERE a.[Vision Supplier Id] IS NOT NULL 
			AND a.[HubSpot Contact Id] IS NOT NULL
			AND b.HubSpotContactId IS NULL 
		

		/* */
		/*
			Account/Company Module
		*/

		CREATE TABLE #HubSpotCompaniesDownSyncLogs
		(
			[Id] INT    IDENTITY (1,1)
			,[Vision Account Id]  INT NULL
			,[Hide Directory Profile] BIT NULL
			,[Manufacturing Location] VARCHAR (100) NULL
			,[Company Owner Id] INT NULL
			,[Account Paid Status] VARCHAR (100) NULL
			,[Account Type] int NULL
			,[HubSpot Identity] INT NULL
			,[IsEligibleForGrowthPackage]  BIT NULL
		)


		IF (SELECT COUNT(1) FROM DataSync_MarketplaceHubSpot.dbo.HubSpotCompanies (NOLOCK) 
			WHERE SyncType = 2 and ISNULL(issynced,0) = 0 and ISNULL(isprocessed,0) = 0 
		) > 0
		BEGIN
		PRINT 'RECORDS FOUND TO UPDATE COMPANY DETAILS'
		INSERT INTO #HubSpotCompaniesDownSyncLogs 
		(
			[Vision Account Id]
			,[Hide Directory Profile] 
			,[Manufacturing Location]
			,[Company Owner Id]
			,[Account Paid Status] 
			,[Account Type]
			,[HubSpot Identity]  ---- this is pk field of HubSpotContacts table
			,[IsEligibleForGrowthPackage]
		)
			SELECT 
				[Vision Account Id]
				, [Hide Directory Profile] 
				, [Manufacturing Location] 
				, [Company Owner Id] 
				, [Account Paid Status]
				, CASE WHEN [Account Paid Status]  =  'Growth'   THEN 84
					   WHEN  [Account Paid Status] =  'Gold'     THEN 85
					   WHEN  [Account Paid Status] =  'Platinum' THEN 86
					   WHEN  [Account Paid Status] =  'Starter'  THEN 313 ---Added with M2-5133
					   ELSE 0 ---- this is "free" so such records we are not inserted in MFG- > mp_registered_supplier table and we don't have FREE status in MFG
				  END as [Account Type]
				, [Id]
                                , [IsEligibleForGrowthPackage]
			FROM  DataSync_MarketplaceHubSpot.dbo.HubSpotCompanies(NOLOCK) a 
			WHERE a.SyncType = 2 and ISNULL(a.IsSynced,0) = 0 and ISNULL(a.IsProcessed,0)=0 --ISNULL(a.ProcessedDate,0)=0

			/* Before delete records from mp_registered_supplier, we need to check this user [Account Type] = 0 from hubspot
			and account_type = 84 in mp_registered_supplier table then need to perform update in mp_companies 
			to reset the fields IsEligibleForGrowthPackage = 1 and IsGrowthPackageTaken = 0 for this user again take
			growth package 
			*/
			UPDATE c  
			SET c.IsEligibleForGrowthPackage = 1
			, c.IsGrowthPackageTaken = 0 
			from #HubSpotCompaniesDownSyncLogs a
			JOIN mp_registered_supplier (NOLOCK) b ON a.[Vision Account Id] = b.company_id
			JOIN mp_companies (NOLOCK) c ON c.company_id = b.company_id
			WHERE a.[Account Type] = 0 AND b.account_type = 84
			/**/
						 
			--- if hubspot any account set account_type = free then this record deleted from mp_registered_supplier if exists
			DELETE FROM mp_registered_supplier
			WHERE company_id IN 
			(
				SELECT [Vision Account Id] -- INTO #HubSpotCompanies_mp_registered_supplier_insert 
				FROM #HubSpotCompaniesDownSyncLogs   
				WHERE  [Account Type] = 0 --- to skip free records inserted into mfg table
				/* Nov 09 2022 skipping growth package companies because of downsync issue of 10k which is causing companies paid status  */
				--AND   [Vision Account Id] NOT IN  (SELECT DISTINCT company_id FROM mp_gateway_subscription_customers WHERE gateway_id = 310)
				/**/
				AND EXISTS 
				(
					SELECT company_id FROM mp_registered_supplier(NOLOCK) 
					WHERE mp_registered_supplier.company_id = #HubSpotCompaniesDownSyncLogs.[Vision Account Id]
				)
			)
			
			-----insert records into temptable for mp_registered_supplier which are not existed into mp_registered_supplier
			SELECT * INTO #HubSpotCompanies_mp_registered_supplier_insert 
			FROM #HubSpotCompaniesDownSyncLogs   
			WHERE NOT EXISTS (select company_id from mp_registered_supplier(nolock) 
				WHERE mp_registered_supplier.company_id = #HubSpotCompaniesDownSyncLogs.[Vision Account Id])
				AND [Account Type] != 0 --- to skip free records inserted into mfg table

			/* M2-4945 HubSpot - Integrate Reshape User Registration API -DB 
					First time Account Paid Status from basic to Growth, Gold, Platinum then inserted such records into mpAccountPaidStatusDetails
			*/
			INSERT INTO mpAccountPaidStatusDetails (CompanyId,OldValue,NewValue,IsProcessed,IsSynced,SourceType)
			SELECT [Vision Account Id], 83 AS OldValue, [account type] AS NewValue, NULL AS IsProcessed,0 AS IsSynced, 'Job-UpdateSync' AS SourceType 
			FROM #HubSpotCompaniesDownSyncLogs a
			WHERE NOT EXISTS ( select CompanyId from  mpAccountPaidStatusDetails b (NOLOCK) WHERE b.CompanyId = a.[Vision Account Id] )
			AND [account type] not in (84,0) --- means growth/Basic -- TBD this condition added becoz GP entry should be insert after GP purchased via SP proc_set_company_subscription
			/**/

			---- Hubspot log table insertion
		
			INSERT INTO DataSync_MarketplaceHubSpot.dbo.HubSpotCompaniesDownSyncLogs  
			(
			    [Vision Account Id]
			  	, [Hide Directory Profile] 
				, [Manufacturing Location] 
				, [Company Owner Id] 
				, [Account Paid Status]
				, [IsEligibleForGrowthPackage]
			)
			SELECT 
				[Vision Account Id]
				, [Hide Directory Profile] 
				, [Manufacturing Location] 
				, [Company Owner Id] 
				, [Account Paid Status]
				, [IsEligibleForGrowthPackage]
			FROM #HubSpotCompaniesDownSyncLogs 

			----- update following fields 
			---- is_hide_directory_profile
			UPDATE b
			SET b.is_hide_directory_profile =  a.[Hide Directory Profile]
			FROM #HubSpotCompaniesDownSyncLogs(NOLOCK) a 
			JOIN dbo.mp_companies(NOLOCK) b ON a.[Vision Account Id]  = b.company_id
			WHERE a.[Hide Directory Profile] != ISNULL(b.is_hide_directory_profile,'')
			AND a.[Hide Directory Profile]  IS NOT NULL

			---- manufacturing_location_id
			UPDATE b
			SET b.manufacturing_location_id =  a.[Manufacturing Location]
			FROM #HubSpotCompaniesDownSyncLogs(NOLOCK) a 
			JOIN dbo.mp_companies(NOLOCK) b ON a.[Vision Account Id]  = b.company_id
			WHERE a.[Manufacturing Location] != ISNULL(b.manufacturing_location_id,'')
			AND a.[Manufacturing Location] IS NOT NULL

			---- assigned_sourcingadvisor
			UPDATE b
			SET b.assigned_sourcingadvisor =  a.[Company Owner Id] 
			FROM #HubSpotCompaniesDownSyncLogs(NOLOCK) a 
			JOIN dbo.mp_companies(NOLOCK) b ON a.[Vision Account Id]  = b.company_id
			WHERE a.[Company Owner Id]  != ISNULL(b.assigned_sourcingadvisor,'')
			AND a.[Company Owner Id] IS NOT NULL

			/* M2-4983 */
			--- HubSpotCompanyId 
			UPDATE   b
			SET b.HubSpotCompanyId = a.[HubSpot Account Id] 
			FROM DataSync_MarketplaceHubSpot..hubspotcompanies (NOLOCK) a 
			JOIN dbo.mp_companies(NOLOCK) b ON a.[Vision Account Id]  = b.company_id
			WHERE b.HubSpotCompanyId IS NULL AND a.[HubSpot Account Id] IS NOT NULL
			----Commented on 07-Sep-2023 because all companies should be update HubSpotCompanyId field in mfg app
			----AND a.SyncType = 2 and ISNULL(a.IsSynced,0) = 0 and ISNULL(a.IsProcessed,0)=0
			/* */
			---- AccountPaidStatus
			IF (SELECT COUNT(1) FROM #HubSpotCompanies_mp_registered_supplier_insert ) > 0
			BEGIN
				------ if records not existsed then  inserted into mp_registered_supplier
				insert into dbo.mp_registered_supplier (company_id,is_registered,created_on,account_type )
				select [Vision Account Id],1 [is_registered], getutcdate() created_on ,[account type]
				from #HubSpotCompanies_mp_registered_supplier_insert 
				
				/* M2-4945 HubSpot - Integrate Reshape User Registration API -DB 
					First time Account Paid Status from basic to Growth, Gold, Platinum then inserted such records into mpAccountPaidStatusDetails
				*/
				--INSERT INTO mpAccountPaidStatusDetails (CompanyId,OldValue,NewValue,IsProcessed,IsSynced,SourceType)
				--SELECT [Vision Account Id], 83 AS OldValue, [account type] AS NewValue, NULL AS IsProcessed,0 AS IsSynced, 'Job-UpdateSync' AS SourceType 
				--FROM #HubSpotCompanies_mp_registered_supplier_insert a
				--WHERE NOT EXISTS ( select CompanyId from  mpAccountPaidStatusDetails b (NOLOCK) WHERE b.CompanyId = a.[Vision Account Id] )
				--AND [account type] != 84 --- means growth -- TBD this condition added becoz GP entry should be insert after GP purchased via SP proc_set_company_subscription
				/* */
			END
					
				UPDATE c
				SET c.account_type =  a.[Account Type] , c.updated_on = getutcdate() , c.account_type_source = NULL
				FROM #HubSpotCompaniesDownSyncLogs(NOLOCK) a 
				JOIN dbo.mp_companies(NOLOCK) b ON a.[Vision Account Id]  = b.company_id
				JOIN dbo.mp_registered_supplier(NOLOCK) c ON b.company_id  = c.company_id
				WHERE a.[Account Type]  != c.account_type
				AND a.[Account Type] != 0 ---- this is "free" so such records we are not inserted in MFG- > mp_registered_supplier table and we don't have FREE status in MFG
			    AND a.[Vision Account Id] NOT IN (SELECT [Vision Account Id] FROM #HubSpotCompanies_mp_registered_supplier_insert )
		   /* M2-4691 Code changes  
			 1. If any user has active growth package subscription and from hubspot someone turn off the flag then in MFG no action performed. 

			 2. If any user has expired/cancel growth package subscription and from hubspot someone turn off the flag then 
			    in MFG, following impact in application.
			 1. Need to delete record from registered supplier ? (so this user become basic)
			 2. Need to set flag to 0 ( IsEligibleForGrowthPackage and IsGrowthPackageTaken) ?  
			 3. adding update in directory datasync ( for community update)
			 4. can we delete existing company subscription quoting capabilities data if payment failed ?  
		   */
			
			/* 1. If user is set for growth package.  */
			---- [IsEligibleForGrowthPackage] = 0 OR 1
			UPDATE b
			SET b.IsEligibleForGrowthPackage =  a.[IsEligibleForGrowthPackage]
			FROM #HubSpotCompaniesDownSyncLogs(NOLOCK) a 
			JOIN dbo.mp_companies(NOLOCK) b ON a.[Vision Account Id]  = b.company_id
			WHERE a.[IsEligibleForGrowthPackage]  IS NOT NULL
			AND b.company_id NOT IN ( SELECT company_id from mp_gateway_subscription_customers (NOLOCK) WHERE gateway_id = 310)
			
		    --Getting data from subscription table against company id
			INSERT INTO #tmp_GetSubscriptionCompanies ( [CompanyId],[SubscriptionEndDate],[SubscriptionStatus])
			SELECT subscription.company_id ,subscription.subscription_end ,b.[status]
			FROM (
					SELECT  a.company_id, MAX(b.subscription_end) AS subscription_end ,  MAX(b.created) AS created
					FROM  mp_gateway_subscription_customers (NOLOCK) a
					JOIN mp_gateway_subscriptions (NOLOCK) b on a.id = b.customer_id --AND status = 'past_due'
					JOIN #HubSpotCompaniesDownSyncLogs c on c.[Vision Account Id]  = a.company_id  
		 			WHERE a.gateway_id = 310 
					GROUP BY a.company_id
			) subscription 
			JOIN mp_gateway_subscription_customers (NOLOCK) a on a.company_id =  subscription.company_id
			JOIN mp_gateway_subscriptions (NOLOCK) b on a.id = b.customer_id and subscription.subscription_end = b.subscription_end
			  AND  b.created = subscription.created
			WHERE a.gateway_id = 310

			-- UPDATE subscription end + 30 days
			UPDATE #tmp_GetSubscriptionCompanies
			SET [SubscriptionEndDateAfter7Days] = CAST(DATEADD(dd,30,[SubscriptionEndDate]) AS DATE)
			FROM #tmp_GetSubscriptionCompanies

			/*delete record from registered supplier */
			DELETE FROM mp_registered_supplier 
			WHERE company_id IN 
			(
				SELECT  CompanyId FROM #tmp_GetSubscriptionCompanies a
				JOIN #HubSpotCompaniesDownSyncLogs b ON a.CompanyId = b.[Vision Account Id]
				WHERE b.IsEligibleForGrowthPackage = 0
				AND [SubscriptionEndDateAfter7Days] <  @TodaysDate
			)
			
			-- adding manufacturer in directory datasync
			INSERT INTO XML_SupplierProfileCaptureChanges (CompanyId ,Event ,CreatedOn)
			SELECT a.company_id ,'paid_status' ,GETUTCDATE() 
			FROM mp_companies (NOLOCK) a 
			JOIN #tmp_GetSubscriptionCompanies b ON a.company_id = b.CompanyId
			JOIN #HubSpotCompaniesDownSyncLogs c ON c.[Vision Account Id] = a.company_id
			WHERE  c.IsEligibleForGrowthPackage = 0
			AND SubscriptionEndDateAfter7Days <  @TodaysDate
			
			 /* set flag to 0 for IsGrowthPackageTaken */
			UPDATE mp_companies 
			SET IsGrowthPackageTaken = 0
			FROM mp_companies (NOLOCK) a 
			JOIN #tmp_GetSubscriptionCompanies b ON a.company_id = b.CompanyId
			JOIN #HubSpotCompaniesDownSyncLogs c ON c.[Vision Account Id] = a.company_id
			WHERE c.IsEligibleForGrowthPackage = 0
			AND SubscriptionEndDateAfter7Days <  @TodaysDate
			
			/* delete existing company subscription quoting */
			DELETE FROM mp_gateway_subscription_company_processes 
			WHERE company_id IN 
			(
				SELECT  CompanyId FROM #tmp_GetSubscriptionCompanies a
				JOIN #HubSpotCompaniesDownSyncLogs b ON b.[Vision Account Id] = a.companyid
				WHERE b.IsEligibleForGrowthPackage = 0
				AND SubscriptionEndDateAfter7Days <  @TodaysDate
			) 
			
			/*
			 select * from #tmp_GetSubscriptionCompanies
			 select * from #HubSpotCompaniesDownSyncLogs
			*/
			----finally update fields in hubspot -> HubSpotCompanies
			UPDATE a
			set a.IsSynced = 1
			, a.SyncedDate = GETUTCDATE()
			, a.IsProcessed =  1
			, a.ProcessedDate = GETUTCDATE()
			FROM 
			DataSync_MarketplaceHubSpot.dbo.HubSpotCompanies(NOLOCK) a 
			join #HubSpotCompaniesDownSyncLogs b ON a.id = b.[HubSpot Identity]
			WHERE a.SyncType = 2 
			AND ISNULL(a.issynced,0) = 0
			AND ISNULL( a.IsProcessed ,0 )= 0 
			--AND  a.ProcessedDate IS NULL

		END
		ELSE
		BEGIN
		PRINT 'NO RECORDS FOUND TO UPDATE COMPANY DETAILS'
		END
END
GO
PRINT N'Altering Procedure [dbo].[proc_set_emailMessages_after_awarding]...';


GO
ALTER PROCEDURE [dbo].[proc_set_emailMessages_after_awarding]
AS
BEGIN

	/* FEB 26, 2020 M2-2518  Buyer - Awarding bugs - DB */
	
	
	DROP TABLE IF EXISTS #tmp_part_awarded
	DROP TABLE IF EXISTS #tmp_awarded_rfqs
	DROP TABLE IF EXISTS #list_of_contacts


	SELECT 
		rfq_id, from_cont, to_cont 
	INTO #tmp_awarded_rfqs
	FROM 
	mp_messages (NOLOCK)
	WHERE 
		message_type_id = 7
		AND CONVERT(DATE,message_date+7)  =  CONVERT(DATE, GETUTCDATE())

	SELECT DISTINCT 
		a.rfq_id , a.rfq_name , a.contact_id buyer_id, b.contact_id supplier_id,
		e.part_name + ' ' +  CONVERT(VARCHAR(50) ,c.awarded_qty) + ' ' + f.value   parts_awarded
	INTO #tmp_part_awarded
	FROM mp_rfq						a (NOLOCK)
	JOIN mp_rfq_quote_SupplierQuote b (NOLOCK) ON a.rfq_id = b.rfq_id  AND  is_rfq_resubmitted = 0
	JOIN mp_rfq_quote_items			c (NOLOCK) ON b.rfq_quote_SupplierQuote_id = c.rfq_quote_SupplierQuote_id
	JOIN mp_rfq_parts				d (NOLOCK) ON c.rfq_part_id = d.rfq_part_id 
	JOIN mp_parts					e (NOLOCK) ON d.part_id = e.part_id 
	JOIN mp_system_parameters		f (NOLOCK) ON e.part_qty_unit_id = f.id
	WHERE 
		is_awrded =1 
		AND a.rfq_id IN (SELECT DISTINCT rfq_id FROM #tmp_awarded_rfqs)

	SELECT 
		a.company_id, a.contact_id ,   b.email AS  email_id
		,a.first_name + ' ' + a.last_name AS username
		,c.name AS company
		,1 AS is_buyer
		,a.is_notify_by_email  /* M2-4789*/
	INTO #list_of_contacts
	FROM mp_contacts		a (NOLOCK) 
	LEFT JOIN aspnetusers	b (NOLOCK) ON a.user_id = b.id
	LEFT JOIN mp_companies  c (NOLOCK) ON a.company_id = c.company_id
	WHERE a.contact_id IN (SELECT DISTINCT from_cont FROM #tmp_awarded_rfqs)
	UNION
	SELECT 
		a.company_id, a.contact_id ,   b.email AS  email_id
		,a.first_name + ' ' + a.last_name AS username
		,c.name AS company
		,0 AS is_buyer
		,a.is_notify_by_email  /* M2-4789*/
	FROM mp_contacts		a (NOLOCK) 
	LEFT JOIN aspnetusers	b (NOLOCK) ON a.user_id = b.id
	LEFT JOIN mp_companies  c (NOLOCK) ON a.company_id = c.company_id
	WHERE a.contact_id IN (SELECT DISTINCT to_cont FROM #tmp_awarded_rfqs)

	--SELECT * FROM #tmp_awarded_rfqs
	--SELECT * FROM #tmp_part_awarded
	--SELECT * FROM #list_of_contacts


	INSERT INTO mp_messages
	( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
	SELECT DISTINCT
		a.rfq_id 	
		,	CASE 
				WHEN  message_type_name = 'BUYER_NPS_RATING' THEN e.message_type_id						
				WHEN  message_type_name = 'SUPPLIER_NPS_RATING' THEN e.message_type_id						
			END  AS  message_type_id 
		, message_subject_template  AS message_subject 
		, CASE 
				WHEN  message_type_name = 'SUPPLIER_NPS_RATING' THEN
						REPLACE(REPLACE(message_body_template, '#Buyer_Name#', b.username) , '#Manufacturer_company_name#' ,c.company) 
				WHEN  message_type_name = 'BUYER_NPS_RATING' THEN
					REPLACE(REPLACE(message_body_template, '#Manufacturer_Contact_name#', c.username)  , '#Company_Name#',b.company)
		  END  AS message_descr	
		, GETUTCDATE() AS message_date	
		, CASE 
				WHEN  message_type_name = 'SUPPLIER_NPS_RATING' THEN c.contact_id				
				WHEN  message_type_name = 'BUYER_NPS_RATING'	THEN	b.contact_id   					
		  END AS from_contact_id 
		, CASE 			
				WHEN  message_type_name = 'SUPPLIER_NPS_RATING' THEN b.contact_id 			
				WHEN  message_type_name = 'BUYER_NPS_RATING'	THEN  	c.contact_id			
		  END AS to_contact_id 
		, 0 AS message_sent
		, 0 AS message_read
		, 0 AS trash
		, 0 AS from_trash
		, 0 AS real_from_cont_id
		, 0 AS is_last_message
		, 0 AS message_status_id_recipient
		, 0 AS message_status_id_author
	FROM 
	#tmp_part_awarded a
	JOIN #list_of_contacts b ON a.buyer_id = b.contact_id
	JOIN #list_of_contacts c ON a.supplier_id = c.contact_id 
	JOIN  
	(
		SELECT distinct  a.rfq_id, a.supplier_id  , REPLACE((SELECT parts = stuff(( SELECT ','+  parts_awarded	
		FROM  #tmp_part_awarded WHERE supplier_id = a.supplier_id	FOR XML PATH('') ), 1, 1, '')) ,',' , ', ') AS parts
		FROM #tmp_part_awarded a	
	) d ON a.rfq_id = d.rfq_id AND a.supplier_id = d.supplier_id
	CROSS APPLY
	(
		SELECT 
			a.message_type_id
			,a.message_type_name 
			,message_subject_template
			,message_body_template
			,email_body_template
			,email_subject_template 
		FROM 
		mp_mst_message_types  a
		JOIN mp_mst_email_template b ON a.message_type_id = b.message_type_id
		WHERE a.message_type_name IN 
		('SUPPLIER_NPS_RATING', 'BUYER_NPS_RATING'
		)
	) e 	

	INSERT INTO mp_email_messages
	( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date
	,from_cont ,to_cont, to_email, message_sent,message_read )
	SELECT DISTINCT
		a.rfq_id 	
		,	CASE 
				WHEN  message_type_name = 'BUYER_NPS_RATING' THEN e.message_type_id						
				WHEN  message_type_name = 'SUPPLIER_NPS_RATING' THEN e.message_type_id						
			END  AS  message_type_id 
		, email_subject_template  AS email_msg_subject 
		, CASE 
				WHEN  message_type_name = 'SUPPLIER_NPS_RATING' THEN
					REPLACE(REPLACE(REPLACE(email_body_template, '#Buyer_Name#', b.username) , '#Manufacturer_company_name#' ,c.company) ,'#Message_Link#','')
				when  message_type_name = 'BUYER_NPS_RATING' THEN
						REPLACE(REPLACE(REPLACE(email_body_template, '#Manufacturer_Contact_name#',  c.username)  , '#Company_Name#',b.company),'#Message_Link#','')
		  END   email_msg_body
		, GETUTCDATE() AS message_date	
		, CASE 
				WHEN  message_type_name = 'SUPPLIER_NPS_RATING' THEN c.contact_id				
				WHEN  message_type_name = 'BUYER_NPS_RATING'	THEN b.contact_id   					
		  END AS from_contact_id 
		, CASE 			
				WHEN  message_type_name = 'SUPPLIER_NPS_RATING' THEN b.contact_id 			
				WHEN  message_type_name = 'BUYER_NPS_RATING'	THEN c.contact_id			
		  END AS to_contact_id 
		, CASE WHEN  message_type_name = 'SUPPLIER_NPS_RATING' THEN  b.email_id ELSE c.email_id END AS to_email_id
		, 0 AS message_sent
		, 0 AS message_read
	FROM 
	#tmp_part_awarded a
	JOIN #list_of_contacts b ON a.buyer_id = b.contact_id
	JOIN #list_of_contacts c ON a.supplier_id = c.contact_id 
	AND c.is_notify_by_email = 1 /* M2-4789*/
	JOIN  
	(
		SELECT distinct  a.rfq_id, a.supplier_id  , REPLACE((SELECT parts = STUFF(( SELECT ','+  parts_awarded	
		FROM  #tmp_part_awarded WHERE supplier_id = a.supplier_id	FOR XML PATH('') ), 1, 1, '')) ,',' , ', ') AS parts
		FROM #tmp_part_awarded a	
	) d ON a.rfq_id = d.rfq_id AND a.supplier_id = d.supplier_id
	CROSS APPLY
	(
		SELECT 
			a.message_type_id
			,a.message_type_name 
			,message_subject_template
			,message_body_template
			,email_body_template
			,email_subject_template 
		FROM 
		mp_mst_message_types  a
		JOIN mp_mst_email_template b ON a.message_type_id = b.message_type_id
		WHERE a.message_type_name IN 
		('SUPPLIER_NPS_RATING', 'BUYER_NPS_RATING'
		)
	) e 	

END
GO
PRINT N'Creating Procedure [dbo].[proc_set_lead_emails]...';


GO

/*
declare @p3 dbo.tbltype_lead_emails
insert into @p3 values(N'Inder',N'Kalsi',N'Kalsi',N'ikalsi@delaplex.com',N'99626197776',N'Testing Directory Messages',N'Testing....',NULL,0)

select * from @p3
exec proc_set_lead_emails @lead_id=485743,@supplier_id=1369657,@lead_emails=@p3

*/

CREATE PROCEDURE [dbo].[proc_set_lead_emails]
(
	 @lead_id		INT
	,@supplier_id	INT
	,@lead_emails	AS tbltype_lead_emails	READONLY

)
AS
BEGIN

	/*
		CREATE	:	MAR 11, 2020
		DESC	:	M2-2722 M - Make Read my message clickable on Leadstream - DB
					MAY 12 2020 , M2-2649 Supplier Profile (Non-Registered Users) - Ability to add part files and request NDA - DB
	*/

	DECLARE @transaction_status		VARCHAR(500) = 'Failed'
	DECLARE @lead_email_message_id	INT
	DECLARE @identity_msg INT;
	DECLARE @RowNo INT = 1
	DECLARE @IndividualFileName VARCHAR(MAX)
	DECLARE @FileId INT
	DECLARE @FilesForSplit VARCHAR(MAX)
	/* M2-4010 M - for directory messages, simple, direct RFQ's CC children and add it to their messages -API */
	DECLARE @notification_message_running_id  TABLE (id int IDENTITY(1,1) ,  message_id INT null)
	DECLARE @CompanyId INT = (SELECT DISTINCT company_id FROM mp_contacts (NOLOCK) WHERE contact_id = @supplier_id)
	/**/

	/* M2-4094 Buyer - Add Directory message to the buyer's global messages */
	--DECLARE @plead_from_contact INT;
	--WAITFOR DELAY '00:00:02'
	--SELECT @plead_from_contact = IIF(lead_from_contact = 0, 0, lead_from_contact) FROM mp_lead WHERE lead_id = @lead_id
	/* */


	DROP TABLE IF EXISTS #FileTable

	BEGIN TRAN
	BEGIN TRY

			IF ((SELECT COUNT(1) FROM @lead_emails) > 0)
			BEGIN

				INSERT INTO mp_lead_emails
				(first_name, last_name, company, email, phoneno, email_subject, email_message)
				SELECT first_name, last_name, company, email, phoneno, email_subject, email_message FROM @lead_emails
				SET @lead_email_message_id = @@IDENTITY

				IF @lead_email_message_id  > 0
				BEGIN
				
					INSERT INTO mp_lead_email_mappings (lead_id,lead_email_message_id)
					SELECT @lead_id , @lead_email_message_id

					SET @transaction_status = 'Success' 

				END

				SET @FilesForSplit = (SELECT Files FROM @lead_emails)

				INSERT INTO mp_messages
				( 
					rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read 
					,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author 
					,is_nda_required
				)
				/* M2-4010 M - for directory messages, simple, direct RFQ's CC children and add it to their messages -API */
				OUTPUT inserted.message_id INTO @notification_message_running_id
				/*  */
				SELECT
					NULL as rfq_id
					, 225						as message_type_id 
					, email_subject				as message_subject 
					, email_message				as message_descr
					, GETUTCDATE()				as message_date
					, (SELECT ISNULL(lead_from_contact,0) FROM mp_lead WHERE lead_id = @lead_id)		as from_contact_id 
					, b.contact_id				as to_contact_id 
					, 0							as message_sent
					, 0							as message_read
					, 1							as trash
					, 0							as from_trash
					, 0							as real_from_cont_id
					, 0							as is_last_message
					, 0							as message_status_id_recipient
					, 0							as message_status_id_author
					, [is_nda_required]
				FROM @lead_emails a
				CROSS APPLY (SELECT contact_id FROM mp_contacts (NOLOCK) WHERE company_id = @CompanyId ) b
				--SET @identity_msg = @@identity
		 
				
				/* M2-4010 M - for directory messages, simple, direct RFQ's CC children and add it to their messages -API */
				IF (SELECT COUNT(1) FROM @notification_message_running_id) > 0 -- @identity_msg > 0
				/*  */
				BEGIN
									
					/* M2-3928 M - Remove attachment requirement for a directory message to show under global "messages". - DB */
					IF LEN(@FilesForSplit) > 0
					BEGIN			 
						SELECT ROW_NUMBER() OVER(ORDER BY value ASC) AS RowNo , value 
						INTO #FileTable 
						FROM 
						(
							SELECT value FROM STRING_SPLIT(@FilesForSplit, ',')

						) AS MessageFileDetailList  				 


						WHILE (@RowNo <= (SELECT COUNT(*) FROM #FileTable))
						BEGIN 
							SET  @IndividualFileName = (SELECT value FROM #FileTable WHERE RowNo = @RowNo);
	 
							INSERT INTO mp_special_files
							(	FILE_NAME,CONT_ID,COMP_ID,IS_DELETED,FILETYPE_ID,CREATION_DATE,Imported_Location,parent_file_id
								,Legacy_file_id	,file_title	,file_caption,file_path	,s3_found_status,is_processed,sort_order
							)					 
							SELECT @IndividualFileName ,NULL ,NULL ,0 ,57 ,GETUTCDATE() ,NULL ,NULL ,NULL ,NULL ,NULL ,NULL
							,NULL ,0 ,NULL    
							SET @FileId = @@IDENTITY
					
							INSERT INTO mp_message_file ( MESSAGE_ID, [FILE_ID])
							/* M2-4010 M - for directory messages, simple, direct RFQ's CC children and add it to their messages -API */
							--SELECT @identity_msg , @FileId 
							SELECT message_id , @FileId FROM @notification_message_running_id
							/**/

						SET @RowNo = @RowNo + 1;
						END	
					END
					/**/
				
					INSERT INTO mp_lead_message_mapping (lead_id, message_id)
					/* M2-4010 M - for directory messages, simple, direct RFQ's CC children and add it to their messages -API */
					--SELECT @lead_id ,@identity_msg 
					SELECT @lead_id , message_id FROM @notification_message_running_id
					/**/
				
				END
			END


	SET @transaction_status = 'Success'
	
	COMMIT
			
	SELECT @transaction_status TransactionStatus


	END TRY
	BEGIN CATCH
		ROLLBACK
		
		SET @transaction_status = 'Failed - ' + error_message()
		SELECT @transaction_status TransactionStatus
	END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[proc_set_LeadStreamThroughClaimProfile]...';


GO

/*

EXEC proc_set_LeadStreamThroughClaimProfile
@ContactId = 1372454
,@CompanyId = 1800414
,@EmailId = 'schoudhari123@yopmail.com'

EXEC proc_set_LeadStreamThroughClaimProfile
@ContactId = 1372454
,@CompanyId = 1800414
,@EmailId = 'DEBORAHF@TETRADELEC.COM'


EXEC proc_set_LeadStreamThroughClaimProfile
@ContactId = 1372454
,@CompanyId = 1800414
,@EmailId = 'john876@yopmail.com'
*/
ALTER  PROCEDURE [dbo].[proc_set_LeadStreamThroughClaimProfile]
(
	@ContactId	INT
	,@CompanyId	INT
	,@EmailId	VARCHAR(250)
)
AS
BEGIN

	-- M2-3569  M - Claim my profile

	DECLARE @IsCommunityExternalDirectoryMessagesExists INT = 0
	DECLARE @IsCommunityLeadStreamExists	INT = 0
	DECLARE @TransactionStatus				VARCHAR(MAX) = 'Failed'

	BEGIN TRAN
	BEGIN TRY
		-- Checking Community External messages exists or not
		SET @IsCommunityExternalDirectoryMessagesExists = (SELECT COUNT(1) FROM mpCommunityExternalDirectoryMessages WHERE SupplierEmail = @EmailId AND IsClaimed = 0)
		-- Checking Community Leadstream exists or not
		SET @IsCommunityLeadStreamExists = (SELECT COUNT(1) FROM mpCommunityLeadStream WHERE SupplierEmail = @EmailId AND IsClaimed = 0)

		-- Reteriving & Inserting Community External messages if exists in relevant tables
		IF @IsCommunityExternalDirectoryMessagesExists > 0
		BEGIN

		
			DECLARE @LeadId				INT
			DECLARE @LeadEmailMessageId	INT
			DECLARE @MessageId			INT
			DECLARE @Id					INT
			DECLARE @BuyerId			INT
			DECLARE @BuyerEmail			VARCHAR(150)
			DECLARE @BuyerFirstName		VARCHAR(150)
			DECLARE @BuyerLastName		VARCHAR(150)
			DECLARE @BuyerCompanyName	VARCHAR(250)
			DECLARE @BuyerPhone			VARCHAR(50)
			DECLARE @MessageFileId		INT
			DECLARE @EmailSubject		VARCHAR(250)
			DECLARE @EmailBody			VARCHAR(MAX)
			DECLARE @IpAddress			VARCHAR(150)
			DECLARE @EmailMessageDate	DATETIME
			DECLARE @IsNdaRequired		BIT

		
			DECLARE crCommunityExternalDirectoryMessages CURSOR FOR 
			SELECT 
				Id
				,BuyerEmail
				,BuyerFirstName
				,BuyerLastName
				,BuyerCompanyName
				,BuyerPhone
				,MessageFileId
				,EmailSubject
				,EmailBody
				,IpAddress
				,EmailMessageDate
				,IsNdaRequired 
			FROM mpCommunityExternalDirectoryMessages WHERE SupplierEmail = @EmailId AND IsClaimed = 0
		
		
			OPEN crCommunityExternalDirectoryMessages;
			FETCH NEXT FROM crCommunityExternalDirectoryMessages INTO @Id,@BuyerEmail,@BuyerFirstName,@BuyerLastName,@BuyerCompanyName,@BuyerPhone,@MessageFileId,@EmailSubject,@EmailBody,@IpAddress,@EmailMessageDate,@IsNdaRequired ;

			WHILE @@FETCH_STATUS = 0
			BEGIN

				SET @BuyerId = 
				(
					SELECT b.contact_id
					FROM aspnetusers (NOLOCK) a
					JOIN mp_contacts (NOLOCK) b ON a.id = b.[user_id]
					WHERE email = @BuyerEmail
				)

				INSERT INTO mp_lead
				(company_id , lead_source_id , lead_from_contact , ip_address , lead_date)
				SELECT @CompanyId , 13 , ISNULL(@BuyerId,0) , CASE WHEN @BuyerId IS NULL THEN @IpAddress ELSE '' END , @EmailMessageDate
				SET @LeadId = @@IDENTITY
		
				IF @LeadId > 0 
				BEGIN
				
					INSERT INTO mp_lead_emails
					(first_name , last_name , company , email , phoneno , email_subject , email_message)
					SELECT @BuyerFirstName , @BuyerLastName , @BuyerCompanyName , @BuyerEmail , @BuyerPhone ,@EmailSubject ,@EmailBody
					SET @LeadEmailMessageId = @@IDENTITY

					INSERT INTO mp_lead_email_mappings (lead_id,lead_email_message_id)
					SELECT @LeadId , @LeadEmailMessageId
				END
				
				
				IF @MessageFileId > 0
				BEGIN

					INSERT INTO mp_messages
					( 
						rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read 
						,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author 
						,is_nda_required
					)
					SELECT
						NULL as rfq_id
						, 225				as message_type_id 
						, @EmailSubject		as  message_subject 
						, @EmailBody		as message_descr
						, GETUTCDATE()		as message_date
						, NULL				as from_contact_id 
						, @ContactId		as to_contact_id 
						, 0					as message_sent
						, 0					as message_read
						, 1					as trash
						, 0					as from_trash
						, 0					as real_from_cont_id
						, 0					as is_last_message
						, 0					as message_status_id_recipient
						, 0					as message_status_id_author
						, @IsNdaRequired
					SET @MessageId = @@identity

					INSERT INTO mp_message_file (MESSAGE_ID, [FILE_ID])
					SELECT @MessageId , @MessageFileId 

					INSERT INTO mp_lead_message_mapping (lead_id, message_id)
					SELECT @LeadId ,@MessageId 
					
				END

				UPDATE mpCommunityExternalDirectoryMessages SET IsClaimed = 1 WHERE Id = @Id

			FETCH NEXT FROM crCommunityExternalDirectoryMessages INTO @Id,@BuyerEmail,@BuyerFirstName,@BuyerLastName,@BuyerCompanyName,@BuyerPhone,@MessageFileId,@EmailSubject,@EmailBody,@IpAddress,@EmailMessageDate,@IsNdaRequired ;
			END;

			CLOSE crCommunityExternalDirectoryMessages;
			DEALLOCATE crCommunityExternalDirectoryMessages;
		
		END
		
		-- Reteriving & Inserting Community LeadStream data if exists in relevant tables
		IF @IsCommunityLeadStreamExists > 0
		BEGIN

			INSERT INTO mp_lead
			(company_id , lead_source_id , lead_from_contact , ip_address , lead_date)
			
			SELECT @CompanyId , a.LeadSourceId , CASE WHEN c.contact_id IS NULL THEN 0 ELSE c.contact_id END  ,CASE WHEN c.contact_id IS NULL THEN a.IpAddress ELSE '' END , LeadDate
			FROM mpCommunityLeadStream (NOLOCK) a
			LEFT JOIN AspNetUsers (NOLOCK) b ON a.BuyerEmail = b.Email
			LEFT JOIN mp_contacts (NOLOCK) c ON b.id = c.[user_id]
			WHERE a.SupplierEmail = @EmailId AND a.IsClaimed = 0

			UPDATE mpCommunityLeadStream SET IsClaimed = 1 WHERE SupplierEmail = @EmailId AND IsClaimed = 0
		END

	SET @TransactionStatus = 'Success'
	SELECT @TransactionStatus TransactionStatus

	COMMIT
	END TRY
	BEGIN CATCH
	
		
		ROLLBACK
		
		SET @TransactionStatus = 'Failed - ' + ERROR_MESSAGE()
		SELECT @TransactionStatus TransactionStatus
		

	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[proc_set_OrderManagement]...';


GO

/*

select * delete from mpOrderManagement  where rfqid = 1190600

EXEC proc_set_OrderManagement
	@RfqId				= '1190600'
	,@RfqEncryptedId	= '6SUSoy6PBR4/D5A1UEccpg=='
	,@PONumber			= 'PO-1190600-1'
	,@PODate			= '2023-04-15 06:51:23.437'
	,@IsMfgStandardPO	= 0
	,@SupplierContactId	= 1413650
	,@FileName = 'test'

*/
ALTER PROCEDURE [dbo].[proc_set_OrderManagement] 
(
	@RfqId				INT
	,@RfqEncryptedId	NVARCHAR(250)
	,@PONumber			VARCHAR(250)
	,@PODate			DATETIME
	,@IsMfgStandardPO	BIT = 0
	,@FileName			VARCHAR(250)  = null
	,@SupplierContactId	INT

)
AS
BEGIN
	-- M2-4821  Buyer - Award modal Step 2 - DB
	
	DECLARE @FileId INT = NULL
	DECLARE @ContactId INT = NULL
	DECLARE @CompanyId INT = NULL
	DECLARE @AddressId INT = NULL
	DECLARE @PaymentTerm VARCHAR(250) = NULL
	DECLARE @TransactionStatus VARCHAR(50)= 'Failure'
	
	BEGIN TRY
	
		BEGIN TRAN

			
			SELECT @ContactId = contact_id FROM mp_rfq (NOLOCK) WHERE Rfq_Id = @RfqId 
			SELECT @CompanyId = company_id FROM	mp_contacts (NOLOCK) WHERE contact_id = @ContactId 
				

			IF @FileName <> '' AND @FileName IS NOT NULL
			BEGIN

				INSERT INTO mp_special_files
				(	FILE_NAME,CONT_ID,COMP_ID,IS_DELETED,FILETYPE_ID,CREATION_DATE,Imported_Location,parent_file_id
					,Legacy_file_id	,file_title	,file_caption,file_path	,s3_found_status,is_processed,sort_order
				)					 
				SELECT @FileName ,@ContactId ,NULL ,0 ,18 ,GETUTCDATE() ,NULL ,NULL ,NULL ,NULL ,NULL ,NULL
				,NULL ,0 ,NULL    
				SET @FileId = @@IDENTITY

			END
						
			-- if po exists
			IF ((SELECT COUNT(1) FROM mpOrderManagement (NOLOCK) WHERE RfqId = @RfqId )) > 0
			BEGIN
				-- updating existing record for supplier, if other than supplier no action taken
				IF @SupplierContactId NOT IN (16,17,18,20)
				BEGIN

					INSERT INTO [mpOrderManagementChangeLogs]
					([Type] ,OrderManagementId ,RfqId ,PONumber ,PODate ,IsMfgStandardPO ,OldPOStatus ,NewPOStatus ,FileId ,SupplierContactId)
					SELECT 'MFG - Update PO' ,Id ,RfqId ,PONumber ,PODate ,IsMfgStandardPO ,POStatus ,'pending'  ,FileId ,SupplierContactId
					FROM mpOrderManagement (NOLOCK) WHERE RfqId = @RfqId
					
					INSERT INTO mp_data_history
					(field,oldvalue,newvalue,creation_date,userid,tablename)
					SELECT 
						'{"RfqId":'+CONVERT(VARCHAR(50),@RfqId )+'}'
						,'{"POUpdated":""}'
						,'{"POUpdated":"Sent"}' 
						, GETUTCDATE() 
						, @ContactId 
						, 'mpOrderManagement'
					
					INSERT INTO mp_data_history
					(field,oldvalue,newvalue,creation_date,userid,tablename)
					SELECT 
						'{"RfqId":'+CONVERT(VARCHAR(50),@RfqId )+'}'
						,'{"POStatus":"'+POStatus+'"}'
						,'{"POStatus":"pending"}' 
						, GETUTCDATE() 
						, @ContactId 
						, 'mpOrderManagement'
					FROM mpOrderManagement (NOLOCK) WHERE RfqId = @RfqId
					
					UPDATE mpOrderManagement
					SET
						PONumber			= @PONumber 
						,PODate				= @PODate
						,IsMfgStandardPO	= @IsMfgStandardPO 
						,FileId				= @FileId
						,SupplierContactId	= @SupplierContactId
						,ModifiedDate		= GETUTCDATE()
						,IsDeleted = 0
						,POStatus ='pending' 
					WHERE RfqId = @RfqId
					
					SET @TransactionStatus = 'Success'
				END
			
				INSERT INTO tmpOrderManagementflowlogs (RfqId,FlowName,POJSON)
				SELECT @RfqId , 'Update PO data' , '' 
			
			
			END
			-- if po not exists
			ELSE
			BEGIN
			
				SELECT 
					@AddressId = a.address_id 
				FROM 
				mp_company_shipping_site	a (NOLOCK)
				LEFT JOIN mp_addresses		c (NOLOCK) ON a.address_id = c.address_id
				LEFT JOIN mp_mst_country	d (NOLOCK) ON c.country_id = d.country_id
				LEFT JOIN mp_mst_region		e (NOLOCK) ON c.region_id = e.region_id AND e.region_id <> 0
				WHERE a.default_site = 1
				AND a.comp_id IN (@CompanyId)

				SELECT 
					@PaymentTerm = b.description			
				FROM mp_rfq (NOLOCK) a
				LEFT JOIN mp_mst_paymentterm		(NOLOCK)  b ON a.payment_term_id = b.paymentterm_id
				WHERE rfq_id = @RfqId


				IF @SupplierContactId NOT IN (16,17,18,20)
				BEGIN
					INSERT INTO mpOrderManagement
					(RfqId ,RfqEncryptedId ,PONumber ,PODate ,IsMfgStandardPO  ,FileId ,SupplierContactId ,POStatus , ShippingAddressId , PaymentTerm)
					SELECT @RfqId ,@RfqEncryptedId ,@PONumber ,@PODate ,@IsMfgStandardPO ,@FileId ,@SupplierContactId ,'pending'  , @AddressId , @PaymentTerm
					
					INSERT INTO mp_data_history
					(field,oldvalue,newvalue,creation_date,userid,tablename)
					SELECT 
						'{"RfqId":'+CONVERT(VARCHAR(50),@RfqId )+'}'
						,'{"POCreated":""}'
						,'{"POCreated":"Yes"}' 
						, GETUTCDATE() 
						, @ContactId 
						, 'mpOrderManagement'
										
					INSERT INTO mp_data_history
					(field,oldvalue,newvalue,creation_date,userid,tablename)
					SELECT 
						'{"RfqId":'+CONVERT(VARCHAR(50),@RfqId )+'}'
						,'{"POStatus":""}'
						,'{"POStatus":"pending"}' 
						, GETUTCDATE() 
						, @ContactId 
						, 'mpOrderManagement'

					SET @TransactionStatus = 'Success'

					INSERT INTO tmpOrderManagementflowlogs (RfqId,FlowName,POJSON)
					SELECT @RfqId , 'Create PO data' , '' 
				END
			END

		COMMIT TRAN
		SELECT @TransactionStatus AS TransactionStatus 
				
	END TRY
	BEGIN CATCH
		
		ROLLBACK TRAN
		SET @TransactionStatus = 'Failure' + ' - ' + ERROR_MESSAGE()

		INSERT INTO tmpOrderManagementflowlogs (RfqId,FlowName,POJSON)
		SELECT @RfqId , 'Error - Create PO data' , CONVERT(VARCHAR(1000), @TransactionStatus)

		SELECT @TransactionStatus AS TransactionStatus 

	END CATCH
	
		

END
GO
PRINT N'Altering Procedure [dbo].[proc_set_qms_email_message]...';


GO
/*

	exec proc_set_qms_email_message 
	@supplier_id			= 1337894
	,@supplier_company_id	= 1768056
	,@qms_quote_id			= 33
	,@email_subject			= 'test subject'
	,@email_body			= 'test body'
	,@qms_pdf_file_name		= 'testfile1'
	,@is_email_to_customer	= 1

*/

ALTER procedure [dbo].[proc_set_qms_email_message]
(
	@supplier_id			int
	,@supplier_company_id	int
	,@qms_quote_id			int
	,@email_subject			nvarchar(500)
	,@email_body			nvarchar(max)
	,@qms_pdf_file_name		nvarchar(500)
	,@is_email_to_customer	bit
)
as
begin
	/*
		Oct 17, 2019 - M2-2200 M - Quotes Details page - Messages tab : DB
	*/
	declare @transaction_status					varchar(500) = 'Failed'
	declare	@qms_customer_id					int
	declare	@qms_customer_email					varchar(250)
	declare @qms_email_message_id				int
	declare @qms_pdf_file_id					int
	declare @qms_terms_condition_file_id		int = 0
	declare @supplier_email_id					varchar(250)

	select 
		@qms_customer_id	= b.qms_contact_id
		,@qms_customer_email = b.email
	from
	mp_qms_quotes			(nolock) a
	join mp_qms_contacts	(nolock) b on a.qms_contact_id = b.qms_contact_id
	where qms_quote_id = @qms_quote_id	
	
	select 
		@qms_terms_condition_file_id = file_id 
	from mp_special_files 
	where cont_id = @supplier_id and comp_id = @supplier_company_id
	and filetype_id = 109 and is_deleted = 0
	
	if @is_email_to_customer = 0
		set @supplier_email_id = (select top 1  b.email 	from mp_contacts a (nolock) join aspnetusers b (nolock) on a.user_id = b.id	where a.contact_id = @supplier_id )

	begin tran
	begin try

		insert into mp_special_files
		(file_name ,cont_id ,comp_id ,is_deleted ,filetype_id, creation_date )
		select @qms_pdf_file_name , @supplier_id , @supplier_company_id , 0 , 110 , getutcdate()
		set @qms_pdf_file_id = @@identity

		insert into	mp_qms_email_messages
		(qms_quote_id,email_subject,email_body,email_date,from_cont,to_cont,to_email)
		select @qms_quote_id , @email_subject , @email_body , getutcdate() , @supplier_id , case when @is_email_to_customer = 0 then @supplier_id else @qms_customer_id end , case when @is_email_to_customer = 0 then @supplier_email_id else @qms_customer_email end  
		set @qms_email_message_id = @@identity

		insert into mp_qms_email_messages_files
		(qms_email_message_id,file_id)
		select * from
		(
		select @qms_email_message_id qms_email_message_id  , @qms_terms_condition_file_id qms_file_id
		union 
		select @qms_email_message_id qms_email_message_id  , @qms_pdf_file_id qms_pdf_file_id
		) a 
		where qms_file_id <> 0

		commit

		set @transaction_status = 'Success'
		select @transaction_status TransactionStatus , @qms_email_message_id as QMSEmailMessageId

	end try
	begin catch
		rollback

		set @transaction_status = 'Failed - ' + error_message()
		select @transaction_status TransactionStatus , 0 QMSEmailMessageId 

	end catch


end
GO
PRINT N'Altering Procedure [dbo].[proc_set_SupplierPublishProfileStatus]...';


GO

/* 

EXEC proc_get_SupplierPublishProfileStatus  @CompanyId = 1800526
EXEC proc_set_SupplierPublishProfileStatus @CompanyId=1800535 ,@ContactId = 1372581

*/
ALTER PROCEDURE [dbo].[proc_set_SupplierPublishProfileStatus]
(
	@CompanyId	INT
	,@ContactId	INT
)
AS
BEGIN

	DECLARE @StatusId INT

	-- M2-3900 M - Publish my profile decision modal-DB 
	UPDATE a SET a.ProfileStatus = 
			
				CASE 
					WHEN a.ProfileStatus = 234 THEN 234 
					WHEN a.ProfileStatus = 232 THEN 232 
					WHEN b.NewIsProfileCompleted =  1 THEN 231 
					ELSE 230
				END 
			
	FROM mp_companies a (NOLOCK)
	JOIN
	(
		SELECT
			a.company_id
			,
			--CASE  
			--	WHEN e.PaidStatus IN ('03 Gold' , '02 Silver', '04 Platinum') THEN 1
			--	ELSE
					CASE 
						WHEN 
							(
								CASE WHEN LEN(COALESCE( a.description,'')) > 0 THEN 1 ELSE 0 END
								+ CASE WHEN (COALESCE(d.company_id,'0')) > 0 THEN 1 ELSE 0 END  
								+ CASE WHEN LEN(COALESCE( f.address1 , '')) > 0 THEN 1 ELSE 0 END  
							) = 3 THEN CAST(1 AS BIT)
						ELSE CAST(0 AS BIT)
					END 
			 --END 	
			 NewIsProfileCompleted
		FROM mp_companies a
		JOIN 
			(
				SELECT 
					company_id , contact_id , first_name , last_name , is_buyer , address_id, IsTestAccount , [user_id] 
					, ROW_NUMBER() OVER(PARTITION BY company_id ORDER BY company_id , is_admin DESC, contact_id ) rn 
				FROM mp_contacts		(NOLOCK) 
				WHERE is_buyer = 0
		) b ON a.company_id = b.company_id and b.rn=1  
		LEFT JOIN 
		(
			SELECT company_id FROM mp_company_processes (NOLOCK) 
			UNION
			SELECT company_id FROM mp_gateway_subscription_company_processes (NOLOCK) 					 
		) d ON d.company_id = a.company_id
		LEFT JOIN
		(
			SELECT 
				VisionACCTID  AS CompanyId
				,(
					CASE	
						WHEN account_status IN ('active','gold') THEN '03 Gold' --1
						WHEN account_status = 'silver'          THEN '02 Silver'
						WHEN account_status = 'platinum'        THEN '04 Platinum'
						ELSE '01 Basic' 
					END
				 ) AS PaidStatus			
			FROM Zoho..Zoho_company_account (NOLOCK) WHERE synctype = 2 AND  account_type_id = 3 
		) e ON e.CompanyId = a.company_id
		LEFT JOIN mp_addresses f  (NOLOCK) ON f.address_id = b.address_id
	) b ON a.company_id = b.company_id and a.company_id =  @CompanyId



	SET @StatusId = (SELECT ProfileStatus AS StatusId FROM mp_companies a (NOLOCK) WHERE company_id = @CompanyId)

	SELECT @StatusId AS StatusId 

END
GO
PRINT N'Altering Procedure [dbo].[proc_set_XML_SupplierProfile]...';


GO

/*

TRUNCATE TABLE XML_SupplierProfile_Logs
TRUNCATE TABLE XML_SupplierProfile

EXEC [proc_set_XML_SupplierProfile]
SELECT * FROM XML_SupplierProfile_Logs
SELECT * FROM XML_SupplierProfile where company_id =  338576
SELECT * from XML_SupplierProfileCaptureChanges where companyid =  338576
select * from mp_companies where company_id = 1791918
*/
ALTER PROCEDURE [dbo].[proc_set_XML_SupplierProfile]

AS
BEGIN
	--M2-3466 Supplier profile XML file generation
	
	DECLARE @LastRecordDate	DATETIME2 
	DECLARE @CurrentDT		DATETIME2 =  GETUTCDATE()


	SET @LastRecordDate =  ISNULL((SELECT MAX ([createddate]) FROM XML_SupplierProfile (NOLOCK)) ,'2021-01-25 00:00:00.101') 
	SET @LastRecordDate =  DateAdd(millisecond,1,@LastRecordDate)

	--SELECT GETUTCDATE()
	
	EXEC [proc_set_XML_SupplierProfile_NewUsers] 
		@MaxDate			= @LastRecordDate ,
		@CurrentDateTime	= @CurrentDT

	--SELECT GETUTCDATE() CurrentTime
	WAITFOR DELAY '00:00:10' ---- 10 Second Delay
	SELECT GETUTCDATE() CurrentTime

	EXEC [proc_set_XML_SupplierProfile_NewProfileChanges]
	@MaxDate = @LastRecordDate ,
	@CurrentDateTime = @CurrentDT

	--SELECT GETUTCDATE()

END
GO
PRINT N'Altering Procedure [dbo].[proc_gateway_subscription_get_invoices]...';


GO

/*
	EXEC [proc_gateway_subscription_get_invoices] @supplier_id = 1349270
*/

ALTER  PROCEDURE [dbo].[proc_gateway_subscription_get_invoices]
(
	@supplier_id		INT
)
AS
BEGIN

	/*
		CREATED	:	MAR 18, 2020	
		DESC	:	M2-2713 M - Billing History and Contract page - DB
	*/

	SET NOCOUNT ON

	SELECT DISTINCT
		a.subscription_customer_id AS SubscriptioneCustomerId
		,e.subscription_id  AS SubscriptionSubscriptionId
		,invoice_date AS InvoiceDate
		,CONVERT(DECIMAL(18,2),invoice_amount) AS InvoiceAmount
		,subscription_invoice_id AS SubscriptionInvoiceId
		,invoice_id AS InvoiceId
		, InvoicehostedPDF AS InvoicePDF
	FROM  [dbo].[mp_gateway_subscription_customers] a (NOLOCK)
	JOIN  
	(
		SELECT a.id, a.customer_id, a.subscription_end ,a.subscription_id
		FROM  [dbo].[mp_gateway_subscriptions] (NOLOCK) a
	) e on a.id =  e.customer_id
	JOIN
	(
		SELECT 
			a.subscription_invoice_id , a.id invoice_id , a.subscription_id , a.invoice_no 
			, FORMAT(a.invoice_date,'MM/dd/yyyy ') AS invoice_date , a.amount_due AS invoice_amount
			, a.invoice_pdf AS InvoicePDF
			, a.invoice_hosted_url AS InvoicehostedPDF
		FROM  [dbo].mp_gateway_subscription_invoices (NOLOCK) a
		JOIN
		(
			SELECT subscription_id, subscription_invoice_id , MAX(id) invoice_id 
			FROM  [dbo].mp_gateway_subscription_invoices (NOLOCK)
			GROUP BY subscription_id, subscription_invoice_id 
		) b on a.id = b.invoice_id
	) b on e.subscription_id =  b.subscription_id
	WHERE 
		a.supplier_id = @supplier_id
	ORDER BY InvoiceDate DESC , InvoiceId DESC


END
GO
PRINT N'Altering Procedure [dbo].[proc_get_GrowthPackageManufacturerFlag]...';


GO


--SELECT * FROM mpGrowthPackageUnlockRFQsInfo  WHERE CompanyID=1854421

--UPDATE mpGrowthPackageUnlockRFQsInfo SET IsDeleted = 1  WHERE CompanyID=1854421 
---- exec [proc_get_GrowthPackageManufacturerFlag] @CompanyID=1854421
ALTER PROCEDURE [dbo].[proc_get_GrowthPackageManufacturerFlag]  
(@CompanyId int )  
AS  

BEGIN  
 SET NOCOUNT ON   

 --  M2-4616 : Hubspot - Add the Growth Package Flag to the down sync
	
	DECLARE @IsEligibleForGrowthPackage INT ,@IsGrowthPackageTaken INT  ,@UnlockRfqCount INT , @TotalUnlockRfqCount INT , @NoOfDaysLeft INT 
	,@IsStarterPackageTaken BIT , @IsStarterFreeTrialTaken BIT,  @FreeTrialSubscriptionEndDate DATETIME 

	DECLARE @AccountType INT = (SELECT account_type FROM  [mp_registered_supplier] (NOLOCK)  WHERE company_id = @CompanyId )

	DECLARE @SubscriptionStatus VARCHAR(25) , @RunningSubscriptionId INT

	SELECT 
		@IsEligibleForGrowthPackage = IsEligibleForGrowthPackage
		,@IsGrowthPackageTaken      = IsGrowthPackageTaken
		,@IsStarterPackageTaken     = IsStarterPackageTaken
		,@IsStarterFreeTrialTaken   = IsStarterFreeTrialTaken
	FROM mp_companies (NOLOCK) 
	WHERE Company_Id = @CompanyId
	 
	-- To show unlock option in left panel  
	SELECT @TotalUnlockRfqCount = COUNT(DISTINCT Rfq_Id) FROM mpGrowthPackageUnlockRFQsInfo (NOLOCK) 
	WHERE CompanyId = @CompanyId 
	-- AND IsDeleted = 0 
	AND IsDeleted IN (0,1) -- to show unlock tab in left menu
	
	 --- below code commented with M2-5221
	 ---- Getting status and latest running id against company id
	 --SELECT  TOP 1  @SubscriptionStatus =   b.status , @RunningSubscriptionId = b.id 
		--FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
		--JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON a.id= b.customer_id
		--WHERE a.gateway_id = 310 
		--AND a.company_id = @CompanyId
		----and status = 'active'
		--ORDER BY b.ID DESC

	   ------ Updated code with M2-5221
		;with cte as 
		(
			SELECT   MAX(b.subscription_start)  subscription_start 
			, MAX(b.subscription_end) subscription_end
			FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
			JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON a.id= b.customer_id
			WHERE a.gateway_id = 310 
			AND a.company_id = @CompanyId
		)  
			SELECT  TOP 1     @SubscriptionStatus =   b.status ,   @RunningSubscriptionId = b.id 
			FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
			JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON a.id= b.customer_id
			JOIN cte on cte.subscription_start = b.subscription_start and cte.subscription_end = b.subscription_end
			WHERE a.gateway_id = 310 
			AND a.company_id = @CompanyId
			ORDER BY b.ID DESC
 
	IF @SubscriptionStatus IS NULL
	   BEGIN
	
			SET @UnlockRfqCount =
			(
					SELECT COUNT(DISTINCT c.rfq_id)
					FROM mpGrowthPackageUnlockRFQsInfo (NOLOCK) c 
					WHERE c.IsDeleted = 0 AND companyid = @CompanyId
						 
			)

	    END
	ELSE IF @SubscriptionStatus = 'active'
		BEGIN
		
		SET @UnlockRfqCount =
			(
					SELECT COUNT(DISTINCT c.rfq_id)
					FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
					JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON 
						a.id = b.customer_id 
						AND a.company_id = @CompanyId
					JOIN  mpGrowthPackageUnlockRFQsInfo (NOLOCK) c on c.CompanyId = a.company_id
					/* Slack issue : restored used RFQs -> IsDeleted = 1 */  
					AND c.IsDeleted = 0
					WHERE 
					    b.id = @RunningSubscriptionId
						AND c.UnlockDate  >= b.subscription_start
						AND c.UnlockDate <= b.subscription_end
			)
				 
				SET @NoOfDaysLeft =  
				(
					SELECT NoOfDaysLeft FROM
					(
						SELECT 
							DATEDIFF(DAY,GETUTCDATE(), b.subscription_end) NoOfDaysLeft  
							, ROW_NUMBER() OVER(PARTITION BY a.company_id ORDER BY a.company_id , b.Id DESC) Rn
						FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
						JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON 					
							a.id = b.customer_id 
							AND a.company_id = @CompanyId
					) a 
					WHERE Rn  = 1
				)

		END
	ELSE IF @SubscriptionStatus = 'canceled'
		BEGIN
		 
				SET @UnlockRfqCount =
					(
							SELECT COUNT(DISTINCT c.rfq_id)
							FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
							JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON 
								a.id = b.customer_id 
								AND a.company_id = @CompanyId
							JOIN  mpGrowthPackageUnlockRFQsInfo (NOLOCK) c on c.CompanyId = a.company_id
							/* Slack issue : restored used RFQs -> IsDeleted = 1 */ 
							AND c.IsDeleted = 0
							WHERE b.id = @RunningSubscriptionId
							   AND	c.UnlockDate  >= b.subscription_start
							   AND CAST(c.UnlockDate AS DATE) <=  CAST(DATEADD(dd,30, b.subscription_end) AS DATE)
					) 

				SET @NoOfDaysLeft =  0  --- here set the value 0 because subscription cancel and no active subscription 

		END	 
	ELSE
		BEGIN

				SET @UnlockRfqCount =
					(
							SELECT COUNT(DISTINCT c.rfq_id)
							FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
							JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON 
								a.id = b.customer_id 
								AND a.company_id = @CompanyId
							JOIN  mpGrowthPackageUnlockRFQsInfo (NOLOCK) c on c.CompanyId = a.company_id
							/* Slack issue : restored used RFQs -> IsDeleted = 1 */ 
							AND c.IsDeleted = 0
							WHERE b.id = @RunningSubscriptionId
							   AND	c.UnlockDate  >= b.subscription_start
							   AND CAST(c.UnlockDate AS DATE) <=  CAST(DATEADD(dd,30, b.subscription_end) AS DATE)
					) 

					SET @NoOfDaysLeft =  
						(
							SELECT NoOfDaysLeft FROM
							(
								SELECT 
									DATEDIFF(DAY,GETUTCDATE(),CAST(DATEADD(dd,30, b.subscription_end) AS DATE) ) NoOfDaysLeft  
									, ROW_NUMBER() OVER(PARTITION BY a.company_id ORDER BY a.company_id , b.Id DESC) Rn
								FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
								JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON 
									a.id = b.customer_id 
									AND a.company_id = @CompanyId
							) a 
							WHERE Rn  = 1
						)

		END 
		
		---- First record information of company when starter package purchased
		IF @SubscriptionStatus = 'trialing'
		BEGIN
				SELECT  TOP 1  @FreeTrialSubscriptionEndDate =  subscription_end
				FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
				JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON a.id= b.customer_id
				WHERE a.gateway_id = 310 
				AND a.company_id = @CompanyId
				AND b.status = 'trialing'
				ORDER BY b.ID  
		END


  	SELECT  
		ISNULL(@IsEligibleForGrowthPackage,0) AS IsEligibleForGrowthPackage
		, ISNULL(@IsGrowthPackageTaken,0)   AS IsGrowthPackageTaken  
		, ISNULL((CASE WHEN @SubscriptionStatus IS NULL THEN 0 WHEN @UnlockRfqCount = 0 THEN 3 ELSE 3-@UnlockRfqCount END ),0)  AS UnlockRfqCount
		, (CASE WHEN @NoOfDaysLeft > 0 THEN @NoOfDaysLeft ELSE 0 END) NoOfDaysLeft
		, ISNULL(@IsStarterPackageTaken,0) AS IsStarterPackageTaken
		, ISNULL(@IsStarterFreeTrialTaken,0) AS IsStarterFreeTrialTaken
		, @FreeTrialSubscriptionEndDate AS FreeTrialSubscriptionEndDate
		, ISNULL(@TotalUnlockRfqCount,0)   AS TotalUnlockRfqCount  
   
END
GO
PRINT N'Altering Procedure [dbo].[proc_set_HubspotToMFGAccountPaidStatusInstantSync]...';


GO


/*
 M2-5051 HubSpot - Instant Sync (Account Paid Status Field) - DB

 EXEC [dbo].[proc_set_HubspotToMFGAccountPaidStatusInstantSync]
 @CompanyID = 1800921
 ,@HubSpotAccountId =15681976877
 ,@AccountPaidStatus = Basic  -- platinum ,Growth ,gold, Basic or free

*/
 ALTER PROCEDURE [dbo].[proc_set_HubspotToMFGAccountPaidStatusInstantSync]
 (
	@CompanyID INT = NULL
	,@HubSpotAccountId VARCHAR(100)
    ,@AccountPaidStatus VARCHAR(100) = NULL 
 )
 AS
 BEGIN
 --SET NOCOUNT ON

	-- declare @CompanyID INT = 1800921
	--,@HubSpotAccountId VARCHAR(100) = 15681976877
 --   ,@AccountPaidStatus VARCHAR(100) = 'Basic' -- platinum Growth gold Basic starter

	 
	  ---- for webhook log  entry tracking 
	  INSERT INTO HubSpotWebhookAccountPaidStatusExecutionLogs (CompanyID,HubSpotAccountId,AccountPaidStatus,WebhookType)
	  VALUES (@CompanyID,@HubSpotAccountId,@AccountPaidStatus,'AccountPaidStatus')

BEGIN TRY
	BEGIN TRANSACTION
 		 
	  IF  ISNULL(@AccountPaidStatus,'') IN ('free','Basic','')  
	  BEGIN
				--- if active subscription then do not delete and update
				IF NOT EXISTS 
						 (
							 SELECT TOP 1 b.id
							 FROM mp_gateway_subscription_customers (NOLOCK) a 
							 JOIN mp_gateway_subscriptions (NOLOCK) b on b.customer_id = a.id
							 where a.company_id = @CompanyID --17700231
							 AND CAST( GETUTCDATE()  AS DATE) BETWEEN CAST ( b.subscription_start AS DATE) AND CAST ( b.subscription_end AS DATE) 
							 AND b.[status] IN ( 'active','trialing')
							 ORDER BY b.id DESC
						 )
				BEGIN
					DELETE FROM mp_registered_supplier  WHERE company_id = @CompanyID

					UPDATE mp_companies
					SET IsEligibleForGrowthPackage = 1
					,IsGrowthPackageTaken = 0 
					,IsStarterPackageTaken = 0
					WHERE company_id= @CompanyID
					---below condition added on 09-Aug-2023
					AND employee_count_range_id = 1
					AND Manufacturing_location_id <> 3
					
				END
	  END
	  ELSE
	  BEGIN
 				IF EXISTS ( SELECT company_id FROM mp_registered_supplier(NOLOCK) WHERE company_id = @CompanyID )
				BEGIN
			
					IF @AccountPaidStatus = 'Growth'
					BEGIN
						 --- if active subscription then do not update 
						 IF NOT EXISTS 
						 (
							 SELECT TOP 1 b.id
							 FROM mp_gateway_subscription_customers (NOLOCK) a 
							 JOIN mp_gateway_subscriptions (NOLOCK) b on b.customer_id = a.id
							 where a.company_id = @CompanyID --17700231
							 AND CAST( GETUTCDATE()  AS DATE) BETWEEN CAST ( b.subscription_start AS DATE) AND CAST ( b.subscription_end AS DATE) 
							 AND b.[status] = 'active'
							 ORDER BY b.id DESC
						 )
						 BEGIN
							UPDATE mp_companies
								SET IsEligibleForGrowthPackage = 1
								,IsGrowthPackageTaken = 0 
							WHERE company_id= @CompanyID
						END
					END 
					ELSE IF @AccountPaidStatus = 'Starter'
					BEGIN
						 --- if active subscription then do not update 
						 IF NOT EXISTS 
						 (
							 SELECT TOP 1 b.id
							 FROM mp_gateway_subscription_customers (NOLOCK) a 
							 JOIN mp_gateway_subscriptions (NOLOCK) b on b.customer_id = a.id
							 where a.company_id = @CompanyID --17700231
							 AND CAST( GETUTCDATE()  AS DATE) BETWEEN CAST ( b.subscription_start AS DATE) AND CAST ( b.subscription_end AS DATE) 
							 AND b.[status] IN( 'active','trialing')
							 ORDER BY b.id DESC
						 )
						 BEGIN
							UPDATE mp_companies
								SET IsEligibleForGrowthPackage = 1
								,IsStarterPackageTaken = 0 
							WHERE company_id= @CompanyID
						END
						
					END
					ELSE
					BEGIN
						    --- if this user has active subscription than do not update
							IF NOT EXISTS 
									 (
										 SELECT TOP 1 b.id
										 FROM mp_gateway_subscription_customers (NOLOCK) a 
										 JOIN mp_gateway_subscriptions (NOLOCK) b on b.customer_id = a.id
										 where a.company_id = @CompanyID  
										 AND CAST( GETUTCDATE()  AS DATE) BETWEEN CAST ( b.subscription_start AS DATE) AND CAST ( b.subscription_end AS DATE) 
										 AND b.[status] IN( 'active','trialing')
										 ORDER BY b.id DESC
									 )
							BEGIN
							 
								UPDATE mp_companies
									SET IsEligibleForGrowthPackage = NULL
									,IsGrowthPackageTaken = NULL 
									,IsStarterPackageTaken = NULL
								WHERE company_id= @CompanyID

								---- update mp_registered_supplier
								UPDATE mp_registered_supplier
								SET account_type = CASE WHEN @AccountPaidStatus = 'gold'     THEN 85
											WHEN @AccountPaidStatus = 'platinum' THEN 86
											WHEN @AccountPaidStatus = 'Growth'   THEN 84
											WHEN @AccountPaidStatus = 'Starter'  THEN 313
										END  
								,updated_on = GETUTCDATE()
 								WHERE company_id = @CompanyID
								
							END
							 
					END
					 
				END
				ELSE
				BEGIN
						---- insert mp_registered_supplier if not exists record
						INSERT INTO dbo.mp_registered_supplier (company_id,is_registered,created_on,account_type )
						VALUES (@CompanyID,1,GETUTCDATE(), CASE WHEN @AccountPaidStatus = 'gold'     THEN 85
																WHEN @AccountPaidStatus = 'platinum' THEN 86 
																WHEN @AccountPaidStatus = 'Growth'   THEN 84
																WHEN @AccountPaidStatus = 'Starter'  THEN 313
																END )
 
						IF @AccountPaidStatus = 'Growth'
						BEGIN
						     --- if active subscription then do not update 
							 IF NOT EXISTS 
							 (
								 SELECT TOP 1 b.id
								 FROM mp_gateway_subscription_customers (NOLOCK) a 
								 JOIN mp_gateway_subscriptions (NOLOCK) b on b.customer_id = a.id
								 where a.company_id = @CompanyID --17700231
								 AND CAST( GETUTCDATE()  AS DATE) BETWEEN CAST ( b.subscription_start AS DATE) AND CAST ( b.subscription_end AS DATE) 
								 AND b.[status] = 'active'
								 ORDER BY b.id DESC
							 )
							 BEGIN
								UPDATE mp_companies
									SET IsEligibleForGrowthPackage = 1
									,IsGrowthPackageTaken = 0 
								WHERE company_id= @CompanyID
							 END
						END 
						ELSE IF @AccountPaidStatus = 'Starter'
					    BEGIN
							 --- if active subscription then do not update 
							 IF NOT EXISTS 
							 (
								 SELECT TOP 1 b.id
								 FROM mp_gateway_subscription_customers (NOLOCK) a 
								 JOIN mp_gateway_subscriptions (NOLOCK) b on b.customer_id = a.id
								 where a.company_id = @CompanyID --17700231
								 AND CAST( GETUTCDATE()  AS DATE) BETWEEN CAST ( b.subscription_start AS DATE) AND CAST ( b.subscription_end AS DATE) 
								 AND b.[status] IN( 'active','trialing')
								 ORDER BY b.id DESC
							 )
							 BEGIN
								UPDATE mp_companies
								SET IsEligibleForGrowthPackage = 1
								,IsStarterPackageTaken = 0 
								WHERE company_id= @CompanyID
							END
					    END
						ELSE
						BEGIN
							 --- if this user has active subscription than do not update
							IF NOT EXISTS 
									 (
										 SELECT TOP 1 b.id
										 FROM mp_gateway_subscription_customers (NOLOCK) a 
										 JOIN mp_gateway_subscriptions (NOLOCK) b on b.customer_id = a.id
										 where a.company_id = @CompanyID  
										 AND CAST( GETUTCDATE()  AS DATE) BETWEEN CAST ( b.subscription_start AS DATE) AND CAST ( b.subscription_end AS DATE) 
										 AND b.[status] IN( 'active','trialing')
										 ORDER BY b.id DESC
									 )
								BEGIN
									UPDATE mp_companies
										SET IsEligibleForGrowthPackage = NULL
										,IsGrowthPackageTaken = NULL 
										,IsStarterPackageTaken = NULL 
									WHERE company_id= @CompanyID
								END
							 
						END

						/* M2-4945 HubSpot - Integrate Reshape User Registration API -DB 
							First time Account Paid Status from basic to Growth, Gold, Platinum then inserted such records into mpAccountPaidStatusDetails
						*/
						INSERT INTO mpAccountPaidStatusDetails (CompanyId,OldValue,NewValue,IsProcessed,IsSynced,SourceType)
						SELECT 
						  @CompanyID AS CompanyId
						, 83 AS OldValue
						, CASE WHEN @AccountPaidStatus = 'gold'      THEN 85
							  WHEN  @AccountPaidStatus  = 'platinum' THEN 86 
							  WHEN  @AccountPaidStatus  = 'Growth'   THEN 84
							  WHEN @AccountPaidStatus = 'Starter'    THEN 313
							  END AS NewValue
						, NULL AS IsProcessed
						, 0 AS IsSynced
						, 'AccountPaidStatusInstantSync' AS SourceType 
						/**/

				END
	
		END

	  ------ Update data into Hubspot DB
	  UPDATE DataSync_MarketplaceHubSpot.dbo.hubspotcompanies
	  SET [Account Paid Status] = CASE WHEN ISNULL(@AccountPaidStatus,'') = '' THEN 'Basic' ELSE @AccountPaidStatus END
	  WHERE [HubSpot Account Id]= @HubSpotAccountId
	  AND [SyncType] = 2

	COMMIT TRANSACTION
END TRY

BEGIN CATCH
	ROLLBACK TRANSACTION
END CATCH

	  

 END
GO
PRINT N'Altering Procedure [dbo].[proc_set_HubspotToMFGCompanyGPInstantSync]...';


GO

/*
M2-4913 HubSpot - Instant Sync (Growth Package Field) - DB

*/
 ALTER PROCEDURE [dbo].[proc_set_HubspotToMFGCompanyGPInstantSync]
 (
	@CompanyID INT = NULL
	,@HubSpotAccountId VARCHAR(100)
    ,@IsEligibleForGrowthPackage BIT = NULL --- 0: False,   1: True
 )
 AS
 BEGIN
   
   ---- for webhook log  entry tracking 
   INSERT INTO HubSpotWebhookExecutionLogs (CompanyID,HubSpotAccountId,IsEligibleForGrowthPackage,WebhookType)
   VALUES (@CompanyID,@HubSpotAccountId,@IsEligibleForGrowthPackage,'GrowthPackageEligible')


	 IF NOT EXISTS 
	 (
		 SELECT TOP 1 b.id
		 FROM mp_gateway_subscription_customers (NOLOCK) a 
		 JOIN mp_gateway_subscriptions (NOLOCK) b on b.customer_id = a.id
		 where a.company_id = @CompanyID --17700231
		 AND CAST( GETUTCDATE()  AS DATE) BETWEEN CAST ( b.subscription_start AS DATE) AND CAST ( b.subscription_end AS DATE) 
		 AND b.[status] = 'active'
		 ORDER BY b.id DESC
	 )
	 BEGIN
	 
		---- Update data into MFG
		UPDATE mp_companies
		SET IsEligibleForGrowthPackage = @IsEligibleForGrowthPackage
		, IsGrowthPackageTaken = 0
		WHERE company_id = @CompanyID

		---- Update data into Hubspot DB
		--UPDATE UAT_DataSync_MarketplaceHubSpot.dbo.hubspotcompanies
		UPDATE DataSync_MarketplaceHubSpot.dbo.hubspotcompanies
		SET IsEligibleForGrowthPackage = @IsEligibleForGrowthPackage
		WHERE [HubSpot Account Id]= @HubSpotAccountId
		AND [SyncType] = 2
 

	 END
	 

 END
GO
PRINT N'Altering Procedure [dbo].[proc_get_BuyerRfqInfoOnManufacturerSide]...';


GO



/*


-- M2-3170 M - Add Buyer RFQ info to the drawer - DB
EXEC proc_get_BuyerRfqInfoOnManufacturerSide
@SupplierCompanyId = 1775055
,@SupplierId = 1344694
,@BuyerId = 691391

*/
ALTER PROCEDURE [dbo].[proc_get_BuyerRfqInfoOnManufacturerSide]
(
	@SupplierCompanyId		INT
	,@SupplierId			INT
	,@BuyerId				INT
)
AS
BEGIN
	-- M2-3170 M - Add Buyer RFQ info to the drawer - DB

	SET NOCOUNT ON

	DECLARE @ManufacturingLocation	INT

	SET @ManufacturingLocation = (SELECT manufacturing_location_id FROM  mp_companies (NOLOCK) WHERE company_id =  @SupplierCompanyId )

	SELECT 
	TOP 5
		a.rfq_id		AS [RfqId]
		,a.rfq_name		AS [RfqName]
		,e.discipline_name	AS [Process]
		,(CASE WHEN d.discipline_name =e.discipline_name THEN NULL ELSE d.discipline_name END)	AS [Technique]
		,MAX(c.part_qty)	AS [MaxQuantity]
		,@ManufacturingLocation AS SupplierManufacturingLocation
		,g.rfq_pref_manufacturing_location_id AS RfqManufacturingLocation
	FROM mp_rfq					(NOLOCK) a
	JOIN mp_rfq_parts			(NOLOCK) b ON a.rfq_id = b.rfq_id AND b.Is_Rfq_Part_Default = 1
	JOIN mp_rfq_part_quantity	(NOLOCK) c ON b.rfq_part_id = c.rfq_part_id AND c.is_deleted = 0
	JOIN mp_mst_part_category	(NOLOCK) d ON b.part_category_id = d.part_category_id AND d.status_id = 2
	JOIN mp_mst_part_category	(NOLOCK) e ON d.parent_part_category_id = e.part_category_id AND e.status_id = 2
	JOIN mp_rfq_supplier		(NOLOCK) f ON a.rfq_id = f.rfq_id  AND f.company_id = -1 
	JOIN mp_rfq_preferences		(NOLOCK) g ON a.rfq_id = g.rfq_id
	WHERE a.rfq_status_id IN (3,5,6,16,17,20)
	AND a.contact_id = @BuyerId
	AND g.rfq_pref_manufacturing_location_id = @ManufacturingLocation
	GROUP BY a.rfq_id,a.rfq_name	,e.discipline_name,d.discipline_name ,g.rfq_pref_manufacturing_location_id 
	ORDER BY a.rfq_id DESC



END
GO
PRINT N'Altering Procedure [dbo].[proc_get_RfqList_Vision]...';


GO
/*

declare @p25 dbo.tbltype_ListOfProcesses
insert into @p25 values (17819

declare @p26 dbo.tbltype_ListOfBuyerIndustryId

exec [proc_get_RfqList_Vision]
	@ContactId=848283
	,@CompanyId=1274154
	,@RfqType=10
	,@CountryId=0
	,@ManufacturingLocationId=0
	,@IsActive=1
	,@IsPending=0
	,@IsIncomplete=0
	,@IsClosingIn4Days=0
	,@IsClosingIn24Hours=0
	,@IsQuoting=0
	,@IsAwarded=0
	,@IsDraft=1
	,@IsDraftAfterClose=0
	,@DraftBeforeRelease=0
	,@IsClosed=0
	,@PageNumber=1
	,@PageSize=20
	,@IsValidated=0
	,@IsUnvalidated=0
	,@IsOrderByDesc=1
	,@OrderBy=default
	,@IsMfgCommunityRfq=0
	,@SearchText=N''
	,@ProcessIDs=@p25
	,@BuyerIndustryId=@p26

	GO

declare @p25 dbo.tbltype_ListOfProcesses

declare @p26 dbo.tbltype_ListOfBuyerIndustryId

exec [proc_get_RfqList_Vision_13042023]
	@ContactId=848283
	,@CompanyId=1274154
	,@RfqType=10
	,@CountryId=0
	,@ManufacturingLocationId=0
	,@IsActive=0
	,@IsPending=0
	,@IsIncomplete=0
	,@IsClosingIn4Days=0
	,@IsClosingIn24Hours=0
	,@IsQuoting=0
	,@IsAwarded=0
	,@IsDraft=1
	,@IsDraftAfterClose=0
	,@DraftBeforeRelease=0
	,@IsClosed=0
	,@PageNumber=1
	,@PageSize=20
	,@IsValidated=0
	,@IsUnvalidated=0
	,@IsOrderByDesc=1
	,@OrderBy=default
	,@IsMfgCommunityRfq=0
	,@SearchText=N''
	,@ProcessIDs=@p25
	,@BuyerIndustryId=@p26

*/

ALTER   PROCEDURE [dbo].[proc_get_RfqList_Vision]
	 @ContactId INT,
	 @CompanyId INT,
	 @RfqType INT,	
	 @ManufacturingLocationId INT = 0, 
	 @CountryId INT = 0, 
	 @IsActive BIT = 'false',
	 @IsPending BIT = 'false',
	 @IsIncomplete BIT = 'false',
	 @IsClosingIn4Days BIT = 'false',
	 @IsClosingIn24Hours BIT = 'false',
	 @IsClosed BIT = 'false',
	 @IsQuoting BIT = 'false',
	 @IsAwarded BIT = 'false',
	 @IsDraft BIT = 'false',
	 @DraftBeforeRelease BIT = 'false',
	 @IsDraftAfterClose BIT = 'false',
	 @PageNumber INT = 1,
	 @PageSize   INT = 24,
	 @IsValidated BIT = 'true',
	 @IsUnvalidated BIT = 'false',
	 @IsMfgCommunityRfq BIT = 'false',	 
	 @SearchText VARCHAR(50) = Null,
	 @IsOrderByDesc BIT = 1,
	 @OrderBy VARCHAR(50) = Null,
	 @ProcessIDs			as tbltype_ListOfProcesses			readonly,
	 @BuyerIndustryId    as tbltype_ListOfBuyerIndustryId    readonly
	  
	  
AS
-- =============================================
-- Author:		dp-Am. N.
-- Create date:  31/10/2018
-- Description:	Stored procedure to Get the RFQ details based on RFQ Type for Supplier
-- Modification:
-- Syntax: [proc_get_RfqList] <Contact_id>,<Company_id>,<RFQ_Type_id>
-- Example: [proc_get_RfqList] 216582,337455,3
--[proc_get_RfqList_Vision] 848283,1274154,10,92,NULL,NULL,NULL,NULL,NULL,Null,1,20,NULL,NULL,NULL,Null,'rfq_name'
--[proc_get_RfqList_Buyer] 216582,337455,12
--[proc_get_RfqList_Buyer] 216582,337455,6
-- =================================================================
--Version No – Change Date – Modified By      – CR No – Note
-- =================================================================
BEGIN

	set nocount on 

	--select '1' , getutcdate() dt

	/* M2-3384 : M & Vision - My RFQs - Search by Buyer's Industry -DB */
	drop table if exists #BuyerIndistry
	create table #BuyerIndistry (BuyerIndustryId int)

	drop table if exists #rfq_list
	create table #rfq_list (rfq_id int )

	drop table if exists #rfqs
	create table #rfqs (rfq_id int, rfq_created_on datetime , totalcount int, address_Id int null, city varchar(250) null, regionid int null, state varchar(250) null, countryid int null, country_name varchar(250) null)
	
	/* M2-2863 Vision - RFQs - Filter by Process - DB */
	drop table if exists #tmpprocesses
	create table #tmpprocesses
	(
		parent_part_category_id int null
		, part_category_id int null
	)
	/**/

	------------------------ All Vision Rfq --------------------
	--drop table if exists #tmpaddress
	--select * into #tmpaddress from useraddress



	drop table if exists #tmpmasterprocesses
	select distinct
		part_category_id
		, discipline_name
	into #tmpmasterprocesses
	from mp_mst_part_category	p		(nolock) 					
	where status_id = 2 and level = 0
	union
	select distinct
		p.part_category_id
		, case 
			when p.discipline_name = category.discipline_name then category.discipline_name 
			else category.discipline_name +' / '+ p.discipline_name
		  end discipline_name
	from mp_mst_part_category	p		(nolock) 	
	JOIN mp_mst_part_category category (nolock) on p.parent_part_category_id=category.part_category_id				
	where p.status_id = 2 and p.level = 1
	union
	select distinct 
		p.part_category_id
		, case 
			when p.discipline_name = category.discipline_name then category.discipline_name 
			else category.discipline_name +' / '+ p.discipline_name
		  end discipline_name
	from mp_rfq			a (nolock) 
	join mp_rfq_parts	b (nolock) on a.rfq_id = b.rfq_id and a.rfq_status_id = 2
	join mp_mst_part_category	p		(nolock)  on b.part_category_id = p.part_category_id
	join mp_mst_part_category category (nolock) on p.parent_part_category_id=category.part_category_id
	order by discipline_name


	/* M2-3837 Vision - RFQ Submitted to Pending Priority Time Stamp - DB */
	DROP TABLE IF EXISTS #tmp_proc_get_RfqList_Vision_RfqSubmitted
	
	IF @IsPending=1 AND @IsValidated = 1
	BEGIN
		SELECT rfq_id RfqId, MAX(creation_date) SubmittedDate INTO #tmp_proc_get_RfqList_Vision_RfqSubmitted
		FROM mp_rfq_revision (NOLOCK) where newvalue = 'Pending Approval'	
		GROUP BY rfq_id
	END
	/**/

	

	if (@RfqType = 10)	
	BEGIN	
			
			--select '2' , getutcdate() dt

			declare @sql_query nvarchar(max),
			@where_query nvarchar(max),
			@search_query nvarchar(max),
			@orderBy_query nvarchar(max),
			@sql_query1 nvarchar(max) 
	 
			/* M2-2863 Vision - RFQs - Filter by Process - DB */
			declare @processids1				as tbltype_ListOfProcesses
			
			/* M2-3384 : M & Vision - My RFQs - Search by Buyer's Industry -DB */
			insert into #BuyerIndistry SELECT * FROM @BuyerIndustryId
			
			/**/
	
			set @where_query =  
				
				case when @IsDraft = 0 AND @DraftBeforeRelease = 0 AND @IsDraftAfterClose = 0 then ' mp_rfq.rfq_status_id >=2 AND mp_rfq.rfq_status_id != 13	 ' else '' end
				+ case when @IsDraft = 1 then ' mp_rfq.rfq_status_id IN (1,14) 	 ' else '' end
				+ case when @IsDraft = 0 AND @DraftBeforeRelease = 1 AND @IsDraftAfterClose = 0 then ' mp_rfq.rfq_status_id IN (1,14) 	 ' else '' end
				+ case when @IsDraft = 0 AND @DraftBeforeRelease = 0 AND @IsDraftAfterClose = 1 then ' mp_rfq.rfq_status_id IN (1,14) 	 ' else '' end
				/* M2-3615 Vision - Add Directory RFQs under RFQs on the left menu - DB */
				+ CASE WHEN @IsMfgCommunityRfq =  0 THEN ' and IsMfgCommunityRfq = 0 ' ELSE ' and IsMfgCommunityRfq = 1 ' END
				/**/
				+ case when @IsPending = 'true' then 'AND ( mp_rfq.rfq_status_id = 2 )' else '' end 
				+ case when @IsActive  = 'true' then 'AND ( format(GETUTCDATE(),''yyyyMMdd'') <= format(mp_rfq.Quotes_needed_by,''yyyyMMdd'') )	' else '' end 
				+ case when @IsIncomplete  = 'true' then 'AND ( mp_rfq.rfq_status_id = 14 )' else '' end
				+ case when @IsClosingIn4Days  = 'true' then ' AND ( DATEDIFF(d, format(GETUTCDATE(),''yyyyMMdd''), format(mp_rfq.Quotes_needed_by,''yyyyMMdd'') ) <= 4 ) AND mp_rfq.rfq_id NOT IN (select rfq_id from mp_rfq_quote_SupplierQuote where rfq_id = mp_rfq.rfq_id  ) ' else '' end
				+ case when @IsClosingIn24Hours  = 'true' then 'AND ( DATEDIFF(hh, format(GETUTCDATE(),''yyyyMMdd''), format(mp_rfq.Quotes_needed_by,''yyyyMMdd'') ) <= 24 )' else '' end
				+ case when @IsClosed  = 'true' then 'AND ( format(GETUTCDATE(),''yyyyMMdd'') >  format(mp_rfq.Quotes_needed_by,''yyyyMMdd'') )' else '' end
				+ case when @IsValidated  = 'true' then 'AND ( mp_rfq.rfq_id IN ( SELECT rfq_id from mp_rfq join mp_contacts ON mp_rfq.contact_id = mp_contacts.contact_id where mp_contacts.Is_Validated_Buyer = 1) )' else '' end
				+ case when @IsUnvalidated  = 'true' then 'AND ( mp_rfq.rfq_id IN ( SELECT rfq_id from mp_rfq join mp_contacts ON mp_rfq.contact_id = mp_contacts.contact_id where mp_contacts.Is_Validated_Buyer = 0 or mp_contacts.Is_Validated_Buyer is null) )' else '' end
				+ case when (@CountryId > 0) then 'AND ( useraddress.CountryId = '+ CONVERT(VARCHAR(150),@CountryId)+')' else '' end
				+ case when (@ManufacturingLocationId in (4)) then 'AND ( mp_rfq_preferences.rfq_pref_manufacturing_location_id in (4,7))' when (@ManufacturingLocationId in (5)) then 'AND ( mp_rfq_preferences.rfq_pref_manufacturing_location_id in (5,7))' when (@ManufacturingLocationId > 0) then 'AND ( mp_rfq_preferences.rfq_pref_manufacturing_location_id = @ManufacturingLocationId1)' else '' end
				/* M2-2861 Vision - RFQs - Search Enhancements/filters - DB*/
				+ case when @IsQuoting  = 'true' then 'AND ( format(mp_rfq.Quotes_needed_by,''yyyyMMdd'') >= format(GETUTCDATE(),''yyyyMMdd'')  ) AND mp_rfq.rfq_status_id = 3	' else '' end 
				+ case when @IsAwarded  = 'true' then ' AND mp_rfq.rfq_status_id = 6	' else '' end 
				--+ case when @IsDraft  = 'true' then ' AND mp_rfq.rfq_status_id = 1	' else '' end 
				/**/
				/* M2-2863 Vision - RFQs - Filter by Process - DB */
				+ case when (select count(1) from @ProcessIDs) > 0 then 'AND  mp_rfq.rfq_id in (select * from  #rfq_list ) ' else ' ' end
				/**/
				/* M2-3384 : M & Vision - My RFQs - Search by Buyer's Industry -DB */
				+ case when (select count(1) from @BuyerIndustryId) > 0 then ' and mcst.supplier_type_id in (select * from  #BuyerIndistry) ' else '' end


		   set @orderBy_query = 
				
				+ case when (@OrderBy IS Null AND @IsOrderByDesc = 'true' AND @IsPending = 1 AND @IsValidated = 1 ) then 'ORDER BY Allrfqs.RfqSubmittedDate DESC' else '' end
				+ case when (@OrderBy IS Null AND @IsOrderByDesc = 'true' AND @IsPending = 1 AND @IsValidated = 1 ) then 'ORDER BY Allrfqs.RfqSubmittedDate DESC' else '' end
				+ case when (@OrderBy IS Null AND @IsOrderByDesc = 'false'  AND @IsPending = 1 AND @IsValidated = 1) then 'ORDER BY Allrfqs.RfqSubmittedDate' else '' end
				+ case when (@OrderBy IS Null AND @IsOrderByDesc = 'true' AND @IsPending = 1 AND @IsUnvalidated = 1 ) then 'ORDER BY Allrfqs.RFQCreatedOn DESC' else '' end
				+ case when (@OrderBy IS Null AND @IsOrderByDesc = 'false'  AND @IsPending = 1 AND @IsUnvalidated = 1) then 'ORDER BY Allrfqs.RFQCreatedOn' else '' end
				+ case when (@OrderBy IS Null AND @IsOrderByDesc = 'true'  AND @IsPending = 0) then 'ORDER BY Allrfqs.RFQCreatedOn DESC' else '' end
				+ case when (@OrderBy IS Null AND @IsOrderByDesc = 'false'  AND @IsPending = 0) then 'ORDER BY Allrfqs.RFQCreatedOn' else '' end
				+ case when (@OrderBy = 'rfq_name' AND @IsOrderByDesc = 'true') then 'ORDER BY Allrfqs.RFQName DESC ' else '' end
				+ case when (@OrderBy = 'rfq_name' AND @IsOrderByDesc = 'false') then 'ORDER BY Allrfqs.RFQName ' else '' end

	
			set @search_query =  
				  case when @SearchText Is NOT Null then 'AND ((mp_rfq.rfq_name Like ''%'+@SearchText+'%'')	OR (mp_rfq.rfq_id Like ''%'+@SearchText+'%'') OR (mp_companies.name Like ''%'+@SearchText+'%'') OR ((mp_contacts.first_name + '' '' +	mp_contacts.last_name) Like ''%'+@SearchText+'%'') OR (aspnetusers.Email Like ''%'+@SearchText+'%''))' else '' end 



			/* M2-2863 Vision - RFQs - Filter by Process - DB */
			insert into #tmpprocesses (parent_part_category_id , part_category_id)
			select distinct parent_part_category_id , part_category_id 
			from mp_mst_part_category a where part_category_id in (select processId from @ProcessIDs ) and status_id = 2 and level =1 

			insert into #tmpprocesses (parent_part_category_id , part_category_id)
			select distinct parent_part_category_id , part_category_id 
			from mp_mst_part_category a where parent_part_category_id in 
			(
				select processId from @ProcessIDs where  processId not in (select parent_part_category_id from #tmpprocesses) 
			) and status_id = 2 and level =1 
	
	        

			set @sql_query=			
			'
			insert into #rfq_list (rfq_id)
			select distinct a.rfq_id 
			from mp_rfq			a (nolock) 
			join mp_rfq_parts	b (nolock) on a.rfq_id = b.rfq_id 
			'
			+
			/* M2-3615 Vision - Add Directory RFQs under RFQs on the left menu - DB */
			CASE WHEN @IsMfgCommunityRfq =  0 THEN ' and a.IsMfgCommunityRfq = 0 ' ELSE ' and a.IsMfgCommunityRfq = 1 ' END
			/**/
			+
			'
			join mp_parts		c (nolock) on b.part_id  = c.part_id 
			where b.part_category_id in 
			(
				select part_category_id from  #tmpprocesses
			)
			'

			exec sp_executesql  @sql_query 
			,N'@processids1  tbltype_ListOfProcesses readonly'  --, @BuyerIndustryId1 tbltype_ListOfBuyerIndustryId readonly
			,@processids1  = @ProcessIDs
			--,@BuyerIndustryId1 = @BuyerIndustryId /* M2-3384 : M & Vision - My RFQs - Search by Buyer's Industry -DB */	
			/**/
			
			set @sql_query=			
			'
			WITH useraddress as
			(
				select 
					mp_addresses.address_Id
					, mp_addresses.address4 AS City		
					, mp_mst_region.REGION_ID AS RegionId 
					, case when ( mp_mst_region.REGION_ID = 0 ) then ''N/A'' else mp_mst_region.REGION_NAME  end AS [State]
					, mp_mst_country.country_id AS CountryId
					, case when (mp_mst_country.country_id = 0 ) then ''N/A'' else mp_mst_country.country_name  end AS country_name 
				from 
				mp_addresses (nolock)
				JOIN mp_mst_region  (nolock) ON mp_addresses.region_id = mp_mst_region.REGION_ID
				JOIN mp_mst_country  (nolock) ON mp_mst_region.country_Id = mp_mst_country.country_id
			)
			INSERT INTO #rfqs  (rfq_id  , rfq_created_on , totalcount , address_id , city , regionid , state , countryid , country_name )
			SELECT DISTINCT mp_rfq.rfq_id , mp_rfq.rfq_created_on , COUNT(mp_rfq.rfq_id) OVER() TotalCount , useraddress.address_Id	,useraddress.City	,useraddress.RegionId	,useraddress.State	,useraddress.CountryId	,useraddress.country_name
			FROM	mp_rfq			(NOLOCK) 
			JOIN	mp_contacts		(NOLOCK) ON		mp_rfq.contact_id = mp_contacts.contact_id
			JOIN	mp_companies	(NOLOCK) ON		mp_contacts.company_id = mp_companies.company_id
			JOIN	aspnetusers		(NOLOCK) ON		mp_contacts.user_id = aspnetusers.id
			LEFT JOIN useraddress			 ON mp_contacts.address_id = useraddress.address_id
			LEFT JOIN mp_rfq_preferences (nolock)  ON mp_rfq.rfq_id = mp_rfq_preferences.rfq_id
			/* M2-3384 : M & Vision - My RFQs - Search by Buyers Industry -DB */
			LEFT JOIN mp_company_supplier_types mcst (nolock) on mp_companies.company_id = mcst.company_id and mcst.is_buyer = 1
			WHERE '

			set @sql_query = @sql_query  + @where_query + @search_query 
			+  case when  (select count(1) from @ProcessIDs ) > 0 then ' and mp_rfq.rfq_id in (select * from #rfq_list)' else '' end
			+  case when @IsDraft = 0 AND @DraftBeforeRelease = 1 AND @IsDraftAfterClose = 0 then   ' AND EXISTS (SELECT rfq_id FROM mp_rfq_release_history (NOLOCK) WHERE  mp_rfq.rfq_id  = mp_rfq_release_history.rfq_id)  AND CONVERT(DATE,mp_rfq.Quotes_needed_by) > CONVERT(DATE,GETUTCDATE())  ' else '' end
			+  case when @IsDraft = 0 AND @DraftBeforeRelease = 0 AND @IsDraftAfterClose = 1 then   ' AND EXISTS (SELECT rfq_id FROM mp_rfq_release_history (NOLOCK) WHERE  mp_rfq.rfq_id  = mp_rfq_release_history.rfq_id) AND CONVERT(DATE,mp_rfq.Quotes_needed_by) < CONVERT(DATE,GETUTCDATE())  ' else '' end
			+  case when (@IsOrderByDesc = 'true' ) then 
						' ORDER BY  mp_rfq.rfq_created_on DESC ' + ' OFFSET '+ convert(varchar(50),@PageSize) +'   * ( '+ convert(varchar(50),@PageNumber) + ' - 1) ROWS FETCH NEXT '+ convert(varchar(50),@PageSize) + ' ROWS ONLY '
					else '' 
				end
			+  case when (@IsOrderByDesc = 'false' ) then 
						' ORDER BY  mp_rfq.rfq_created_on ASC ' + ' OFFSET '+ convert(varchar(50),@PageSize) +'   * ( '+ convert(varchar(50),@PageNumber) + ' - 1) ROWS FETCH NEXT '+ convert(varchar(50),@PageSize) + ' ROWS ONLY '
					else '' 
				end
			
			---exec sp_executesql  @sql_query ---- commented on 27-Sep-2023

			--- Reported slack issue and modified code on 27-Sep-2023
			EXECUTE sp_executesql  @sql_query
			,N'@ManufacturingLocationId1 INT', @ManufacturingLocationId1 = @ManufacturingLocationId 

			--select @sql_query
			--select * from #rfqs

			IF @IsDraft = 0 AND @DraftBeforeRelease = 0 AND @IsDraftAfterClose = 0
			BEGIN
					--select '3' , getutcdate() dt

					set @sql_query = 
					' 		  
					SELECT  * FROM(  
		  
					SELECT DISTINCT  
					mp_rfq.rfq_id AS RFQId
					, mp_rfq.rfq_name AS RFQName				 
					, mp_special_files.file_name AS file_name
					, floor(mp_rfq_parts.min_part_quantity)  AS Quantity			 
					, mp_rfq_parts.min_part_quantity_unit AS UnitValue
					, Processes.value AS PostProductionProcessValue
					, mp_mst_materials.material_name_en as  Material 
					, p.discipline_name  AS Process
					, mp_companies.name AS Buyer
					, mp_Companies.company_id as buyer_company_id
					, mp_mst_rfq_buyerStatus.rfq_buyerstatus_li_key AS RFQStatus
					, mp_rfq.rfq_created_on AS RFQCreatedOn
					, mp_rfq.Quotes_needed_by AS QuotesNeededBy
					, mp_rfq.award_date AS AwardDate
					, mp_rfq_supplier_likes.is_rfq_like AS IsRfqLike
					, mp_star_rating.no_of_stars AS NoOfStars
					, '+COALESCE('ThumbnailFile.File_Name','')+' AS RfqThumbnail
					, mp_contacts.contact_id AS BuyerContactId	
					, mp_rfq.payment_term_id AS payment_term_id	
					, rfq.totalcount AS TotalCount
					, rfq.City			AS City		 
					, rfq.[State]		AS [State]
					, rfq.CountryId		AS CountryId
					, rfq.country_name	AS Country	
					, mc.first_name + '' '' +	mc.last_name as BuyerOwner
					, mp_rfq.rfq_quality		AS RFQQuality
					, aspnetusers.Email			AS BuyerEmail
					, (mp_contacts.first_name + '' '' +	mp_contacts.last_name) AS BuyerName
					, mp_rfq_preferences.rfq_pref_manufacturing_location_id AS RFQLocationId
					/*M2-2458 : Buyers - Tile and Row - Add Dates and # of Quotes on to RFQ tiles in MY RFQs  -DB*/
					,(select count(1) from mp_rfq_quote_supplierquote (nolock) 
								where mp_rfq.rfq_id = rfq_id and is_quote_submitted = 1 and is_rfq_resubmitted = 0) as RFQQuoteCount
					,'
					+
					CASE WHEN @IsPending=1 AND @IsValidated = 1 THEN ' RfqSubmitted.SubmittedDate AS RfqSubmittedDate ' ELSE ' NULL AS RfqSubmittedDate ' END
					+
					'

					FROM #rfqs rfq
					JOIN mp_rfq							(nolock) ON rfq.rfq_id = mp_rfq.rfq_id
					JOIN mp_contacts					(nolock) ON mp_rfq.contact_id=mp_contacts.contact_id 	
					JOIN mp_rfq_parts					(nolock) ON mp_rfq.rfq_id = mp_rfq_parts.rfq_id and Is_Rfq_Part_Default =  1
					LEFT JOIN mp_rfq_parts_file			(nolock) ON mp_rfq_parts.rfq_part_id = mp_rfq_parts_file.rfq_part_id
					JOIN mp_special_files				(nolock) ON mp_special_files.file_id = mp_rfq_parts_file.file_id
					JOIN mp_parts						(nolock) ON mp_parts.part_id = mp_rfq_parts.part_id 
					JOIN mp_mst_rfq_buyerStatus		(nolock) ON mp_rfq.rfq_status_id=mp_mst_rfq_buyerStatus.rfq_buyerstatus_id
					JOIN mp_companies					(nolock) ON mp_contacts.company_id=mp_companies.company_id
					LEFT JOIN mp_contacts mc				(nolock) ON mp_companies.Assigned_SourcingAdvisor=mc.contact_id
					JOIN mp_rfq_part_quantity			(nolock) ON mp_rfq_part_quantity.rfq_part_id = mp_rfq_parts.rfq_part_id
					JOIN #tmpmasterprocesses	p		(nolock) ON p.part_category_id = mp_rfq_parts.part_category_id 
					LEFT JOIN mp_rfq_supplier_likes	(nolock) ON mp_rfq_supplier_likes.rfq_id = mp_rfq.rfq_id and mp_rfq.contact_id = mp_rfq_supplier_likes.contact_id
					LEFT JOIN mp_special_files			(nolock) AS ThumbnailFile ON ThumbnailFile.file_id = mp_rfq.file_id
					left join mp_star_rating			(nolock) on mp_star_rating.company_id = mp_contacts.company_id	
					LEFT JOIN mp_system_parameters AS Processes (nolock) ON Processes.id = mp_rfq_parts.Post_Production_Process_id AND Processes.sys_key = ''@PostProdProcesses''
					LEFT JOIN mp_mst_materials		(nolock) ON mp_mst_materials.material_id = mp_rfq_parts.material_id
					LEFT JOIN mp_system_parameters AS Unit (nolock) ON Unit.id = mp_parts.part_qty_unit_id AND Unit.sys_key = ''@UNIT2_LIST'' 
					JOIN aspnetusers					(nolock) ON  mp_contacts.user_id = aspnetusers.id
					JOIN mp_rfq_preferences (nolock)  ON mp_rfq.rfq_id = mp_rfq_preferences.rfq_id
					/* M2-3384 : M & Vision - My RFQs - Search by Buyers Industry -DB */
					LEFT JOIN mp_company_supplier_types mcst (nolock) on mp_companies.company_id = mcst.company_id and mcst.is_buyer = 1 
					'
					+
					CASE WHEN @IsPending=1 AND @IsValidated = 1 THEN ' LEFT JOIN #tmp_proc_get_RfqList_Vision_RfqSubmitted RfqSubmitted ON mp_rfq.rfq_id = RfqSubmitted.RfqId ' ELSE '' END
					+
					'
					WHERE mp_rfq_parts_file.is_primary_file = 1 '
						
				set @sql_query1 = @sql_query  
				+ ') AS AllRfqs
				left join (select rfq_id , max(status_date) release_date from mp_rfq_release_history group by rfq_id ) rfq_release  on AllRfqs.RFQId = rfq_release.rfq_id	
				ORDER BY AllRfqs.RFQCreatedOn DESC '
					
			END
			/* M2-3520 Vision - Draft RFQ filter revisions - DB */
			ELSE IF @IsDraft = 1
			BEGIN
				--select '4' , getutcdate() dt
									
				set @sql_query = 
					' 		  
					SELECT  *  FROM(  
		  
					SELECT DISTINCT  
					mp_rfq.rfq_id AS RFQId
					, mp_rfq.rfq_name AS RFQName				 
					, mp_special_files.file_name AS file_name
					, floor(mp_rfq_parts.min_part_quantity)  AS Quantity			 
					, mp_rfq_parts.min_part_quantity_unit AS UnitValue
					, Processes.value AS PostProductionProcessValue
					, mp_mst_materials.material_name_en as  Material 
					, case when category.discipline_name is null then p.discipline_name  when category.discipline_name = p.discipline_name then p.discipline_name else category.discipline_name +'' / ''+ p.discipline_name end AS Process
					, mp_companies.name AS Buyer
					, mp_Companies.company_id as buyer_company_id
					, mp_mst_rfq_buyerStatus.rfq_buyerstatus_li_key AS RFQStatus
					, mp_rfq.rfq_created_on AS RFQCreatedOn
					, mp_rfq.Quotes_needed_by AS QuotesNeededBy
					, mp_rfq.award_date AS AwardDate
					, mp_rfq_supplier_likes.is_rfq_like AS IsRfqLike
					, mp_star_rating.no_of_stars AS NoOfStars
					, '+COALESCE('ThumbnailFile.File_Name','')+' AS RfqThumbnail
					--, MessagesMst.message_date AS message_date	
					, mp_contacts.contact_id AS BuyerContactId	
					, mp_rfq.payment_term_id AS payment_term_id		
					, rfq.totalcount AS TotalCount
					, rfq.City			AS City		 
					, rfq.[State]		AS [State]
					, rfq.CountryId		AS CountryId
					, rfq.country_name	AS Country	
					, mc.first_name + '' '' +	mc.last_name as BuyerOwner
					, mp_rfq.rfq_quality		AS RFQQuality
					, aspnetusers.Email			AS BuyerEmail
					, (mp_contacts.first_name + '' '' +	mp_contacts.last_name) AS BuyerName
					, mp_rfq_preferences.rfq_pref_manufacturing_location_id AS RFQLocationId
					/*M2-2458 : Buyers - Tile and Row - Add Dates and # of Quotes on to RFQ tiles in MY RFQs  -DB*/
					,(select count(1) from mp_rfq_quote_supplierquote (nolock) 
								where mp_rfq.rfq_id = rfq_id and is_quote_submitted = 1 and is_rfq_resubmitted = 0) as RFQQuoteCount
					,  NULL AS RfqSubmittedDate /* M2-3837 Vision - RFQ Submitted to Pending Priority Time Stamp - DB */
					FROM #rfqs rfq
					JOIN mp_rfq							(nolock) ON rfq.rfq_id = mp_rfq.rfq_id 
						JOIN mp_contacts					(nolock) ON mp_rfq.contact_id=mp_contacts.contact_id 
						LEFT JOIN mp_rfq_parts					(nolock) ON mp_rfq.rfq_id = mp_rfq_parts.rfq_id and Is_Rfq_Part_Default =  1
						LEFT JOIN mp_rfq_parts_file				(nolock) ON mp_rfq_parts.rfq_part_id = mp_rfq_parts_file.rfq_part_id AND mp_rfq_parts_file.is_primary_file = 1 	
						LEFT JOIN mp_special_files				(nolock) ON mp_special_files.file_id = mp_rfq_parts_file.file_id
						LEFT JOIN mp_parts						(nolock) ON mp_parts.part_id = mp_rfq_parts.part_id 
						LEFT JOIN mp_mst_rfq_buyerStatus		(nolock) ON mp_rfq.rfq_status_id=mp_mst_rfq_buyerStatus.rfq_buyerstatus_id
						LEFT JOIN mp_companies					(nolock) ON mp_contacts.company_id=mp_companies.company_id
						LEFT JOIN mp_contacts mc				(nolock) ON mp_companies.Assigned_SourcingAdvisor=mc.contact_id
						LEFT JOIN mp_rfq_part_quantity			(nolock) ON mp_rfq_part_quantity.rfq_part_id = mp_rfq_parts.rfq_part_id
						LEFT JOIN mp_mst_part_category	p		(nolock) ON p.part_category_id = mp_rfq_parts.part_category_id 
						/* M2-3202 Buyer and M - Change the tiles and rows to include parent category */
						LEFT JOIN mp_mst_part_category category (nolock) on p.parent_part_category_id=category.part_category_id
						/**/
						LEFT JOIN mp_rfq_supplier_likes	(nolock) ON mp_rfq_supplier_likes.rfq_id = mp_rfq.rfq_id and mp_rfq.contact_id = mp_rfq_supplier_likes.contact_id
						LEFT JOIN mp_special_files			(nolock) AS ThumbnailFile ON ThumbnailFile.file_id = mp_rfq.file_id
						left join mp_star_rating			(nolock) on mp_star_rating.company_id = mp_contacts.company_id	
						LEFT JOIN mp_system_parameters AS Processes (nolock) ON Processes.id = mp_rfq_parts.Post_Production_Process_id AND Processes.sys_key = ''@PostProdProcesses''
						LEFT JOIN mp_mst_materials		(nolock) ON mp_mst_materials.material_id = mp_rfq_parts.material_id
						LEFT JOIN mp_system_parameters AS Unit (nolock) ON Unit.id = mp_parts.part_qty_unit_id AND Unit.sys_key = ''@UNIT2_LIST'' 
						JOIN aspnetusers					(nolock) ON  mp_contacts.user_id = aspnetusers.id
						LEFT JOIN mp_rfq_preferences (nolock)  ON mp_rfq.rfq_id = mp_rfq_preferences.rfq_id
						/* M2-3384 : M & Vision - My RFQs - Search by Buyers Industry -DB */
						LEFT JOIN mp_company_supplier_types mcst (nolock) on mp_companies.company_id = mcst.company_id and mcst.is_buyer = 1  
				WHERE 	mp_rfq.rfq_status_id IN (1,14) 
				'
				
			   

				set @sql_query1 = @sql_query  + 
				') AS AllRfqs
				left join (select rfq_id , max(status_date) release_date from mp_rfq_release_history group by rfq_id ) rfq_release  on Allrfqs.RFQId = rfq_release.rfq_id		 '
				+ @orderBy_query 

			END
			ELSE IF @IsDraft = 0 AND @DraftBeforeRelease = 1 AND @IsDraftAfterClose = 0
			BEGIN
				--select '5' , getutcdate() dt

				set @sql_query = 
					' 		  
					SELECT  * FROM(  
		  
					SELECT DISTINCT  
					mp_rfq.rfq_id AS RFQId
					, mp_rfq.rfq_name AS RFQName				 
					, mp_special_files.file_name AS file_name
					, floor(mp_rfq_parts.min_part_quantity)  AS Quantity			 
					, mp_rfq_parts.min_part_quantity_unit AS UnitValue
					, Processes.value AS PostProductionProcessValue
					, mp_mst_materials.material_name_en as  Material 
					, case when category.discipline_name is null then p.discipline_name  when category.discipline_name = p.discipline_name then p.discipline_name else category.discipline_name +'' / ''+ p.discipline_name end AS Process
					, mp_companies.name AS Buyer
					, mp_Companies.company_id as buyer_company_id
					, mp_mst_rfq_buyerStatus.rfq_buyerstatus_li_key AS RFQStatus
					, mp_rfq.rfq_created_on AS RFQCreatedOn
					, mp_rfq.Quotes_needed_by AS QuotesNeededBy
					, mp_rfq.award_date AS AwardDate
					, mp_rfq_supplier_likes.is_rfq_like AS IsRfqLike
					, mp_star_rating.no_of_stars AS NoOfStars
					, '+COALESCE('ThumbnailFile.File_Name','')+' AS RfqThumbnail
					--, MessagesMst.message_date AS message_date	
					, mp_contacts.contact_id AS BuyerContactId	
					, mp_rfq.payment_term_id AS payment_term_id	
					, rfq.totalcount AS TotalCount
					, rfq.City			AS City		 
					, rfq.[State]		AS [State]
					, rfq.CountryId		AS CountryId
					, rfq.country_name	AS Country	
					, mc.first_name + '' '' +	mc.last_name as BuyerOwner
					, mp_rfq.rfq_quality		AS RFQQuality
					, aspnetusers.Email			AS BuyerEmail
					, (mp_contacts.first_name + '' '' +	mp_contacts.last_name) AS BuyerName
					, mp_rfq_preferences.rfq_pref_manufacturing_location_id AS RFQLocationId
					/*M2-2458 : Buyers - Tile and Row - Add Dates and # of Quotes on to RFQ tiles in MY RFQs  -DB*/
					,(select count(1) from mp_rfq_quote_supplierquote (nolock) 
								where mp_rfq.rfq_id = rfq_id and is_quote_submitted = 1 and is_rfq_resubmitted = 0) as RFQQuoteCount
					,  NULL AS RfqSubmittedDate /* M2-3837 Vision - RFQ Submitted to Pending Priority Time Stamp - DB */
					FROM #rfqs rfq
					JOIN mp_rfq							(nolock) ON rfq.rfq_id = mp_rfq.rfq_id 
						JOIN mp_contacts					(nolock) ON mp_rfq.contact_id=mp_contacts.contact_id 
						LEFT JOIN mp_rfq_parts					(nolock) ON mp_rfq.rfq_id = mp_rfq_parts.rfq_id and Is_Rfq_Part_Default =  1
						LEFT JOIN mp_rfq_parts_file				(nolock) ON mp_rfq_parts.rfq_part_id = mp_rfq_parts_file.rfq_part_id AND mp_rfq_parts_file.is_primary_file = 1 	
						LEFT JOIN mp_special_files				(nolock) ON mp_special_files.file_id = mp_rfq_parts_file.file_id
						LEFT JOIN mp_parts						(nolock) ON mp_parts.part_id = mp_rfq_parts.part_id 
						LEFT JOIN mp_mst_rfq_buyerStatus		(nolock) ON mp_rfq.rfq_status_id=mp_mst_rfq_buyerStatus.rfq_buyerstatus_id
						LEFT JOIN mp_companies					(nolock) ON mp_contacts.company_id=mp_companies.company_id
						LEFT JOIN mp_contacts mc				(nolock) ON mp_companies.Assigned_SourcingAdvisor=mc.contact_id
						LEFT JOIN mp_rfq_part_quantity			(nolock) ON mp_rfq_part_quantity.rfq_part_id = mp_rfq_parts.rfq_part_id
						LEFT JOIN mp_mst_part_category	p		(nolock) ON p.part_category_id = mp_rfq_parts.part_category_id 
						/* M2-3202 Buyer and M - Change the tiles and rows to include parent category */
						LEFT JOIN mp_mst_part_category category (nolock) on p.parent_part_category_id=category.part_category_id
						/**/
						LEFT JOIN mp_rfq_supplier_likes	(nolock) ON mp_rfq_supplier_likes.rfq_id = mp_rfq.rfq_id and mp_rfq.contact_id = mp_rfq_supplier_likes.contact_id
						LEFT JOIN mp_special_files			(nolock) AS ThumbnailFile ON ThumbnailFile.file_id = mp_rfq.file_id
								 		 
						left join mp_star_rating			(nolock) on mp_star_rating.company_id = mp_contacts.company_id	
						LEFT JOIN mp_system_parameters AS Processes (nolock) ON Processes.id = mp_rfq_parts.Post_Production_Process_id AND Processes.sys_key = ''@PostProdProcesses''
						LEFT JOIN mp_mst_materials		(nolock) ON mp_mst_materials.material_id = mp_rfq_parts.material_id
						LEFT JOIN mp_system_parameters AS Unit (nolock) ON Unit.id = mp_parts.part_qty_unit_id AND Unit.sys_key = ''@UNIT2_LIST'' 
						JOIN aspnetusers					(nolock) ON  mp_contacts.user_id = aspnetusers.id
						LEFT JOIN mp_rfq_preferences (nolock)  ON mp_rfq.rfq_id = mp_rfq_preferences.rfq_id
						/* M2-3384 : M & Vision - My RFQs - Search by Buyers Industry -DB */
						LEFT JOIN mp_company_supplier_types mcst (nolock) on mp_companies.company_id = mcst.company_id and mcst.is_buyer = 1  
				WHERE 	mp_rfq.rfq_status_id IN (1,14) '
				
				set @sql_query1 = @sql_query +
				') AS AllRfqs
				left join (select rfq_id , max(status_date) release_date from mp_rfq_release_history group by rfq_id ) rfq_release  on Allrfqs.RFQId = rfq_release.rfq_id		 '
				+ @orderBy_query 

			END
			ELSE IF @IsDraft = 0 AND @DraftBeforeRelease = 0 AND @IsDraftAfterClose = 1
			BEGIN
				--select '6' , getutcdate() dt


				set @sql_query = 
					' 		  
					SELECT  * FROM(  
		  
					SELECT DISTINCT  
					mp_rfq.rfq_id AS RFQId
					, mp_rfq.rfq_name AS RFQName				 
					, mp_special_files.file_name AS file_name
					, floor(mp_rfq_parts.min_part_quantity)  AS Quantity			 
					, mp_rfq_parts.min_part_quantity_unit AS UnitValue
					, Processes.value AS PostProductionProcessValue
					, mp_mst_materials.material_name_en as  Material 
					, case when category.discipline_name is null then p.discipline_name  when category.discipline_name = p.discipline_name then p.discipline_name else category.discipline_name +'' / ''+ p.discipline_name end AS Process
					, mp_companies.name AS Buyer
					, mp_Companies.company_id as buyer_company_id
					, mp_mst_rfq_buyerStatus.rfq_buyerstatus_li_key AS RFQStatus
					, mp_rfq.rfq_created_on AS RFQCreatedOn
					, mp_rfq.Quotes_needed_by AS QuotesNeededBy
					, mp_rfq.award_date AS AwardDate
					, mp_rfq_supplier_likes.is_rfq_like AS IsRfqLike
					, mp_star_rating.no_of_stars AS NoOfStars
					, '+COALESCE('ThumbnailFile.File_Name','')+' AS RfqThumbnail
					--, MessagesMst.message_date AS message_date	
					, mp_contacts.contact_id AS BuyerContactId	
					, mp_rfq.payment_term_id AS payment_term_id	
					, rfq.totalcount AS TotalCount
					, rfq.City			AS City		 
					, rfq.[State]		AS [State]
					, rfq.CountryId		AS CountryId
					, rfq.country_name	AS Country	
					, mc.first_name + '' '' +	mc.last_name as BuyerOwner
					, mp_rfq.rfq_quality		AS RFQQuality
					, aspnetusers.Email			AS BuyerEmail
					, (mp_contacts.first_name + '' '' +	mp_contacts.last_name) AS BuyerName
					, mp_rfq_preferences.rfq_pref_manufacturing_location_id AS RFQLocationId
					/*M2-2458 : Buyers - Tile and Row - Add Dates and # of Quotes on to RFQ tiles in MY RFQs  -DB*/
					,(select count(1) from mp_rfq_quote_supplierquote (nolock) 
								where mp_rfq.rfq_id = rfq_id and is_quote_submitted = 1 and is_rfq_resubmitted = 0) as RFQQuoteCount
					,  NULL AS RfqSubmittedDate  /* M2-3837 Vision - RFQ Submitted to Pending Priority Time Stamp - DB */
					FROM #rfqs rfq
					JOIN mp_rfq							(nolock) ON rfq.rfq_id = mp_rfq.rfq_id 
						JOIN mp_contacts					(nolock) ON mp_rfq.contact_id=mp_contacts.contact_id 
						LEFT JOIN mp_rfq_parts					(nolock) ON mp_rfq.rfq_id = mp_rfq_parts.rfq_id and Is_Rfq_Part_Default =  1
						LEFT JOIN mp_rfq_parts_file				(nolock) ON mp_rfq_parts.rfq_part_id = mp_rfq_parts_file.rfq_part_id AND mp_rfq_parts_file.is_primary_file = 1 	
						LEFT JOIN mp_special_files				(nolock) ON mp_special_files.file_id = mp_rfq_parts_file.file_id
						LEFT JOIN mp_parts						(nolock) ON mp_parts.part_id = mp_rfq_parts.part_id 
						LEFT JOIN mp_mst_rfq_buyerStatus		(nolock) ON mp_rfq.rfq_status_id=mp_mst_rfq_buyerStatus.rfq_buyerstatus_id
						LEFT JOIN mp_companies					(nolock) ON mp_contacts.company_id=mp_companies.company_id
						LEFT JOIN mp_contacts mc				(nolock) ON mp_companies.Assigned_SourcingAdvisor=mc.contact_id
						LEFT JOIN mp_rfq_part_quantity			(nolock) ON mp_rfq_part_quantity.rfq_part_id = mp_rfq_parts.rfq_part_id
						LEFT JOIN mp_mst_part_category	p		(nolock) ON p.part_category_id = mp_rfq_parts.part_category_id 
						/* M2-3202 Buyer and M - Change the tiles and rows to include parent category */
						LEFT JOIN mp_mst_part_category category (nolock) on p.parent_part_category_id=category.part_category_id
						/**/
						LEFT JOIN mp_rfq_supplier_likes	(nolock) ON mp_rfq_supplier_likes.rfq_id = mp_rfq.rfq_id and mp_rfq.contact_id = mp_rfq_supplier_likes.contact_id
						LEFT JOIN mp_special_files			(nolock) AS ThumbnailFile ON ThumbnailFile.file_id = mp_rfq.file_id								 		 
						left join mp_star_rating			(nolock) on mp_star_rating.company_id = mp_contacts.company_id	
						LEFT JOIN mp_system_parameters AS Processes (nolock) ON Processes.id = mp_rfq_parts.Post_Production_Process_id AND Processes.sys_key = ''@PostProdProcesses''
						LEFT JOIN mp_mst_materials		(nolock) ON mp_mst_materials.material_id = mp_rfq_parts.material_id
						LEFT JOIN mp_system_parameters AS Unit (nolock) ON Unit.id = mp_parts.part_qty_unit_id AND Unit.sys_key = ''@UNIT2_LIST'' 
						JOIN aspnetusers					(nolock) ON  mp_contacts.user_id = aspnetusers.id
						JOIN mp_rfq_preferences (nolock)  ON mp_rfq.rfq_id = mp_rfq_preferences.rfq_id
						/* M2-3384 : M & Vision - My RFQs - Search by Buyers Industry -DB */
						LEFT JOIN mp_company_supplier_types mcst (nolock) on mp_companies.company_id = mcst.company_id and mcst.is_buyer = 1  
				WHERE 	mp_rfq.rfq_status_id IN (1,14) 	'
				
				set @sql_query1 = @sql_query  +
				') AS AllRfqs
				left join (select rfq_id , max(status_date) release_date from mp_rfq_release_history group by rfq_id ) rfq_release  on Allrfqs.RFQId = rfq_release.rfq_id		 '
				+ @orderBy_query 

			END
			/**/
			--select '7' , getutcdate() dt
			EXECUTE sp_executesql @sql_query1,N'@CountryId1 INT,@ManufacturingLocationId1 INT', @CountryId1 = @CountryId , @ManufacturingLocationId1 = @ManufacturingLocationId 
			--select '8' , getutcdate() dt
			--SELECT @sql_query1 , @CountryId , @ManufacturingLocationId
	END	

	 

END
GO
PRINT N'Altering Procedure [dbo].[proc_mp_set_CloneRFQPart]...';


GO


/*
select top 10 * from mp_rfq_parts order by rfq_part_id desc

select top 10 * from mp_parts order by part_id desc

declare @Error_Message nvarchar(250)
declare @Clone_RfqPartId int
exec [proc_mp_set_CloneRFQPart] @OriginalRFQPartID = 81786  , @CloneRfqPartId = @Clone_RfqPartId output  , @ErrorMessage = @Error_Message output
select @Error_Message Error_Message , @Clone_RfqPartId  Clone_RfqPartId 
*/

ALTER PROCEDURE [dbo].[proc_mp_set_CloneRFQPart]
( 
  @OriginalRFQPartID int 
, @ErrorMessage nvarchar(250) OUTPUT
, @CloneRfqPartId int OUTPUT
)
AS
-- =============================================
-- Create date:  14 Jan, 2019
-- Description:	Procedure used for cloning the RFQ Part
-- Modification:
-- =================================================================
--Version No – Change Date – Modified By      – CR No – Note
-- =================================================================
-- 
-- =================================================================

BEGIN	
		
    DECLARE @RaisedErrorMsg nvarchar(200)	
	DECLARE @NewPartId int


	SET @RaisedErrorMsg = 'unable to clone RFQPart#' +  convert(varchar(10), @OriginalRFQPartID) 
	IF EXISTS(SELECT 1 FROM mp_rfq_parts WHERE rfq_part_id = @OriginalRFQPartID)
	BEGIN
	--print 'Start 1'
		
		BEGIN TRY
			BEGIN TRAN
				DECLARE @NewRFQPartID int				 
								
				insert into mp_parts
				(
					part_name, part_number, part_commodity_code ,part_description ,material_id,part_qty_unit_id
					,part_category_id,status_id,company_id,contact_id,currency_id,creation_date,modification_date
					,Post_Production_Process_id,part_size_unit_id,width,height,depth,length,diameter,surface,volume,tolerance_id,is_child_category_selected
					,IsLargePart,GeometryId
				)
				select 	part_name, part_number, part_commodity_code ,part_description ,material_id,part_qty_unit_id
					,part_category_id,status_id,company_id,contact_id,currency_id,GETUTCDATE() creation_date,GETUTCDATE() modification_date
					,Post_Production_Process_id,part_size_unit_id,width,height,depth,length,diameter,surface,volume,tolerance_id,is_child_category_selected
					,IsLargePart,GeometryId
				from mp_parts (nolock)
				where part_id in (select part_id from mp_rfq_parts where rfq_part_id = @OriginalRFQPartID)
				SET @NewPartId = @@IDENTITY
								
				INSERT INTO [dbo].mp_rfq_parts
				( 						        			 
					part_id
					,rfq_id
					,delivery_date
					,quantity_unit_id
					,status_id
					,part_category_id
					,created_date
					,modification_date
					,Post_Production_Process_id
					,Is_Rfq_Part_Default
					,ModifiedBy
					,min_part_quantity
					,min_part_quantity_unit
					,material_id
					,is_apply_process
					,is_apply_material
					,is_apply_post_process
					,is_apply_delivery_date
					, is_existing_part						 
					, is_child_category_selected		
					, is_apply_parent_process	
					, parent_rfq_part_id
				)
				SELECT 
					@NewPartId
					,rfq_id
					----,delivery_date       ---- commented with M2-3847
					, NULL as delivery_date  ---- added with M2-3847
					,quantity_unit_id
					,status_id
					,part_category_id
					, GETUTCDATE() created_date
					, GETUTCDATE() modification_date
					,Post_Production_Process_id
					,0
					,ModifiedBy
					,min_part_quantity
					,min_part_quantity_unit
					,material_id
					,is_apply_process
					,is_apply_material
					,is_apply_post_process
					,is_apply_delivery_date	
					, is_existing_part							 
					, is_child_category_selected		
					, is_apply_parent_process	
					, parent_rfq_part_id
				FROM 
					[dbo].mp_rfq_parts 
				WHERE rfq_part_id = @OriginalRFQPartID
				AND status_id = 2 --Valid parts
				SET @NewRFQPartID = @@IDENTITY
				
				INSERT INTO [dbo].mp_rfq_parts_file(rfq_part_id
					, file_id
					, creation_date
					, status_id
					, is_primary_file)
				SELECT 
					ClonedRFQParts.rfq_part_id
					, OriginalRFQPartsFile.file_id
					, getdate()
					, OriginalRFQPartsFile.status_id
					, OriginalRFQPartsFile.is_primary_file  
				FROM [dbo].mp_rfq_parts as OriginalRFQParts 
				JOIN [dbo].mp_rfq_parts as ClonedRFQParts  on OriginalRFQParts.rfq_id = ClonedRFQParts.rfq_id 
				JOIN [dbo].mp_rfq_parts_file as OriginalRFQPartsFile on OriginalRFQPartsFile.rfq_part_id = OriginalRFQParts.rfq_part_id
				and OriginalRFQParts.rfq_part_id = @OriginalRFQPartID 
				and ClonedRFQParts.rfq_part_id = @NewRFQPartID
				and OriginalRFQPartsFile.status_id = 2


				INSERT INTO [dbo].mp_parts_files(parts_id
					, file_id					
					, is_primary_file)
				SELECT 
					ClonedRFQParts.part_id
					, OriginalRFQPartsFile.file_id					
					, OriginalRFQPartsFile.is_primary_file  
				FROM [dbo].mp_rfq_parts as OriginalRFQParts 
				JOIN [dbo].mp_rfq_parts as ClonedRFQParts  on OriginalRFQParts.rfq_id = ClonedRFQParts.rfq_id 
				JOIN [dbo].mp_rfq_parts_file as OriginalRFQPartsFile on OriginalRFQPartsFile.rfq_part_id = OriginalRFQParts.rfq_part_id
				and OriginalRFQParts.rfq_part_id = @OriginalRFQPartID 
				and ClonedRFQParts.rfq_part_id = @NewRFQPartID
				and OriginalRFQPartsFile.status_id = 2
	
				INSERT INTO [dbo].mp_rfq_part_quantity
				(
					rfq_part_id
					, part_qty
					, quantity_level
					, is_deleted
				)
				/* M2-2087 Clone up to 3 RFQ's for 3 regions - API */
				SELECT
					B.rfq_part_id
					,A.part_qty
					,A.quantity_level
					,A.is_deleted
				FROM
				(
					SELECT 
						@NewRFQPartID AS ClonedRFQPartId
						,OriginalRFQPartsQty.rfq_part_id
						, OriginalRFQPartsQty.part_qty
						, OriginalRFQPartsQty.quantity_level
						, OriginalRFQPartsQty.is_deleted
						, DENSE_RANK() OVER(ORDER BY OriginalRFQPartsQty.rfq_part_id) AS RN
					FROM [dbo].mp_rfq_parts as OriginalRFQParts 					
					JOIN [dbo].mp_rfq_part_quantity as OriginalRFQPartsQty on OriginalRFQPartsQty.rfq_part_id = OriginalRFQParts.rfq_part_id
					AND OriginalRFQParts.rfq_part_id = @OriginalRFQPartID 
				) A
				JOIN 
				(
					SELECT 
						@NewRFQPartID AS ClonedRFQPartId
						,ClonedRFQParts.rfq_part_id
						, ROW_NUMBER() OVER(ORDER BY rfq_part_id) AS RN
					FROM [dbo].mp_rfq_parts as ClonedRFQParts 			 		
					WHERE ClonedRFQParts.rfq_part_id = @NewRFQPartID 
				) B ON A.ClonedRFQPartId = B.ClonedRFQPartId  AND A.RN = B.RN

				/*M2-3419 : Buyer - Injection Molding Part drawer additions - DB*/
				IF ((SELECT COUNT(1) FROM mp_rfq_part_drawer_answers (NOLOCK) WHERE RfqPartId = @OriginalRFQPartID) > 0)
					BEGIN
					   INSERT INTO mp_rfq_part_drawer_answers
					   SELECT @NewRFQPartID,@NewPartId, QuestionId, Answer,GETUTCDATE() FROM mp_rfq_part_drawer_answers WHERE RfqPartId = @OriginalRFQPartID
					END
			  /**/
				
			 						COMMIT TRAN
				SET @ErrorMessage = ''
				SET @CloneRfqPartId = @NewRFQPartID
				
			END TRY
			BEGIN CATCH
				if @@ERROR <> 0 
				BEGIN
					SET @ErrorMessage = ''
					ROLLBACK TRAN
				END
				SET @ErrorMessage = 'RFQ Part Cloning failed! ' + char(13)  + ERROR_MESSAGE() 
			END CATCH
	END
	ELSE
	BEGIN
		SET @ErrorMessage =@RaisedErrorMsg
	END
END
GO
PRINT N'Altering Procedure [dbo].[proc_set_revision]...';


GO

/*

EXEC [proc_set_revision]
		
*/
ALTER PROCEDURE [dbo].[proc_set_revision]
AS
BEGIN
		
	TRUNCATE TABLE [tmp_trans].revision_data_history
	TRUNCATE TABLE [tmp_trans].revision_data_history_1
	TRUNCATE TABLE [tmp_trans].revision_data_history_2
	TRUNCATE TABLE [tmp_trans].revision_data_history_3
	TRUNCATE TABLE [tmp_trans].revision_data_history_4
	TRUNCATE TABLE [tmp_trans].revision_data_history_5
	TRUNCATE TABLE [tmp_trans].revision_versions 
	TRUNCATE TABLE [tmp_trans].revision_data_history_old_values
	TRUNCATE TABLE [tmp_trans].revision_data_history_new_values 

	
	INSERT INTO [tmp_trans].[revision_data_history] (data_history_id,field,oldvalue,newvalue,creation_date,userid,tablename,is_processed,processed_date)
	SELECT data_history_id,field,oldvalue,newvalue,creation_date,userid,tablename,is_processed,processed_date 
	FROM dbo.mp_data_history (NOLOCK)
	WHERE  tablename in ('mp_rfq', 'mp_rfq_special_certificates','mp_rfq_preferences','mp_rfq_parts', 'mp_rfq_part_quantity','mpOrderManagement')
	and is_processed = 0
	ORDER BY data_history_id

	IF ((SELECT COUNT(1) FROM [tmp_trans].[revision_data_history]) > 0)
	BEGIN


		UPDATE dbo.mp_data_history SET is_processed = 1 , processed_date = GETUTCDATE() 
		WHERE data_history_id IN (SELECT data_history_id FROM [tmp_trans].[revision_data_history]  (NOLOCK))

		
		INSERT INTO [tmp_trans].[revision_data_history_1] 
		(data_history_id,userid,creation_date,tablename,rfq_id,rfq_part_id,rfq_part_qty_id,rfq_special_certificate_id,rfq_preference_id)
		SELECT 
			a.data_history_id, 
			a.userid ,
			a.creation_date ,  
			a.tablename ,
			CASE 
				WHEN JSON_VALUE(field, '$.RfqPartQuantityId') IS NOT NULL THEN c1.rfq_id 
				WHEN JSON_VALUE(field, '$.RfqPartId') IS NOT NULL THEN c.rfq_id 
				WHEN JSON_VALUE(field, '$.RfqSpecialCertificatesId') IS NOT NULL THEN d.rfq_id
				WHEN JSON_VALUE(field, '$.RfqPreferencesId') IS NOT NULL THEN e.rfq_id 
				ELSE JSON_VALUE(field, '$.RfqId') 
			END   rfq_id ,
			CASE WHEN JSON_VALUE(field, '$.RfqPartQuantityId') IS NOT NULL THEN b.rfq_part_id ELSE JSON_VALUE(field, '$.RfqPartId')  END rfq_part_id ,  
			JSON_VALUE(field, '$.RfqPartQuantityId') rfq_part_qty_id  	,
			JSON_VALUE(field, '$.RfqSpecialCertificatesId') rfq_special_certificate_id	,
			JSON_VALUE(field, '$.RfqPreferencesId') rfq_preference_id	
		
		FROM [tmp_trans].revision_data_history a  (NOLOCK)
		LEFT JOIN mp_rfq_part_quantity	b	(NOLOCK) ON JSON_VALUE(a.field, '$.RfqPartQuantityId') = b.rfq_part_quantity_id
		LEFT JOIN mp_rfq_parts			c	(NOLOCK) ON (JSON_VALUE(field, '$.RfqPartId') = c.rfq_part_id)
		LEFT JOIN mp_rfq_parts			c1	(NOLOCK) ON b.rfq_part_id = c1.rfq_part_id
		LEFT JOIN mp_rfq_special_certificates d	(NOLOCK) ON JSON_VALUE(field, '$.RfqSpecialCertificatesId') = d.rfq_special_certificates_id
		LEFT JOIN mp_rfq_preferences	e	(NOLOCK) ON JSON_VALUE(field, '$.RfqPreferencesId') = e.rfq_preferences_id
		

		--SELECT * FROM mp_rfq_special_certificates WHERE rfq_special_certificates_id = 12202			

		DELETE FROM [tmp_trans].[revision_data_history_1]WHERE rfq_id IS NULL

		
		--SELECT * FROM #revision_data_history ORDER BY data_history_id
		--SELECT * FROM #revision_data_history_1 ORDER BY data_history_id
		INSERT INTO [tmp_trans].revision_data_history_old_values 
		(data_history_id,RFQName,PartId,IsRfqPartDefault,MinPartQuantity,MinPartQuantityUnit,IsSpecialCertificationsByManufacture,CertificateId,AwardDate
		,ImportancePrice,ImportanceQuality,ImportanceSpeed,IsRegisterSupplierQuoteTheRfq,IsSpecialInstructionToManufacturer,PrefRfqCommunicationMethod,
		QuotesNeededBy,SpecialInstructionToManufacturer,RfqPrefManufacturingLocationId,PaymentTermId,PrefNdaType,WhoPaysForShipping,RfqStatusId,QuantityLevel,
		PartQty,IsSpecialCertificationsByManufacturer,ShipTo,POCreated,POStatus,POPartStatus)
		SELECT 
			data_history_id ,
			ISNULL(JSON_VALUE(oldvalue, '$.RfqName'),'') AS RFQName ,
			ISNULL(JSON_VALUE(oldvalue, '$.PartId'),'') AS PartId ,
			ISNULL(JSON_VALUE(oldvalue, '$.IsRfqPartDefault'),'') AS IsRfqPartDefault ,
			ISNULL(JSON_VALUE(oldvalue, '$.MinPartQuantity'),'') AS MinPartQuantity ,
			ISNULL(JSON_VALUE(oldvalue, '$.MinPartQuantityUnit'),'') AS MinPartQuantityUnit ,
			ISNULL(JSON_VALUE(oldvalue, '$.IsSpecialCertificationsByManufacture'),'') AS IsSpecialCertificationsByManufacture ,
			ISNULL(JSON_VALUE(oldvalue, '$.CertificateId'),'') AS CertificateId ,
			ISNULL(CONVERT(VARCHAR(19),JSON_VALUE(oldvalue, '$.AwardDate'),120),'') AS AwardDate ,
			ISNULL(JSON_VALUE(oldvalue, '$.ImportancePrice'),'') AS ImportancePrice ,
			ISNULL(JSON_VALUE(oldvalue, '$.ImportanceQuality'),'') AS ImportanceQuality ,
			ISNULL(JSON_VALUE(oldvalue, '$.ImportanceSpeed'),'') AS ImportanceSpeed ,
			ISNULL(JSON_VALUE(oldvalue, '$.IsRegisterSupplierQuoteTheRfq'),'') AS IsRegisterSupplierQuoteTheRfq ,
			ISNULL(JSON_VALUE(oldvalue, '$.IsSpecialInstructionToManufacturer'),'') AS IsSpecialInstructionToManufacturer ,
			ISNULL(JSON_VALUE(oldvalue, '$.PrefRfqCommunicationMethod'),'') AS PrefRfqCommunicationMethod ,
			ISNULL(CONVERT(VARCHAR(19),JSON_VALUE(oldvalue, '$.QuotesNeededBy'),120),'') AS QuotesNeededBy ,
			ISNULL(JSON_VALUE(oldvalue, '$.SpecialInstructionToManufacturer'),'') AS SpecialInstructionToManufacturer ,
			ISNULL(JSON_VALUE(oldvalue, '$.RfqPrefManufacturingLocationId'),'') AS RfqPrefManufacturingLocationId ,
			ISNULL(JSON_VALUE(oldvalue, '$.PaymentTermId'),'') AS PaymentTermId,
			ISNULL(JSON_VALUE(oldvalue, '$.PrefNdaType'),'') AS PrefNdaType,
			ISNULL(JSON_VALUE(oldvalue, '$.WhoPaysForShipping'),'') AS WhoPaysForShipping,
			ISNULL(JSON_VALUE(oldvalue, '$.RfqStatusId'),'') AS RfqStatusId,
			ISNULL(JSON_VALUE(oldvalue, '$.QuantityLevel'),'') AS QuantityLevel,
			ISNULL(JSON_VALUE(oldvalue, '$.PartQty'),'') AS PartQty,
			ISNULL(JSON_VALUE(oldvalue, '$.IsSpecialCertificationsByManufacturer'),'') AS IsSpecialCertificationsByManufacturer,
			ISNULL(JSON_VALUE(oldvalue, '$.ShipTo'),'') AS ShipTo,
			ISNULL(JSON_VALUE(oldvalue, '$.POCreated'),'') AS POCreated,
			ISNULL(JSON_VALUE(oldvalue, '$.POStatus'),'') AS POStatus,
			ISNULL(JSON_VALUE(oldvalue, '$.POPartStatus'),'') AS POPartStatus
		FROM [tmp_trans].revision_data_history  (NOLOCK)

		INSERT INTO [tmp_trans].revision_data_history_new_values 
		(data_history_id,RFQName,PartId,IsRfqPartDefault,MinPartQuantity,MinPartQuantityUnit,IsSpecialCertificationsByManufacture,CertificateId,AwardDate
		,ImportancePrice,ImportanceQuality,ImportanceSpeed,IsRegisterSupplierQuoteTheRfq,IsSpecialInstructionToManufacturer,PrefRfqCommunicationMethod,
		QuotesNeededBy,SpecialInstructionToManufacturer,RfqPrefManufacturingLocationId,PaymentTermId,PrefNdaType,WhoPaysForShipping,RfqStatusId,QuantityLevel,
		PartQty,IsSpecialCertificationsByManufacturer,ShipTo,POCreated,POStatus,POPartStatus)
		SELECT 
			data_history_id , 
			ISNULL(JSON_VALUE(newvalue, '$.RfqName'),'') AS RFQName ,
			ISNULL(JSON_VALUE(newvalue, '$.PartId'),'') AS PartId ,
			ISNULL(JSON_VALUE(newvalue, '$.IsRfqPartDefault'),'') AS IsRfqPartDefault ,
			ISNULL(JSON_VALUE(newvalue, '$.MinPartQuantity'),'') AS MinPartQuantity ,
			ISNULL(JSON_VALUE(newvalue, '$.MinPartQuantityUnit'),'') AS MinPartQuantityUnit ,
			ISNULL(JSON_VALUE(newvalue, '$.IsSpecialCertificationsByManufacture'),'') AS IsSpecialCertificationsByManufacture ,
			ISNULL(JSON_VALUE(newvalue, '$.CertificateId'),'') AS CertificateId ,
			ISNULL(CONVERT(VARCHAR(19),JSON_VALUE(newvalue, '$.AwardDate'),120),'') AS AwardDate ,
			ISNULL(JSON_VALUE(newvalue, '$.ImportancePrice'),'') AS ImportancePrice ,
			ISNULL(JSON_VALUE(newvalue, '$.ImportanceQuality'),'') AS ImportanceQuality ,
			ISNULL(JSON_VALUE(newvalue, '$.ImportanceSpeed'),'') AS ImportanceSpeed ,
			ISNULL(JSON_VALUE(newvalue, '$.IsRegisterSupplierQuoteTheRfq'),'') AS IsRegisterSupplierQuoteTheRfq ,
			ISNULL(JSON_VALUE(newvalue, '$.IsSpecialInstructionToManufacturer'),'') AS IsSpecialInstructionToManufacturer ,
			ISNULL(JSON_VALUE(newvalue, '$.PrefRfqCommunicationMethod'),'') AS PrefRfqCommunicationMethod ,
			ISNULL(CONVERT(VARCHAR(19),JSON_VALUE(newvalue, '$.QuotesNeededBy'),120),'') AS QuotesNeededBy ,
			ISNULL(JSON_VALUE(newvalue, '$.SpecialInstructionToManufacturer'),'') AS SpecialInstructionToManufacturer ,
			ISNULL(JSON_VALUE(newvalue, '$.RfqPrefManufacturingLocationId'),'') AS RfqPrefManufacturingLocationId,
			ISNULL(JSON_VALUE(newvalue, '$.PaymentTermId'),'') AS PaymentTermId,
			ISNULL(JSON_VALUE(newvalue, '$.PrefNdaType'),'') AS PrefNdaType,
			ISNULL(JSON_VALUE(newvalue, '$.WhoPaysForShipping'),'') AS WhoPaysForShipping,
			ISNULL(JSON_VALUE(newvalue, '$.RfqStatusId'),'') AS RfqStatusId,
			ISNULL(JSON_VALUE(newvalue, '$.QuantityLevel'),'') AS QuantityLevel,
			ISNULL(JSON_VALUE(newvalue, '$.PartQty'),'') AS PartQty,
			ISNULL(JSON_VALUE(newvalue, '$.IsSpecialCertificationsByManufacturer'),'') AS IsSpecialCertificationsByManufacturer,
			ISNULL(JSON_VALUE(newvalue, '$.ShipTo'),'') AS ShipTo,
			ISNULL(JSON_VALUE(newvalue, '$.POCreated'),'') AS POCreated,
			ISNULL(JSON_VALUE(newvalue, '$.POStatus'),'') AS POStatus,
			ISNULL(JSON_VALUE(newvalue, '$.POPartStatus'),'') AS POPartStatus
		FROM [tmp_trans].revision_data_history  (NOLOCK)


		--SELECT * FROM [tmp_trans].revision_data_history_old_values  ORDER BY data_history_id
		--SELECT * FROM [tmp_trans].revision_data_history_new_values   ORDER BY data_history_id

		INSERT INTO [tmp_trans].revision_data_history_2 (Id, RFQAttributes , Oldvalues)
		SELECT data_history_id AS Id, RFQAttributes, Oldvalues  
		FROM   
		(
			SELECT 
				data_history_id, RFQName,PartId,	IsRfqPartDefault	,MinPartQuantity	,MinPartQuantityUnit	,IsSpecialCertificationsByManufacture	,CertificateId	
				,AwardDate	,ImportancePrice	,ImportanceQuality	,ImportanceSpeed	,IsRegisterSupplierQuoteTheRfq	,IsSpecialInstructionToManufacturer	
				,PrefRfqCommunicationMethod	,QuotesNeededBy	, SpecialInstructionToManufacturer ,RfqPrefManufacturingLocationId, PaymentTermId 
				,PrefNdaType ,WhoPaysForShipping,RfqStatusId,QuantityLevel ,PartQty ,IsSpecialCertificationsByManufacturer,ShipTo,POCreated,POStatus,POPartStatus
 
			FROM  [tmp_trans].revision_data_history_old_values  (NOLOCK)
		) p  
		UNPIVOT  
		(	Oldvalues FOR RFQAttributes IN   
			(
					RFQName,PartId,	IsRfqPartDefault	,MinPartQuantity	,MinPartQuantityUnit	,IsSpecialCertificationsByManufacture	,CertificateId	
				,AwardDate	,ImportancePrice	,ImportanceQuality	,ImportanceSpeed	,IsRegisterSupplierQuoteTheRfq	,IsSpecialInstructionToManufacturer	
				,PrefRfqCommunicationMethod	,QuotesNeededBy	, SpecialInstructionToManufacturer,RfqPrefManufacturingLocationId, PaymentTermId 
				,PrefNdaType ,WhoPaysForShipping,RfqStatusId,QuantityLevel,PartQty,IsSpecialCertificationsByManufacturer,ShipTo,POCreated,POStatus,POPartStatus
			)  
		)AS unpvt	; 

	
		UPDATE  a SET a.NewValues = b.Newvalues
		FROM    [tmp_trans].revision_data_history_2 a
		JOIN
		(
			SELECT data_history_id AS Id, RFQAttributes, NewValues  
			FROM   
			(
				SELECT 
					data_history_id, RFQName,PartId,	IsRfqPartDefault	,MinPartQuantity	,MinPartQuantityUnit	,IsSpecialCertificationsByManufacture	,CertificateId	
					,AwardDate	,ImportancePrice	,ImportanceQuality	,ImportanceSpeed	,IsRegisterSupplierQuoteTheRfq	,IsSpecialInstructionToManufacturer	
					,PrefRfqCommunicationMethod	,QuotesNeededBy	, SpecialInstructionToManufacturer,RfqPrefManufacturingLocationId
					,PaymentTermId ,PrefNdaType ,WhoPaysForShipping,RfqStatusId,QuantityLevel,PartQty,IsSpecialCertificationsByManufacturer,ShipTo,POCreated,POStatus,POPartStatus
 
				FROM  [tmp_trans].revision_data_history_new_values  (NOLOCK)
			) p  
			UNPIVOT  
			(	NewValues FOR RFQAttributes IN   
				(
					 RFQName,PartId,	IsRfqPartDefault	,MinPartQuantity	,MinPartQuantityUnit	,IsSpecialCertificationsByManufacture	,CertificateId	
					,AwardDate	,ImportancePrice	,ImportanceQuality	,ImportanceSpeed	,IsRegisterSupplierQuoteTheRfq	,IsSpecialInstructionToManufacturer	
					,PrefRfqCommunicationMethod	,QuotesNeededBy	, SpecialInstructionToManufacturer,RfqPrefManufacturingLocationId, PaymentTermId ,PrefNdaType 
					,WhoPaysForShipping,RfqStatusId,QuantityLevel,PartQty,IsSpecialCertificationsByManufacturer,ShipTo,POCreated,POStatus,POPartStatus
				)  
			)AS unpvt	
		) b on a.Id = b.Id and a.RFQAttributes = b.RFQAttributes

		--select * from [tmp_trans].revision_data_history_2 

		DELETE [tmp_trans].revision_data_history_2 WHERE ( NewValues = '' AND OldValues= '')

		INSERT INTO [tmp_trans].revision_data_history_3
		(data_history_id	,userid	,creation_date	,tablename	,rfq_id	,rfq_part_id	,rfq_part_qty_id	,rfq_special_certificate_id	
			,rfq_preference_id	,Id	,RFQAttributes	,OldValues	,NewValues	,Field	,oldvalue ,newvalue)
		SELECT 
			data_history_id	,userid	,creation_date	,tablename	,rfq_id	,rfq_part_id	,rfq_part_qty_id	,rfq_special_certificate_id	
			,rfq_preference_id	,Id	,RFQAttributes	,OldValues	,NewValues	,Field	,oldvalue ,newvalue
		FROM
		(
			SELECT a.*  
			, b.* 
			, CASE 
				WHEN  RFQAttributes = 'PartId' THEN 'Part Newly added "'+ISNULL(d.part_name,'')+'"'
				WHEN  RFQAttributes = 'IsRfqPartDefault' THEN '"'+ISNULL(d.part_name,'')+'" - Is Default RFQ Part?'
				WHEN  RFQAttributes = 'QuantityLevel' THEN 'Part Qty Level'
				WHEN  RFQAttributes = 'PartQty' THEN ''
				WHEN  RFQAttributes = 'MinPartQuantity' THEN ISNULL(d.part,'')
				WHEN  RFQAttributes = 'MinPartQuantityUnit' THEN ''
				WHEN  RFQAttributes = 'RFQName' THEN 'Rfq Name'
				WHEN  RFQAttributes = 'AwardDate' THEN 'Award date'
				WHEN  RFQAttributes = 'ImportancePrice' THEN 'Price'
				WHEN  RFQAttributes = 'ImportanceQuality' THEN 'Quality'
				WHEN  RFQAttributes = 'ImportanceSpeed' THEN 'Speed'
				WHEN  RFQAttributes = 'IsRegisterSupplierQuoteTheRfq' THEN 'Is registered Supplier quote the RFQ'
				WHEN  RFQAttributes = 'IsSpecialInstructionToManufacturer' THEN 'Is special instruction to Manufacturer?'
				WHEN  RFQAttributes = 'PrefRfqCommunicationMethod' THEN 'Preferred Communication'
				WHEN  RFQAttributes = 'QuotesNeededBy' THEN 'Quotes needed by'
				WHEN  RFQAttributes = 'SpecialInstructionToManufacturer' THEN 'Special instruction to Manufacturer'
				WHEN  RFQAttributes = 'PaymentTermId' THEN 'Payment Term' 
				WHEN  RFQAttributes = 'PrefNdaType' THEN 'Preferred NDA Type' 
				WHEN  RFQAttributes = 'WhoPaysForShipping' THEN 'Who pays for shipping'
				WHEN  RFQAttributes = 'RfqStatusId' THEN 'RFQ Status'
				WHEN  RFQAttributes = 'RfqPrefManufacturingLocationId' THEN 'RFQ Preferred location'
				WHEN  RFQAttributes = 'CertificateId' THEN 'RFQ Certificate'
				WHEN  RFQAttributes = 'IsSpecialCertificationsByManufacturer' THEN 'Is special certifications by Manufacturer?'
				WHEN  RFQAttributes = 'ShipTo' THEN 'Shipping Address'
				WHEN  RFQAttributes = 'POCreated' THEN 'PO sent to manufacturer' 
				WHEN  RFQAttributes = 'POStatus' THEN 'PO status updated' 
				WHEN  RFQAttributes = 'POPartStatus' THEN 'PO Part status updated - "'+ISNULL(d.part_name,'')+'"'
			END Field
			, CASE 
				WHEN  RFQAttributes = 'PartId' THEN ''
				WHEN  RFQAttributes = 'IsRfqPartDefault' THEN 
					CASE 
						WHEN oldvalues = 'false' THEN 'No'
						WHEN oldvalues = 'true' THEN 'Yes'
						ELSE oldvalues
					 END	
				WHEN  RFQAttributes = 'ImportancePrice' THEN 
					CASE 
						WHEN oldvalues = 1 THEN 'High Importance'
						WHEN oldvalues = 2 THEN 'Middle importance'
						WHEN oldvalues = 3 THEN 'Low importance'
						ELSE oldvalues
					 END
				WHEN  RFQAttributes = 'ImportanceQuality' THEN 
					CASE 
						WHEN oldvalues = 1 THEN 'High Importance'
						WHEN oldvalues = 2 THEN 'Middle importance'
						WHEN oldvalues = 3 THEN 'Low importance'
						ELSE oldvalues
					 END
				WHEN  RFQAttributes = 'ImportanceSpeed' THEN
					CASE 
						WHEN oldvalues = 1 THEN 'High Importance'
						WHEN oldvalues = 2 THEN 'Middle importance'
						WHEN oldvalues = 3 THEN 'Low importance'
						ELSE oldvalues
					 END
				WHEN  RFQAttributes = 'IsRegisterSupplierQuoteTheRfq' THEN 
					CASE 
						WHEN oldvalues = 'false' THEN 'No'
						WHEN oldvalues = 'true' THEN 'Yes'
						ELSE oldvalues
					 END
				WHEN  RFQAttributes = 'IsSpecialInstructionToManufacturer' THEN 
					CASE 
						WHEN oldvalues = 'false' THEN 'No'
						WHEN oldvalues = 'true' THEN 'Yes'
						ELSE oldvalues
					 END
				WHEN  RFQAttributes = 'PrefRfqCommunicationMethod' THEN ISNULL(e.value,'')
				WHEN  RFQAttributes = 'PaymentTermId' THEN ISNULL(f.description,'')
				WHEN  RFQAttributes = 'PrefNdaType' THEN 
					CASE 
						WHEN oldvalues= '' THEN ''
						WHEN oldvalues= 0 THEN 'No NDA'
						WHEN oldvalues= 1 THEN '1st-level NDA'
						WHEN oldvalues= 2 THEN '2nd-level NDA'
						ELSE oldvalues
					 END 
				WHEN  RFQAttributes = 'WhoPaysForShipping' THEN 
					CASE 
						WHEN oldvalues = 1 THEN 'Buyer Pay'
						WHEN oldvalues = 13 THEN 'Supplier Pay'
						ELSE oldvalues
					 END
				WHEN  RFQAttributes = 'RfqStatusId' THEN ISNULL(g.description,'')
				--WHEN  RFQAttributes = 'CertificateId' THEN 'Is special certifications by Manufacturer?'
				WHEN  RFQAttributes = 'RfqPrefManufacturingLocationId' THEN ISNULL(h.territory_classification_name,'')
				WHEN  RFQAttributes = 'CertificateId' THEN ISNULL(i.certificate_code,'')
				WHEN  RFQAttributes = 'ShipTo' THEN ISNULL(j.[address],'')
				WHEN  RFQAttributes = 'POStatus' THEN oldvalues
				WHEN  RFQAttributes = 'IsSpecialCertificationsByManufacturer' THEN 
					CASE 
						WHEN oldvalues = 'false' THEN 'No'
						WHEN oldvalues = 'true' THEN 'Yes'
						ELSE oldvalues
					 END
				ELSE oldvalues
			END oldvalue
			, CASE 
				WHEN  RFQAttributes = 'PartId' THEN ''
				WHEN  RFQAttributes = 'IsRfqPartDefault' THEN 
					CASE 
						WHEN newvalues = 'false' THEN 'No'
						WHEN newvalues = 'true' THEN 'Yes'
						ELSE newvalues
					 END		
				WHEN  RFQAttributes = 'ImportancePrice' THEN 
					CASE 
						WHEN newvalues = 1 THEN 'High Importance'
						WHEN newvalues = 2 THEN 'Middle importance'
						WHEN newvalues = 3 THEN 'Low importance'
						ELSE newvalues
					 END
				WHEN  RFQAttributes = 'ImportanceQuality' THEN 
					CASE 
						WHEN newvalues = 1 THEN 'High Importance'
						WHEN newvalues = 2 THEN 'Middle importance'
						WHEN newvalues = 3 THEN 'Low importance'
						ELSE newvalues
					 END
				WHEN  RFQAttributes = 'ImportanceSpeed' THEN
					CASE 
						WHEN newvalues = 1 THEN 'High Importance'
						WHEN newvalues = 2 THEN 'Middle importance'
						WHEN newvalues = 3 THEN 'Low importance'
						ELSE newvalues
					 END
				WHEN  RFQAttributes = 'IsRegisterSupplierQuoteTheRfq' THEN 
					CASE 
						WHEN newvalues = 'false' THEN 'No'
						WHEN newvalues = 'true' THEN 'Yes'
						ELSE newvalues
					 END
				WHEN  RFQAttributes = 'IsSpecialInstructionToManufacturer' THEN 
					CASE 
						WHEN newvalues = 'false' THEN 'No'
						WHEN newvalues = 'true' THEN 'Yes'
						ELSE newvalues
					 END
				WHEN  RFQAttributes = 'PrefRfqCommunicationMethod' THEN e1.value
				WHEN  RFQAttributes = 'PaymentTermId' THEN f1.description
				WHEN  RFQAttributes = 'PrefNdaType' THEN 
					CASE 
						WHEN newvalues= 0 THEN 'No NDA'
						WHEN newvalues= 1 THEN '1st-level NDA'
						WHEN newvalues= 2 THEN '2nd-level NDA'
						ELSE newvalues
					 END 
				WHEN  RFQAttributes = 'WhoPaysForShipping' THEN 
					CASE 
						WHEN newvalues = 1 THEN 'Buyer Pay'
						WHEN newvalues = 13 THEN 'Supplier Pay'
						ELSE newvalues
					 END
				WHEN  RFQAttributes = 'RfqStatusId' THEN g1.description
				--WHEN  RFQAttributes = 'CertificateId' THEN 'Is special certifications by Manufacturer?'
				WHEN  RFQAttributes = 'RfqPrefManufacturingLocationId' THEN ISNULL(h1.territory_classification_name,'')
				WHEN  RFQAttributes = 'ShipTo' THEN ISNULL(j1.[address],'')
				WHEN  RFQAttributes = 'POStatus' THEN newvalues
				WHEN  RFQAttributes = 'CertificateId' THEN ISNULL(i1.certificate_code,'')
				WHEN  RFQAttributes = 'IsSpecialCertificationsByManufacturer' THEN 
					CASE 
						WHEN newvalues = 'false' THEN 'No'
						WHEN newvalues = 'true' THEN 'Yes'
						ELSE newvalues
					 END
				ELSE newvalues
			END newvalue
			FROM [tmp_trans].revision_data_history_1 a  (NOLOCK)
			JOIN [tmp_trans].revision_data_history_2 b  (NOLOCK) ON a.data_history_id = b.Id
			LEFT JOIN 
			(
					SELECT 
						rfq_part_id , part_name , part_id,
						CASE 
							WHEN Id = 1 THEN '1st Part Quantity - "' 
							WHEN Id = 2 THEN '2nd Part Quantity - "' 
							WHEN Id = 3 THEN '3rd Part Quantity - "' 
							WHEN Id = 4 THEN '4th Part Quantity - "' 
							WHEN Id = 5 THEN '5th Part Quantity - "' 
						END + part_name + '"' AS part
					FROM
					(
						SELECT a.rfq_id, b.rfq_part_id, c.part_name, c.part_id ,ROW_NUMBER () OVER (PARTITION BY a.rfq_id ORDER BY a.rfq_id , b.rfq_part_id) Id
						FROM mp_rfq			a (NOLOCK)
						JOIN mp_rfq_parts   b (NOLOCK) ON  a.rfq_id = b.rfq_id and b.status_id = 2
						JOIN mp_parts		c (NOLOCK) ON  b.part_id = c.part_id 
					) a
			) d ON a.rfq_part_id = d.rfq_part_id
			LEFT JOIN mp_system_parameters	e (NOLOCK) on CONVERT(NVARCHAR,b.oldvalues) = CONVERT(NVARCHAR,e.id) AND RFQAttributes = 'PrefRfqCommunicationMethod'
			LEFT JOIN mp_mst_paymentterm	f (NOLOCK) on CONVERT(NVARCHAR,b.oldvalues) = CONVERT(NVARCHAR,f.paymentterm_id) AND RFQAttributes = 'PaymentTermId'
			LEFT JOIN mp_mst_rfq_buyerStatus g (NOLOCK) on CONVERT(NVARCHAR,b.oldvalues) = CONVERT(NVARCHAR,CONVERT(INT,g.rfq_buyerstatus_id)) AND RFQAttributes= 'RfqStatusId'
			LEFT JOIN mp_system_parameters	e1 (NOLOCK) on CONVERT(NVARCHAR,b.newvalues) = CONVERT(NVARCHAR,e1.id) AND RFQAttributes = 'PrefRfqCommunicationMethod'
			LEFT JOIN mp_mst_paymentterm	f1 (NOLOCK) on CONVERT(NVARCHAR,b.newvalues) = CONVERT(NVARCHAR,f1.paymentterm_id) AND RFQAttributes = 'PaymentTermId'
			LEFT JOIN mp_mst_rfq_buyerStatus g1 (NOLOCK) on CONVERT(NVARCHAR,b.newvalues) = CONVERT(NVARCHAR,CONVERT(INT,g1.rfq_buyerstatus_id)) AND RFQAttributes= 'RfqStatusId'
			LEFT JOIN mp_mst_territory_classification h (NOLOCK) on b.oldvalues = CONVERT(NVARCHAR,h.territory_classification_id) AND RFQAttributes= 'RfqPrefManufacturingLocationId'
			LEFT JOIN mp_mst_territory_classification h1 (NOLOCK) on b.newvalues = CONVERT(NVARCHAR,h1.territory_classification_id) AND RFQAttributes= 'RfqPrefManufacturingLocationId'
			LEFT JOIN mp_certificates i (NOLOCK) on b.oldvalues = CONVERT(NVARCHAR,i.certificate_id) AND RFQAttributes= 'CertificateId'
			LEFT JOIN mp_certificates i1 (NOLOCK) on b.newvalues = CONVERT(NVARCHAR,i1.certificate_id) AND RFQAttributes= 'CertificateId'
			LEFT JOIN 
			(
				SELECT site_id ,
					ISNULL(css.site_label + ', ',' ') + ISNULL(ma.address1 +', ',' ') + ISNULL(ma.address2 +', ',' ') + ISNULL(ma.address3 +', ',' ') 
					+ ISNULL(ma.address4 +', ',' ') + ISNULL(ma.address5 + ', ',' ')+ISNULL(country_name,' ')  AS address
				FROM mp_company_shipping_site	css (NOLOCK)
				JOIN mp_addresses				ma (NOLOCK)		on css.address_id = ma.address_id
				JOIN mp_mst_country				mms (NOLOCK)	on mms.country_id = ma.country_id
				WHERE site_id <>0
			) j ON b.oldvalues  =  CONVERT(NVARCHAR,j.site_id)    AND RFQAttributes= 'ShipTo'
			LEFT JOIN 
			(
				SELECT site_id ,
					ISNULL(css.site_label + ', ',' ') + ISNULL(ma.address1 +', ',' ') + ISNULL(ma.address2 +', ',' ') + ISNULL(ma.address3 +', ',' ') 
					+ ISNULL(ma.address4 +', ',' ') + ISNULL(ma.address5 + ', ',' ')+ISNULL(country_name,' ')  AS address
				FROM mp_company_shipping_site	css (NOLOCK)
				JOIN mp_addresses				ma (NOLOCK)		on css.address_id = ma.address_id
				JOIN mp_mst_country				mms (NOLOCK)	on mms.country_id = ma.country_id
				WHERE site_id <>0
			) j1 ON b.newvalues  =  CONVERT(NVARCHAR,j1.site_id)   AND RFQAttributes= 'ShipTo'
				--WHERE a.rfq_id = 1189591
		) a

		DELETE [tmp_trans].revision_data_history_3  WHERE (RFQAttributes IN ('PartQty','QuantityLevel'))

		INSERT INTO [tmp_trans].revision_data_history_4(data_history_id,rfq_id , userid)
		SELECT data_history_id ,rfq_id , userid FROM [tmp_trans].revision_data_history_3  (NOLOCK)

		;WITH revision_data_history_2 AS   
		(  
			SELECT rfq_id , userid ,ROW_NUMBER() OVER (PARTITION BY rfq_id , userid ORDER BY rfq_id, userid) AS rn 
			FROM [tmp_trans].revision_data_history_4    (NOLOCK)
		)  
		DELETE FROM revision_data_history_2 WHERE rn >1

		INSERT INTO  [tmp_trans].revision_data_history_5
		(rfq_id ,userid ,rn2)
		SELECT  rfq_id , userid  ,DENSE_RANK() OVER (PARTITION BY rfq_id ORDER BY  rfq_id, row_number1 ) rn2  
		FROM	
		(
			SELECT	*,	ROW_NUMBER() OVER (ORDER BY rfq_id) row_number1	FROM [tmp_trans].revision_data_history_4   (NOLOCK)
		) a
	

		--SELECT * FROM #revision_data_history_3 WHERE rfq_id= 1189595
		--SELECT * FROM [tmp_trans].revision_data_history_5


		INSERT INTO mp_rfq_versions(contact_id,major_number, minor_number, version_number, creation_date, rfq_id)
			OUTPUT INSERTED.rfq_version_id, INSERTED.contact_id, INSERTED.rfq_id , INSERTED.major_number  INTO [tmp_trans].revision_versions  
		SELECT userid contact_id , (rn +rn2 )  major_number ,  0 minor_number , CONVERT(NVARCHAR(50),(rn+rn2 )) + '.0' version_number ,  GETUTCDATE() creation_date , rfq_id
		FROM
		(
			SELECT  
				rfq_id , userid , rn2,  ISNULL((SELECT MAX(major_number) FROM mp_rfq_versions (NOLOCK) WHERE a.rfq_id = rfq_id ),1) rn
			FROM [tmp_trans].revision_data_history_5 a  (NOLOCK)

		) a
		
		INSERT INTO mp_rfq_revision(rfq_id, field	, oldvalue	, newvalue	, creation_date	, rfq_version_id)
		SELECT  
			a.rfq_id	
			,REPLACE(REPLACE(a.field,'"" - Is Default RFQ Part?','Is Default RFQ Part?'),'Part Newly added ""','Part Newly added')	field
			,ISNULL(a.old_value,'')	old_value ,ISNULL(a.new_value,'') new_value ,dh_date ,b.rfq_version_id  
		FROM 
		(
			SELECT DISTINCT a.rfq_id	,field	, ISNULL(oldvalue,'')	old_value ,ISNULL(newvalue,'') new_value ,  creation_date dh_date 
			, b.rn2 version_running_id , a.userid ,a.data_history_id
			FROM [tmp_trans].revision_data_history_3 a  (NOLOCK)
			JOIN [tmp_trans].revision_data_history_5 b  (NOLOCK) ON a.rfq_id = b.rfq_id AND a.userid = b.userid
		) a
		JOIN [tmp_trans].revision_versions b ON a.rfq_id = b.rfq_id AND a.userid = b.contact_id and a.version_running_id = (b.major_number - (b.major_number - a.version_running_id))
		ORDER BY version_running_id ,data_history_id

	END

	TRUNCATE TABLE [tmp_trans].revision_data_history
	TRUNCATE TABLE [tmp_trans].revision_data_history_1
	TRUNCATE TABLE [tmp_trans].revision_data_history_2
	TRUNCATE TABLE [tmp_trans].revision_data_history_3
	TRUNCATE TABLE [tmp_trans].revision_data_history_4
	TRUNCATE TABLE [tmp_trans].revision_data_history_5
	TRUNCATE TABLE [tmp_trans].revision_versions 
	TRUNCATE TABLE [tmp_trans].revision_data_history_old_values
	TRUNCATE TABLE [tmp_trans].revision_data_history_new_values 

END
GO
PRINT N'Altering Procedure [dbo].[proc_set_rfq_shopiq_metrics]...';


GO

/*

EXEC [proc_set_rfq_shopiq_metrics]

select * from mp_rfq_shopiq_metrics

*/
ALTER PROCEDURE [dbo].[proc_set_rfq_shopiq_metrics]
as
begin

	/*
		created :	apr 18,2019
		purpose :	M2-1450 Shop IQ at the RFQ level - Database
					The Shop IQ tab on the Supplier's RFQ details page will display the RFQ and Part level quoting statistic breakdown.
					This will be just like the existing platform except we will not have the Awards by Company Size or Awards by Certification
					Display Shop IQ 7 days after the Award date
					We will only show the following:
					Buyer information
					RFQ roll up award price info
					Part and award info
					Display the Market Price always and don’t show
					Always show based on Quantity 1 when not awarded
					Display the awarded quantity if awarded
	*/
	/*
		modified :	May 31,2023
		purpose :	M2-5003 M - Shop IQ - Include tooling, misc, and shipping costs into the per unit cost - DB
					Currently it appears the Shop IQ per unit cost omits other quote costs such as tooling, miscellaneous, and shipping. 
					These should be calculated into the Shop IQ per unit costs. Ex. price per unit + ((tooling + miscellaneous + shipping) / # of units)) = Shop IQ per unit. 
	*/
	
	--TRUNCATE TABLE mp_rfq_shopiq_metrics

	--DROP TABLE IF EXISTS #tmp_list_of_rfqs_for_shopiq
	IF OBJECT_ID('tempdb..#tmp_list_of_rfqs_for_shopiq') IS NOT NULL  
    DROP TABLE #tmp_list_of_rfqs_for_shopiq

	DROP TABLE IF EXISTS #tmp_rfq_supplier_quoted_count
	DROP TABLE IF EXISTS #tmp_rfq_part_quantity_per_unit_price
	DROP TABLE IF EXISTS #tmp_rfq_awarded_parts_per_unit_price
	DROP TABLE IF EXISTS #tmp_rfq_part_quantity_low_high_price
	---- Fetch such RFQs which are fall in "Other" awarded 
	DROP TABLE IF EXISTS #tmp_list_of_rfqs_for_shopiq_other ---- M2-5022

	CREATE TABLE #tmp_list_of_rfqs_for_shopiq (rfq_id INT)
	CREATE TABLE #tmp_rfq_supplier_quoted_count (rfq_id int,supplier_quoted INT)
	CREATE TABLE #tmp_rfq_part_quantity_per_unit_price (rfq_id INT,rfq_part_quantity_id INT,per_unit_price NUMERIC(18,4))
	CREATE TABLE #tmp_rfq_part_quantity_low_high_price(rfq_id INT,rfq_part_quantity_id INT,low_unit_price NUMERIC(18,4),high_unit_price NUMERIC(18,4))
	CREATE TABLE #tmp_list_of_rfqs_for_shopiq_other (rfq_id INT,rfq_part_id INT,is_awrded BIT, unit NUMERIC(9,2),price NUMERIC(9,2),rfq_part_quantity_id INT) ----M2-5022
	
 
	---- generating and hold list of rfq's for shopiq
	INSERT INTO #tmp_list_of_rfqs_for_shopiq
	SELECT rfq_id  --INTO #tmp_list_of_rfqs_for_shopiq
	FROM mp_rfq (NOLOCK)
	WHERE rfq_status_id IN (5,6,16,17,20)
	AND CONVERT(DATE,award_date+1)  = CONVERT(DATE,GETUTCDATE()) ----M2-4634 Changed the day #
	----AND CONVERT(DATE,award_date)  = CONVERT(DATE,GETUTCDATE()) ----- for testing puepose change commented above code  
	
	---- generating data for such RFQs which are fall in "Other" awarded   
	/* M2-5022 M - Add custom quantity and awarded price as another row in Shop IQ - DB */
	INSERT INTO #tmp_list_of_rfqs_for_shopiq_other
	SELECT a.rfq_id ,b.rfq_part_id,b.is_awrded,b.unit,b.price,b.rfq_part_quantity_id
	FROM mp_rfq_quote_SupplierQuote(NOLOCK) a
	join mp_rfq_quote_items(NOLOCK) b ON a.rfq_quote_SupplierQuote_id = b.rfq_quote_SupplierQuote_id
	where a.rfq_id in (SELECT rfq_id FROM #tmp_list_of_rfqs_for_shopiq) 
	and b.is_awrded = 1
	and b.status_id = 6
	and b.unit > 0
	/* */

	
	/* M2-4272 M - Update Shop IQ data if the award price is updated - DB */

	---- delete such rfq id from mp_rfq_shopiq_metrics, which are already exists
	DELETE FROM mp_rfq_shopiq_metrics WHERE rfq_id in
	(
		SELECT rfq_id  --INTO #tmp_list_of_rfqs_for_shopiq
		FROM mp_rfq (NOLOCK)
		WHERE rfq_status_id IN (5,6,16,17,20)
		AND CONVERT(DATE,RegenerateShopIQOn)  = CONVERT(DATE,GETUTCDATE()-1) 
		----AND CONVERT(DATE,RegenerateShopIQOn)  = CONVERT(DATE,GETUTCDATE()) ----- for testing puepose change commented above code 
		and  CONVERT(DATE,award_date)  <= CONVERT(DATE,GETUTCDATE())       
		and RegenerateShopIQOn is not null
	)
	

	---- insert such rfq into temp table
	INSERT INTO #tmp_list_of_rfqs_for_shopiq
	SELECT rfq_id  
	FROM mp_rfq (NOLOCK)
	WHERE rfq_status_id IN (5,6,16,17,20)
	AND CONVERT(DATE,RegenerateShopIQOn)  = CONVERT(DATE,GETUTCDATE()-1)  
	and CONVERT(DATE,award_date)  <= CONVERT(DATE,GETUTCDATE())        
	and RegenerateShopIQOn is not null

	/* End: M2-4272 M - Update Shop IQ data if the award price is updated - DB */
	IF ((SELECT COUNT(1) FROM #tmp_list_of_rfqs_for_shopiq) > 0)
	BEGIN
		-- getting quotes count for rfq's
		INSERT INTO #tmp_rfq_supplier_quoted_count
		SELECT rfq_id , SUM (supplier_quoted) AS supplier_quoted   
		FROM (
				SELECT a.rfq_id , count(distinct b.contact_id) supplier_quoted  
				FROM mp_rfq	 a	(NOLOCK)
				LEFT JOIN mp_rfq_quote_supplierquote (NOLOCK)  b ON a.rfq_id = b.rfq_id 
				AND is_quote_submitted = 1 AND is_rfq_resubmitted =0 
				WHERE EXISTS (SELECT rfq_id FROM #tmp_list_of_rfqs_for_shopiq WHERE rfq_id = a.rfq_id)
				GROUP BY a.rfq_id
			
				UNION ALL
		
				----M2-4428 : here fetching data for decline quote
				SELECT a.rfq_id , count(distinct b.contact_id) supplier_quoted  
				FROM mp_rfq	 a	(NOLOCK)
				LEFT JOIN mp_rfq_quote_supplierquote (NOLOCK)  b ON a.rfq_id = b.rfq_id 
				and is_quote_submitted = 1 and is_rfq_resubmitted =1 and is_quote_declined = 1 
				WHERE EXISTS (SELECT rfq_id FROM #tmp_list_of_rfqs_for_shopiq WHERE rfq_id = a.rfq_id)
				GROUP BY a.rfq_id
			)  rfq_supplier_quoted_count
		GROUP BY  rfq_id


		-- getting sum of per unit price for rfq's for each quantity level
		INSERT INTO #tmp_rfq_part_quantity_per_unit_price
		SELECT rfq_id ,rfq_part_quantity_id ,SUM(per_unit_price) AS per_unit_price  
		FROM (
				SELECT a.rfq_id , b.rfq_part_quantity_id 
				----, SUM(b.per_unit_price) per_unit_price
				, SUM(  CONVERT(DECIMAL(16,4),
						b.per_unit_price + (( ISNULL(b.tooling_amount,0) + ISNULL(b.miscellaneous_amount,0) + ISNULL(b.shipping_amount,0)) /  b.awarded_qty)) 
					 ) AS [per_unit_price]
				FROM mp_rfq_quote_supplierquote (NOLOCK) a
				JOIN mp_rfq_quote_items			(NOLOCK) b ON a.rfq_quote_SupplierQuote_id = b.rfq_quote_SupplierQuote_id 
					AND is_quote_submitted = 1 AND is_rfq_resubmitted =0
				WHERE  EXISTS (SELECT rfq_id FROM #tmp_list_of_rfqs_for_shopiq WHERE rfq_id = a.rfq_id)
				GROUP BY  a.rfq_id , b.rfq_part_quantity_id 
				
				UNION ALL 
				----M2-4428 : here fetching data for decline quote
				SELECT a.rfq_id , b.rfq_part_quantity_id 
				----, SUM(b.per_unit_price) per_unit_price
				, SUM(  CONVERT(DECIMAL(16,4),
						b.per_unit_price + (( ISNULL(b.tooling_amount,0) + ISNULL(b.miscellaneous_amount,0) + ISNULL(b.shipping_amount,0)) /  b.awarded_qty)) 
					 ) AS [per_unit_price]
				FROM mp_rfq_quote_supplierquote (NOLOCK) a
				JOIN mp_rfq_quote_items			(NOLOCK) b ON a.rfq_quote_SupplierQuote_id = b.rfq_quote_SupplierQuote_id 
					AND is_quote_submitted = 1 AND is_rfq_resubmitted =1 and is_quote_declined = 1
				WHERE  EXISTS (SELECT rfq_id FROM #tmp_list_of_rfqs_for_shopiq WHERE rfq_id = a.rfq_id)
				GROUP BY  a.rfq_id , b.rfq_part_quantity_id 
			 ) rfq_part_quantity_per_unit_price
		GROUP BY rfq_id ,rfq_part_quantity_id

	

		-- getting min and max price of rfq's for each quantity level
		/* M2-3721 M - Add the Low and High price to all Quantities in Shop IQ- DB */
		INSERT INTO  #tmp_rfq_part_quantity_low_high_price
		SELECT rfq_id,rfq_part_quantity_id,MIN(low_unit_price) AS low_unit_price, MAX(high_unit_price) AS high_unit_price 
		FROM (
			SELECT a.rfq_id , b.rfq_part_quantity_id 
			----, b.per_unit_price  AS low_unit_price 
			----, b.per_unit_price AS high_unit_price
			, CONVERT(DECIMAL(16,4),
						b.per_unit_price + (( ISNULL(b.tooling_amount,0) + ISNULL(b.miscellaneous_amount,0) + ISNULL(b.shipping_amount,0)) /  b.awarded_qty)) 
				 AS [low_unit_price]
			, CONVERT(DECIMAL(16,4),
						b.per_unit_price + (( ISNULL(b.tooling_amount,0) + ISNULL(b.miscellaneous_amount,0) + ISNULL(b.shipping_amount,0)) /  b.awarded_qty)) 
				 AS [high_unit_price]
			FROM mp_rfq_quote_supplierquote (NOLOCK) a
			JOIN mp_rfq_quote_items			(NOLOCK) b ON a.rfq_quote_SupplierQuote_id = b.rfq_quote_SupplierQuote_id 
				AND is_quote_submitted = 1 AND is_rfq_resubmitted =0
			WHERE  EXISTS (SELECT rfq_id FROM #tmp_list_of_rfqs_for_shopiq WHERE rfq_id = a.rfq_id)
			
			UNION ALL
			----M2-4428 : here fetching data for decline quote
			SELECT a.rfq_id , b.rfq_part_quantity_id 
			----, b.per_unit_price  AS low_unit_price 
			----, b.per_unit_price AS high_unit_price
			, CONVERT(DECIMAL(16,4),
						b.per_unit_price + (( ISNULL(b.tooling_amount,0) + ISNULL(b.miscellaneous_amount,0) + ISNULL(b.shipping_amount,0)) /  b.awarded_qty)) 
				 AS [low_unit_price]
			, CONVERT(DECIMAL(16,4),
						b.per_unit_price + (( ISNULL(b.tooling_amount,0) + ISNULL(b.miscellaneous_amount,0) + ISNULL(b.shipping_amount,0)) /  b.awarded_qty)) 
				 AS [high_unit_price]
			FROM mp_rfq_quote_supplierquote (NOLOCK) a
			JOIN mp_rfq_quote_items			(NOLOCK) b ON a.rfq_quote_SupplierQuote_id = b.rfq_quote_SupplierQuote_id 
				AND is_quote_submitted = 1 AND is_rfq_resubmitted =1 and is_quote_declined = 1
			WHERE  EXISTS (SELECT rfq_id FROM #tmp_list_of_rfqs_for_shopiq WHERE rfq_id = a.rfq_id)

			) rfq_part_quantity_low_high_price
		GROUP BY  rfq_id,rfq_part_quantity_id
		/**/
			 
		-- getting per unit price for awarded rfq's at quantity level
		SELECT a.rfq_id , b.rfq_part_id , b.rfq_part_quantity_id 
		--, b.per_unit_price 
		---- added with M2-5003
		,CONVERT(DECIMAL(16,4),
		b.per_unit_price + (( ISNULL(b.tooling_amount,0) + ISNULL(b.miscellaneous_amount,0) + ISNULL(b.shipping_amount,0)) /  b.awarded_qty ) 
		) AS [per_unit_price]
		, b.awarded_qty ,b.is_awrded
		, CASE WHEN (b.status_id = 6 and b.unit > 0)  THEN 1 ELSE 0 END AS IsOtherAwarded
		INTO #tmp_rfq_awarded_parts_per_unit_price
		FROM mp_rfq_quote_supplierquote (NOLOCK) a
		JOIN mp_rfq_quote_items			(NOLOCK) b ON a.rfq_quote_SupplierQuote_id = b.rfq_quote_SupplierQuote_id 
			AND is_quote_submitted = 1 AND is_rfq_resubmitted =0
		WHERE  EXISTS (SELECT rfq_id FROM #tmp_list_of_rfqs_for_shopiq WHERE rfq_id = a.rfq_id )
		AND  is_awrded = 1  
		AND  b.awarded_qty > 0
		/*
			select * from #tmp_rfq_supplier_quoted_count
			select * from #tmp_rfq_part_quantity_per_unit_price where rfq_id = 1163809
			select * from #tmp_rfq_part_quantity_low_high_price  where rfq_id = 1163809
			select * from #tmp_rfq_awarded_parts_per_unit_price  where rfq_id = 1163809
	    */

		-- generating shopiq metric and inserting it into relavent table
		INSERT INTO mp_rfq_shopiq_metrics
		(rfq_id ,rfq_part_id ,rfq_part_quantity_id ,quantity ,is_awarded ,avg_marketprice ,awarded_price ,award_date ,part_name ,process ,material, LowPrice , HighPrice,IsAwardedToOtherQty)
		SELECT 
				a.rfq_id 
				, b.rfq_part_id
				, f.rfq_part_quantity_id
				, (CONVERT(VARCHAR(150),f.part_qty ) +' ' + g.value) quantity 
				, 
				(
					CASE	
						WHEN (
								(SELECT COUNT(is_awrded) FROM mp_rfq_quote_items (NOLOCK) WHERE rfq_part_quantity_id = f.rfq_part_quantity_id AND is_awrded = 1 ) > 0
							 ) 
						THEN CASE WHEN j.IsOtherAwarded = 1 THEN 0 ELSE  1 END  
						ELSE 0 
					END
				  ) AS is_awrded
				,CONVERT
				 (
					DECIMAL(18,2),
					 CASE 
						WHEN h.supplier_quoted =  0 THEN 0 
						ELSE
							(
								ISNULL(i.per_unit_price,0) / h.supplier_quoted 
					
							)
					END 
				) AS avg_market_price
				, 
				(
					CASE 
						WHEN a.rfq_status_id IN (16,17,20) THEN
						(SELECT DISTINCT price FROM mp_rfq_quote_items a1 WHERE  b.rfq_part_id = a1.rfq_part_id AND f.rfq_part_quantity_id = a1.rfq_part_quantity_id and price is not null and price > 0)
						ELSE ISNULL(j.per_unit_price,0) 
					END
				)
				
				--, ISNULL(j.per_unit_price,0) -- CASE WHEN a.rfq_status_id IN (5,6) THEN ISNULL(j.per_unit_price,0) ELSE 0 END awarded_price
				, a.award_date
				, c.part_name
				, e.discipline_name as process
				, d.material_name_en  as material 
		/* M2-3721 M - Add the Low and High price to all Quantities in Shop IQ- DB */
				, ISNULL(k.low_unit_price,0)
				, ISNULL(k.high_unit_price,0)
		/**/
				, 0 AS IsAwardedToOtherQty
		FROM mp_rfq			a	(NOLOCK)
		JOIN mp_rfq_parts	b	(NOLOCK) ON a.rfq_id = b.rfq_id
		JOIN mp_parts		c	(NOLOCK) ON b.part_id = c.part_id
		LEFT JOIN mp_mst_materials		d	(NOLOCK) ON c.material_id = d.material_id 
		LEFT JOIN mp_mst_part_category	e	(NOLOCK) ON c.part_category_id = e.part_category_id
		LEFT JOIN mp_rfq_part_quantity	f	(NOLOCK) ON b.rfq_part_id = f.rfq_part_id and f.is_deleted = 0
		LEFT JOIN mp_system_parameters	g	(NOLOCK) ON c.part_qty_unit_id = g.id and g.sys_key = '@UNIT2_LIST' 
		JOIN #tmp_rfq_supplier_quoted_count h ON a.rfq_id = h.rfq_id 
		LEFT JOIN #tmp_rfq_part_quantity_per_unit_price i ON a.rfq_id = i.rfq_id AND f.rfq_part_quantity_id = i.rfq_part_quantity_id
		LEFT JOIN #tmp_rfq_awarded_parts_per_unit_price j ON a.rfq_id = j.rfq_id AND f.rfq_part_quantity_id = j.rfq_part_quantity_id
		/* M2-3721 M - Add the Low and High price to all Quantities in Shop IQ- DB */
		LEFT JOIN #tmp_rfq_part_quantity_low_high_price k ON a.rfq_id = k.rfq_id AND f.rfq_part_quantity_id = k.rfq_part_quantity_id
		/**/
		ORDER BY a.rfq_id 
				, b.rfq_part_id
				, f.rfq_part_quantity_id
				
		/* M2-5022 M - Add custom quantity and awarded price as another row in Shop IQ - DB */
	 	INSERT INTO mp_rfq_shopiq_metrics
		(rfq_id ,rfq_part_id ,rfq_part_quantity_id ,quantity ,is_awarded ,avg_marketprice ,awarded_price ,award_date ,part_name ,process ,material, LowPrice , HighPrice,IsAwardedToOtherQty)
		SELECT 
				a.rfq_id 
				, b.rfq_part_id
				, f.rfq_part_quantity_id
				, h.unit AS quantity 
				, h.is_awrded is_awrded
				,NULL AS avg_market_price
				, h.price AS awarded_price
				
				--, ISNULL(j.per_unit_price,0) -- CASE WHEN a.rfq_status_id IN (5,6) THEN ISNULL(j.per_unit_price,0) ELSE 0 END awarded_price
				, a.award_date
				, c.part_name
				, e.discipline_name as process
				, d.material_name_en  as material 
				, NULL AS LowPrice 
				, NULL AS HighPrice
				, 1 AS IsAwardedToOtherQty
		/**/
		FROM mp_rfq			a	(NOLOCK)
		JOIN mp_rfq_parts	b	(NOLOCK) ON a.rfq_id = b.rfq_id
		JOIN mp_parts		c	(NOLOCK) ON b.part_id = c.part_id
		LEFT JOIN mp_mst_materials		d	(NOLOCK) ON c.material_id = d.material_id 
		LEFT JOIN mp_mst_part_category	e	(NOLOCK) ON c.part_category_id = e.part_category_id
		LEFT JOIN mp_rfq_part_quantity	f	(NOLOCK) ON b.rfq_part_id = f.rfq_part_id and f.is_deleted = 0
		LEFT JOIN mp_system_parameters	g	(NOLOCK) ON c.part_qty_unit_id = g.id and g.sys_key = '@UNIT2_LIST' 
		--JOIN #tmp_rfq_supplier_quoted_count h ON a.rfq_id = h.rfq_id  --select * from #tmp_rfq_supplier_quoted_count 
		JOIN #tmp_list_of_rfqs_for_shopiq_other h ON a.rfq_id = h.rfq_id and h.rfq_part_id = b.rfq_part_id
		  AND f.rfq_part_quantity_id = h.rfq_part_quantity_id
		--LEFT JOIN #tmp_rfq_part_quantity_per_unit_price i ON a.rfq_id = i.rfq_id AND f.rfq_part_quantity_id = i.rfq_part_quantity_id
		--LEFT JOIN #tmp_rfq_awarded_parts_per_unit_price j ON a.rfq_id = j.rfq_id AND f.rfq_part_quantity_id = j.rfq_part_quantity_id
		/* M2-3721 M - Add the Low and High price to all Quantities in Shop IQ- DB */
		--LEFT JOIN #tmp_rfq_part_quantity_low_high_price k ON a.rfq_id = k.rfq_id AND f.rfq_part_quantity_id = k.rfq_part_quantity_id
		/**/
		
		ORDER BY a.rfq_id 
				, b.rfq_part_id
				, f.rfq_part_quantity_id

		/* */
	
	END


	DELETE FROM mp_rfq_shopiq_metrics WHERE rfq_part_quantity_id is null

	;WITH DuplicateShopIq AS   
	(  
		SELECT 
			  rfq_shopiq_id 
			, rfq_id 
			, rfq_part_id 
			, rfq_part_quantity_id 
			, ROW_NUMBER() OVER (PARTITION BY rfq_id ,rfq_part_id ,rfq_part_quantity_id  ,IsAwardedToOtherQty ORDER BY rfq_id ,rfq_part_id ,rfq_part_quantity_id ,rfq_shopiq_id ,IsAwardedToOtherQty) AS rn 
			, IsAwardedToOtherQty
		FROM mp_rfq_shopiq_metrics 
	)  
	DELETE FROM DuplicateShopIq WHERE rn >1 	
	AND IsAwardedToOtherQty = 0 ---- M2-5022
	
	/*  M2-5022 : IF below records are duplicated then delete such records*/
	;WITH DuplicateShopIq AS   
	(  
		SELECT 
			  rfq_shopiq_id 
			, rfq_id 
			, rfq_part_id 
			, rfq_part_quantity_id 
			, ROW_NUMBER() OVER (PARTITION BY rfq_id ,rfq_part_id ,rfq_part_quantity_id ,IsAwardedToOtherQty ORDER BY rfq_id ,rfq_part_id ,rfq_part_quantity_id ,rfq_shopiq_id ,IsAwardedToOtherQty ) AS rn 
			, IsAwardedToOtherQty
		FROM mp_rfq_shopiq_metrics 
	)  
	DELETE FROM DuplicateShopIq WHERE  rn >1 
	AND IsAwardedToOtherQty = 1 
	/* */


END
GO
PRINT N'Altering Procedure [dbo].[proc_ssis_set_rfqQuoteData]...';


GO
ALTER PROCEDURE [dbo].[proc_ssis_set_rfqQuoteData]
AS
-- =============================================
-- Author:		dp-sb
-- Create date:  30/11/2018
-- Description:	Stored procedure to set the legacy RFQ Quote data. This procedure in call in SSIS package.
-- Modification:
-- Example: [proc_ssis_set_rfqQuoteData]  
-- =================================================================
--Version No – Change Date – Modified By      – CR No – Note
-- =================================================================
BEGIN
	--print 'test'

	--select top 10 * from mp_rfq
	
	
	--select top 10 * from mp_rfq_part_quantity
	--select * from mp_rfq_quote_supplierquote where rfq_id = 308032
	--select top 10 * from mp_rfq_quote_items
	--select top 10 * from mp_rfq_quote_suplierStatuses
	--select top 10 * from mp_rfq_supplier_nda_accepted
	--select top 10 * from mp_rfq_part_quantity where rfq_part_id = 79838
	
	--delete from  mp_rfq_quote_items where rfq_quote_SupplierQuote_id in (select rfq_quote_SupplierQuote_id from mp_rfq_quote_supplierquote where contact_id = 1251140 )
	--delete from  mp_rfq_supplier_nda_accepted where rfq_id in (select rfqid from tmp_SSIS_RFQ_Quote_data_1 )
	--delete from  mp_rfq_quote_suplierStatuses where rfq_id in (select rfqid from tmp_SSIS_RFQ_Quote_data_1 )
	--delete from  mp_rfq_quote_supplierquote where contact_id = 1251140 
	
					 
	--select  * from  tmp_SSIS_RFQ_Quote_data_1 nolock where  rfqid = 1083605 and supplier_contact_id = 1251140
	--select top 10 * from mp_parts where part_id = 428433
	--select top 10 * from mp_rfq_parts where rfq_id = 1084198
	--select top 10 * from mp_rfq_part_quantity  where rfq_part_id in (95695)
	-- select top 10 * from mp_rfq_quote_supplierquote where  contact_id = 1251140 
	-- select top 10 * from mp_rfq_quote_items where rfq_part_id  = 95695
	-- select * from  mp_rfq_quote_suplierStatuses  where rfq_id = 1083605
	-- select * from  mp_rfq_supplier_nda_accepted  where rfq_id = 1083605

	-- select top 10 * from mp_rfq_parts where rfq_id = 1086537
	-- select * from mp_rfq_part_quantity where rfq_part_id in (98593)
	-- select max(quantity_level) from mp_rfq_part_quantity where  select min(quantity_level) from mp_rfq_part_quantity 
	-- update mp_rfq_part_quantity  set quantity_level = quantity_level-1 where quantity_level!= 0

	--select  min(quantity_level) 
	---- update a set a.quantity_level = a.quantity_level-1
	--from mp_rfq_part_quantity  a
	--join mp_rfq_parts  b on a.rfq_part_id = b.rfq_part_id
	--where b.rfq_id in (select  distinct rfqid from  tmp_SSIS_RFQ_Quote_data_1 nolock)

	--select top 10 * from mp_rfq_part_quantity  where rfq_part_id = 90955
	/*

	 DECLARE @TableName nvarchar(100) = 'mp_contacts'
	
	DECLARE @tmpFKRef TABLE (
	PKTABLE_QUALIFIER	varchar(200)
	, PKTABLE_OWNER	varchar(200)
	, PKTABLE_NAME	varchar(200)
	, PKCOLUMN_NAME	varchar(200)
	, FKTABLE_QUALIFIER	varchar(200)
	, FKTABLE_OWNER	varchar(200)
	, FKTABLE_NAME	varchar(200)
	, FKCOLUMN_NAME	varchar(200)
	, KEY_SEQ	int
	, UPDATE_RULE	int
	, DELETE_RULE	int
	, FK_NAME	varchar(200)
	, PK_NAME	varchar(200)
	, DEFERRABILITY	int
	)
 
	insert into @tmpFKRef
	EXEC sp_fkeys @TableName
 
	DECLARE @SQLCmd nvarchar(2000)
	DECLARE C1 cursor for    
	SELECT  ' ALTER TABLE ' + FKTABLE_OWNER + '.' + FKTABLE_NAME + ' NOCHECK CONSTRAINT ' +FK_NAME + ';' FROM @tmpFKRef
	OPEN C1
	FETCH from C1 into @SQLCmd
	WHILE @@FETCH_STATUS =0
	BEGIN	
		PRINT @SQLCmd
		EXEC SP_ExecuteSQL @SQLCmd
		FETCH from C1 into @SQLCmd
	END
	CLOSE C1
	DEALLOCATE C1

	delete from mp_rfq
	delete from  mp_rfq_parts
	delete from   mp_rfq_quote_items
	delete from   mp_rfq_quote_supplierquote
	delete from   mp_rfq_quote_suplierStatuses
	delete from   mp_rfq_supplier_nda_accepted
	delete from	  mp_rfq_part_quantity

	-- truncate table tmp_SSIS_RFQ_Quote_data_1

	select * from mp_rfq_parts
	select * from mp_rfq_part_quantity
	select * from mp_rfq_quote_supplierquote
	select * from mp_rfq_quote_items
	select * from mp_rfq_quote_suplierStatuses
	select * from mp_rfq_supplier_nda_accepted



	*/
		
	drop table if exists  tmp_ssis_legacy_qouted_rfq
	
	

	create table  tmp_ssis_legacy_qouted_rfq
	(
		[RFQID] [nvarchar](1000) NOT NULL,
		[Supplier_Contact_id] [nvarchar](1000) NOT NULL,
		[Supplier_company_id] [nvarchar](1000) NOT NULL,
		[is_prefered_nda_type_accepted] [nvarchar](1000) NOT NULL,
		[prefered_nda_type_accepted_date] [nvarchar](1000) NOT NULL,
		[payment_terms] [nvarchar](1000) NOT NULL,
		[is_payterm_accepted] [nvarchar](1000) NOT NULL,
		[QuoteReferenceNumber] [nvarchar](1000) NOT NULL,
		[IsSubmittedQuote] [nvarchar](1000) NOT NULL,
		[QuoteCreationDate] [nvarchar](1000) NOT NULL,
		[QuoteExpirationDate] [nvarchar](1000) NOT NULL,
		[PMS_ITEM_ID] [nvarchar](1000) NOT NULL,
		[grid_article] [nvarchar](1000) NOT NULL,
		[per_unit_price] [nvarchar](1000) NOT NULL,
		[tooling_amount] [nvarchar](1000) NOT NULL,
		[miscellaneous_amount] [nvarchar](1000) NOT NULL,
		[shipping_amount] [nvarchar](1000) NOT NULL,
		[is_awarded] [nvarchar](1000) NOT NULL,
		[QUANTITY_REF] [nvarchar](1000) NOT NULL,
		[is_award_accepted] [nvarchar](1000) NOT NULL,
		[AwardAcceptanceStatusDate] [nvarchar](1000) NOT NULL,
		is_created_mp_rfq_quote_supplierquote bit default 0,
		is_created_mp_rfq_quote_items bit default 0,
		is_created_mp_rfq_supplier_nda_accepted bit default 0,
		is_created_mp_rfq_quote_suplierStatuses bit default 0
	)

	create nonclustered index nc_index_tmp_ssis_legacy_qouted_rfq_rfq_id on tmp_ssis_legacy_qouted_rfq (rfqid)

	-- qouted rfq with part
	insert into  tmp_ssis_legacy_qouted_rfq
	(RFQID,Supplier_Contact_id,Supplier_company_id,is_prefered_nda_type_accepted,prefered_nda_type_accepted_date,payment_terms,is_payterm_accepted
	,QuoteReferenceNumber,IsSubmittedQuote,QuoteCreationDate,QuoteExpirationDate,PMS_ITEM_ID,grid_article,per_unit_price,tooling_amount,miscellaneous_amount
	,shipping_amount,is_awarded,QUANTITY_REF,is_award_accepted,AwardAcceptanceStatusDate)
	select  
		RFQID,Supplier_Contact_id,Supplier_company_id,is_prefered_nda_type_accepted,prefered_nda_type_accepted_date,payment_terms,is_payterm_accepted
		,QuoteReferenceNumber,IsSubmittedQuote,QuoteCreationDate,QuoteExpirationDate,PMS_ITEM_ID,grid_article,per_unit_price,tooling_amount,miscellaneous_amount
		,shipping_amount,is_awarded,QUANTITY_REF,is_award_accepted,AwardAcceptanceStatusDate
	from tmp_SSIS_RFQ_Quote_data nolock 
	where 
		--supplier_contact_id = 1251140  and 
		rfqid not  in (select rfq_id from mp_rfq_quote_supplierquote)
	order by rfqid
	
	
	-- insert into mp_rfq_quote_supplierquote
	insert into  mp_rfq_quote_supplierquote
	(rfq_id,contact_id,payment_terms,is_payterm_accepted,quote_reference_number,is_quote_submitted,quote_date,quote_expiry_date)
	select 
		distinct 
		RFQID,Supplier_Contact_id
		, case when payment_terms = 'null' then null else payment_terms end payment_terms
		, case when is_payterm_accepted = 'null' then null else is_payterm_accepted end is_payterm_accepted 
		, case when QuoteReferenceNumber = 'null' then null else QuoteReferenceNumber end QuoteReferenceNumber 
		, case when IsSubmittedQuote = 'null' then null else IsSubmittedQuote end IsSubmittedQuote 
		, case when QuoteCreationDate = 'null' then null else cast(cast(QuoteCreationDate as varchar(23)) as datetime) end QuoteCreationDate 
		, case when QuoteExpirationDate = 'null' then null else cast(cast(QuoteExpirationDate as varchar(23)) as datetime) end QuoteExpirationDate 
	from tmp_ssis_legacy_qouted_rfq
	where pms_item_id != 'null'
	and (case when QuoteExpirationDate = 'null' then null else cast(cast(QuoteExpirationDate as varchar(23)) as datetime) end) is not null
	and rfqid in  (select rfq_id from  mp_rfq)
	order by rfqid

	-- update tmp table for is_created_mp_rfq_quote_supplierquote = 1
	update a set is_created_mp_rfq_quote_supplierquote = 1
	from 
		 tmp_ssis_legacy_qouted_rfq a
		join  mp_rfq_quote_supplierquote b on a.rfqid = b.rfq_id and a.Supplier_Contact_id = b.contact_id

	
	--select * from mp_rfq_part_quantity
	insert into  mp_rfq_quote_items
	(rfq_quote_SupplierQuote_id ,rfq_part_id ,per_unit_price,tooling_amount,miscellaneous_amount,shipping_amount,rfq_part_quantity_id,is_awrded,
	is_award_accepted,award_accepted_Or_decline_date , awarded_date ,awarded_qty)
	select 
		 b.rfq_quote_SupplierQuote_id
		, c.rfq_part_id 
		, per_unit_price 
		, tooling_amount
		, miscellaneous_amount
		, shipping_amount
		, d.rfq_part_quantity_id
		, is_awarded
		, is_award_accepted
		, case when AwardAcceptanceStatusDate = 'null' then null else cast(cast(AwardAcceptanceStatusDate as varchar(23)) as datetime) end  AwardAcceptanceStatusDate
		, case when AwardAcceptanceStatusDate = 'null' then null else cast(cast(AwardAcceptanceStatusDate as varchar(23)) as datetime) end  awarded_date
		, d.part_qty
		
	from  tmp_ssis_legacy_qouted_rfq a
	join  mp_rfq_parts c on a.rfqid = c.rfq_id and a.pms_item_id = c.part_id
	join  mp_rfq_quote_supplierquote b on a.rfqid = b.rfq_id and a.Supplier_Contact_id = b.contact_id  and a.pms_item_id = c.part_id
	join  mp_rfq_part_quantity d on c.rfq_part_id  = d.rfq_part_id 
		 and (a.grid_article-1) = d.quantity_level  -- we are storing quantity leve data like 0,1,2...  
		--and (a.grid_article) = d.quantity_level
	where is_created_mp_rfq_quote_supplierquote = 1 -- and  b.rfq_quote_SupplierQuote_id is not null
	order by RFQID ,rfq_quote_SupplierQuote_id ,c.rfq_part_id


	update d set is_created_mp_rfq_quote_items = 1
	from 
		 mp_rfq_quote_items a
		join  mp_rfq_quote_supplierquote b on a.rfq_quote_SupplierQuote_id = b.rfq_quote_SupplierQuote_id
		join  mp_rfq_parts c on a.rfq_part_id = c.rfq_part_id
		join  tmp_ssis_legacy_qouted_rfq d on c.rfq_id = d.rfqid and  convert(varchar(100),c.part_id) = d.PMS_ITEM_ID and  b.contact_id =d.Supplier_Contact_id and  b.rfq_id = d.rfqid
		join   mp_rfq_part_quantity e on a.rfq_part_quantity_id = e.rfq_part_quantity_id and d.grid_article = e.quantity_level
	where is_created_mp_rfq_quote_supplierquote = 1


	-- insert into mp_rfq_supplier_nda_accepted
	insert into  mp_rfq_supplier_nda_accepted
	(rfq_id,contact_id,is_prefered_nda_type_accepted,prefered_nda_type_accepted_date)
	select 
		distinct rfqid , Supplier_Contact_id , is_prefered_nda_type_accepted , cast(cast(prefered_nda_type_accepted_date as varchar(23)) as datetime) 
	from  tmp_ssis_legacy_qouted_rfq where prefered_nda_type_accepted_date != 'null' and rfqid in  (select rfq_id from mp_rfq)

	update a set is_created_mp_rfq_supplier_nda_accepted = 1
	from 
		 tmp_ssis_legacy_qouted_rfq a
		join  mp_rfq_supplier_nda_accepted b on a.rfqid = b.rfq_id and a.Supplier_Contact_id = b.contact_id


	-- insert into mp_rfq_quote_suplierStatuses
	insert into  mp_rfq_quote_suplierStatuses
	(rfq_id,contact_id,rfq_userStatus_id,creation_date,is_legacy_data)
	select 
		distinct rfqid , Supplier_Contact_id ,  2 ,cast(cast(QuoteCreationDate as varchar(23)) as datetime)   , 1
	from  tmp_ssis_legacy_qouted_rfq
	where QuoteCreationDate != 'null'  and rfqid in  (select rfq_id from mp_rfq)
	
	insert into  mp_rfq_quote_suplierStatuses
	(rfq_id,contact_id,rfq_userStatus_id,creation_date,is_legacy_data)
	select distinct rfqid , Supplier_Contact_id ,  1 ,'1900-01-01'   , 1 
	from  tmp_ssis_legacy_qouted_rfq a
	left join mp_rfq_quote_suplierStatuses  b on a.rfqid = b.rfq_id and a.Supplier_Contact_id = b.contact_id
	where QuoteCreationDate = 'null'  and rfqid in  (select rfq_id from mp_rfq)  and b.rfq_id is null and  b.contact_id is null

	--select top 100 * from  tmp_ssis_legacy_qouted_rfq where QuoteCreationDate = 'null' and supplier_contact_id = 1251140

	
	update a set is_created_mp_rfq_quote_suplierStatuses = 1
	from 
		 tmp_ssis_legacy_qouted_rfq a
		join  mp_rfq_quote_suplierStatuses b on a.rfqid = b.rfq_id and a.Supplier_Contact_id = b.contact_id

	--select * from mp_rfq_parts where rfq_id = 996672
	--select * from mp_rfq_quote_supplierquote  where rfq_quote_SupplierQuote_id = 797 
	--select * from mp_rfq_quote_items where  rfq_quote_SupplierQuote_id = 797 
	--select * from mp_rfq_part_quantity where rfq_part_id = 87250
	--select * from tmp_ssis_legacy_qouted_rfq where  rfqid = 1000070  and Supplier_Contact_id = 987008
	--select top 10 * from mp_rfq_part_quantity where rfq_part_id = 79838

	
	--SET IDENTITY_INSERT mp_rfq  ON
	--insert into mp_rfq
	--(rfq_id,rfq_name,rfq_description,contact_id,rfq_created_on,rfq_status_id,is_special_certifications_by_manufacturer,is_special_instruction_to_manufacturer,special_instruction_to_manufacturer,importance_price,importance_speed,importance_quality,Quotes_needed_by,award_date,is_partial_quoting_allowed,Who_Pays_for_Shipping
	--,ship_to,is_register_supplier_quote_the_RFQ,pref_NDA_Type,Post_Production_Process_id,Imported_Data,sourcing_advisor_id,rfq_zoho_id,file_id)
	--select rfq_id,rfq_name,rfq_description,contact_id,rfq_created_on,rfq_status_id,is_special_certifications_by_manufacturer,is_special_instruction_to_manufacturer,special_instruction_to_manufacturer,importance_price,importance_speed,importance_quality,Quotes_needed_by,award_date,is_partial_quoting_allowed,Who_Pays_for_Shipping
	--,ship_to,is_register_supplier_quote_the_RFQ,pref_NDA_Type,Post_Production_Process_id,Imported_Data,sourcing_advisor_id,rfq_zoho_id,file_id 
	--from mp_rfq --where rfq_id in  (select distinct rfqid  from tmp_ssis_legacy_qouted_rfq -- where is_created_mp_rfq_quote_supplierquote = 1 
	-- --)
	--SET IDENTITY_INSERT mp_rfq  OFF
	
	
	--SET IDENTITY_INSERT mp_rfq_parts  ON
	--insert into mp_rfq_parts
	--(rfq_part_id,part_id,rfq_id,delivery_date,quantity_unit_id,status_id,part_category_id,created_date,modification_date,Post_Production_Process_id,Is_Rfq_Part_Default)
	--select rfq_part_id,part_id,rfq_id,delivery_date,quantity_unit_id,status_id,part_category_id,created_date,modification_date,Post_Production_Process_id,Is_Rfq_Part_Default from mp_rfq_parts --where rfq_id in  (select distinct rfqid  from tmp_ssis_legacy_qouted_rfq -- where is_created_mp_rfq_quote_supplierquote = 1 
	-- --)
	--SET IDENTITY_INSERT mp_rfq_parts  OFF

	
	--insert into mp_rfq_part_quantity
	--( rfq_part_id,part_qty,quantity_level)
	--select rfq_part_id,part_qty,quantity_level
	--from mp_rfq_part_quantity -- where rfq_part_id in  (select distinct rfq_part_id  from mp_rfq_parts -- where is_created_mp_rfq_quote_supplierquote = 1 
	-- --)
	



	
	--SET IDENTITY_INSERT mp_mst_rfq_UserStatus  ON
	--insert into mp_mst_rfq_UserStatus
	--(rfq_userStatus_id ,rfq_userstatus_Li_key,rfq_userstatus_description)
	--select rfq_userStatus_id ,rfq_userstatus_Li_key,rfq_userstatus_description from mp_mst_rfq_UserStatus 
	--SET IDENTITY_INSERT mp_mst_rfq_UserStatus  OFF
	


	-- select * from mp_rfq_quote_supplierquote where rfq_id = 1000018
END 


--select * from mp_rfq where  rfq_id = 1104075  

--select * from mp_rfq_parts where rfq_id = 1104075 
--select * from mp_parts where part_id  in (436494,436495)
--select * from mp_rfq_part_quantity where rfq_part_id in (102923,102924,102925)
--select * from mp_rfq_quote_supplierquote  where rfq_id = 1104075 
--select * from mp_rfq_quote_suplierStatuses where rfq_id = 1104075 and 	contact_id = 1256005
	

--select * from mp_parts where part_id  in (436494,436495)



--select rfq_id , part_id , count(*) from mp_rfq_parts
--group by  rfq_id , part_id having count(*) > 1





------ data verification
	--select * from mp_contacts where contact_id in  (1251140 , 1253444)
	--select * from aspnetusers where id in  ('{ABF43C80-6254-4F35-B435-6BBD661F5969}' , '{CDF7DEF9-B90B-4963-883A-4DCE615FE9F7}', '66dc8ac4-8ded-4d6e-9f0f-88c9be58c9b6','c2c413a0-1e1a-4daa-bb88-97e74d657b2f')
	

	--select top 1000 * from mp_rfq where contact_id = 1253444 order by rfq_created_on desc
	--select  * from tmp_SSIS_RFQ_Quote_data_1 
	--where 
	--	rfqid in (select rfq_id from mp_rfq where contact_id = 1253444 )
	--	and supplier_contact_id = 1251140
	--	and QuoteCreationDate != 'null' order by supplier_contact_id
	--select * from mp_rfq_parts where rfq_id = 1014294
	--select * from mp_rfq_quote_supplierquote  where rfq_id = 1084781 order by contact_id
	--select * from mp_rfq_part_quantity where rfq_part_id = 81004
	--select * from mp_rfq_quote_items where  rfq_part_id =  81004
	

	--select  * from tmp_SSIS_RFQ_Quote_data_1
	--order by rfqid
	--OFFSET 10001 ROWS
	--FETCH NEXT 20 ROWS ONLY

	
	--select count(*) is_created_mp_rfq_quote_supplierquote from tmp_ssis_legacy_qouted_rfq  where is_created_mp_rfq_quote_supplierquote = 1
	--select *  from tmp_ssis_legacy_qouted_rfq  where is_created_mp_rfq_quote_items = 1
	--select *  from tmp_ssis_legacy_qouted_rfq  where rfqid = 1088989
	--select count(*) is_created_mp_rfq_quote_suplierStatuses from tmp_ssis_legacy_qouted_rfq  where is_created_mp_rfq_quote_suplierStatuses = 1
	--is_created_mp_rfq_supplier_nda_accepted


--	tmp_SSIS_RFQ_Quote_data_1 *complete data*
--	mp_rfq_quote_supplierquote
--	mp_rfq_quote_items
--	mp_rfq_quote_suplierStatuses
--	mp_rfq_supplier_nda_accepted
GO
PRINT N'Altering Procedure [dbo].[proc_get_ApiResponses_set_NpsRating]...';


GO
  
    
  
  
  
    
-- =============================================  
  
-- Author:  dp-Al. L.  
  
-- Create date:  20/11/2018  
  
-- Description: Stored procedure to Get list of API responses from [mp_nps_api_responses] table based on [contact_id],   
    -- calculate Promoters, Passives, Detractors and NPS score for a particular survey,  
    -- and insert/update it back into [mp_nps_rating] table.  
  
-- Modification: - Shifting NPS calculation from Contact IDs to Company IDs (03 Jan 2018)..  
  
-- Syntax: [proc_get_ApiResponses_set_NpsRating] <CompanyId>  
  
-- Example: [proc_get_ApiResponses_set_NpsRating] 1   
  
-- =================================================================  
  
--Version No – Change Date – Modified By      – CR No – Note  
-- 2     03 Jan 2018 - dp-Al. L.      - Shifting NPS calculation from Contact IDs to Company IDs..  
  
-- =================================================================  
  
  
ALTER PROCEDURE [dbo].[proc_get_ApiResponses_set_NpsRating]    
  
 @CompanyId bigint  
  
AS  
  
BEGIN  
  
   
 declare @TotalResponsesCount int;  
    declare @TotalPromotersCount int;  
 declare @TotalPassivesCount int;  
 declare @TotalDetractorsCount int;  
 
 --Along with Child Responses... (Changed from using ContactID to CompanyID)  
 select @TotalResponsesCount = (select count(*) from mp_rating_responses WITH (NOLOCK) WHERE ((to_company_id = @CompanyId) or (parent_id in (select response_id from [mp_rating_responses] WITH (NOLOCK) where to_company_id = @CompanyId))))  
  
 select @TotalPromotersCount = (select count(*) from mp_rating_responses WITH (NOLOCK) WHERE ((to_company_id = @CompanyId) or (parent_id in (select response_id from [mp_rating_responses] WITH (NOLOCK) where to_company_id = @CompanyId))) and (score <= 10 and score >= 9))  
 select @TotalPassivesCount = (select count(*) from mp_rating_responses WITH (NOLOCK) WHERE ((to_company_id = @CompanyId) or (parent_id in (select response_id from [mp_rating_responses] WITH (NOLOCK) where to_company_id = @CompanyId))) and (score <= 8 and
 score >= 7))  
 select @TotalDetractorsCount = (select count(*) from mp_rating_responses WITH (NOLOCK) WHERE ((to_company_id = @CompanyId) or (parent_id in (select response_id from [mp_rating_responses] WITH (NOLOCK) where to_company_id = @CompanyId))) and (score >= 0 and score <= 6))  
  
    
 declare @PromotersPercentage decimal;  
 declare @PassivesPercentage decimal;  
 declare @DetractorsPercentage decimal;  
  
  
 select @PromotersPercentage =  (select((CONVERT(decimal, @TotalPromotersCount) / (CONVERT(decimal,@TotalResponsesCount))) * 100))  
 select @PassivesPercentage =  (select((CONVERT(decimal, @TotalPassivesCount) / (CONVERT(decimal,@TotalResponsesCount))) * 100))  
 select @DetractorsPercentage =  (select((CONVERT(decimal, @TotalDetractorsCount) / (CONVERT(decimal,@TotalResponsesCount))) * 100))  
  
 declare @NpsScore decimal;  
 set @NpsScore = @PromotersPercentage - @DetractorsPercentage;  
 
  
 --IF EXISTS (SELECT * FROM mp_nps_rating WHERE contact_id=@ContactId) --removed  
 IF EXISTS (SELECT * FROM mp_nps_rating WHERE company_id=@CompanyId)   --added  
    
  BEGIN  
      
   UPDATE [dbo].[mp_nps_rating]  
   SET [nps_score] = @NpsScore  
     ,[promoter_score] = @PromotersPercentage  
     ,[promoter_count] = @TotalPromotersCount  
     ,[passive_score] = @PassivesPercentage  
     ,[passive_count] = @TotalPassivesCount  
     ,[detractor_score] = @DetractorsPercentage  
     ,[detractor_count] = @TotalDetractorsCount  
     ,[total_responses] = @TotalResponsesCount  
   --WHERE contact_id=@ContactId  
     WHERE company_id=@CompanyId --modified  
  
  END  
  
 ELSE  
  
  BEGIN  
  
   INSERT INTO [dbo].[mp_nps_rating]  
       (  
       --[contact_id] --removed  
        [company_id]  --added  
       ,[nps_score]  
       ,[promoter_score]  
       ,[promoter_count]  
       ,[passive_score]  
       ,[passive_count]  
       ,[detractor_score]  
       ,[detractor_count]  
       ,[total_responses])  
    VALUES  
       (  
       --@ContactId --removed  
     @CompanyId  --added  
       ,@NpsScore  
       ,@PromotersPercentage  
       ,@TotalPromotersCount  
       ,@PassivesPercentage  
       ,@TotalPassivesCount  
       ,@DetractorsPercentage  
       ,@TotalDetractorsCount  
       ,@TotalResponsesCount)  
  
  END  
  
  
  
END
GO
PRINT N'Altering Procedure [dbo].[proc_get_ApiResponses_set_StarRating]...';


GO

ALTER procedure [dbo].[proc_get_ApiResponses_set_StarRating]	 

 @CompanyId int

as
begin
 
	declare @TotalResponsesCount int,@AvgScore decimal(18,2),@NoOfStars decimal(18,2);  	 

	select @TotalResponsesCount = 
		(select count(*) from mp_rating_responses with (nolock) where to_company_id = @CompanyId AND ( parent_id IS NULL  OR parent_id = 0 ))	  

	select @AvgScore = sum(coalesce(Score,0))/count(1) from  mp_rating_responses where to_company_id = @CompanyId AND ( parent_id IS NULL  OR parent_id = 0 )
		
	set @NoOfStars = @AvgScore;

	if exists (select * from mp_star_rating where company_id = @CompanyId)    		
	begin    
		update mp_star_rating
		set company_id = @CompanyId
			,no_of_stars = @NoOfStars
			,total_responses = @TotalResponsesCount			  
		where company_id= @CompanyId  
	end
	else
	begin
		insert into mp_star_rating
		(
			company_id,
			no_of_stars,
			total_responses
		)
		values
		(
			@CompanyId,
			@NoOfStars,					 
			@TotalResponsesCount
		)
	end

end
GO
PRINT N'Altering Procedure [dbo].[proc_get_basic_manufacturer_dashboard]...';


GO

ALTER PROCEDURE proc_get_basic_manufacturer_dashboard

	@CompanyId INT

AS
BEGIN
	
	select top 10* from mp_companies 

END
GO
PRINT N'Altering Procedure [dbo].[proc_get_buyer_award_warning]...';


GO


/*

EXEC proc_get_buyer_award_warning
@BuyerId = 1408671

*/
ALTER PROCEDURE [dbo].[proc_get_buyer_award_warning]
(
	@BuyerId	INT
)
AS
BEGIN

	SET NOCOUNT ON

	/*	M2-3326 Buyer - Warning drop down - DB */

	/*	Soel Yesterday at 10:20 PM (Aug 07, 2022)
		@Inderpreet Singh Kalsi
		can you disable the RFQ blocker for the supplychain@shapeways.com account.  They want to be able to post more RFQs without having to complete the award status requirements
	*/
	IF @BuyerId = 1408670
	BEGIN
		SELECT 
			COUNT( DISTINCT a.rfq_id ) AS TotalRFQs
			, COUNT( DISTINCT b.contact_id ) AS TotalSuppliersQuoted 
		FROM mp_rfq (NOLOCK) a
		JOIN mp_rfq_quote_SupplierQuote (NOLOCK) b ON a.rfq_id = b.rfq_id AND b.is_quote_submitted = 1 AND b.is_rfq_resubmitted = 0
		WHERE
			a.contact_id = 1
			AND a.rfq_status_id = 5
			AND DATEDIFF(DAY, CONVERT(DATE,a.award_date),CONVERT(DATE,GETUTCDATE())) >= 7
			AND CONVERT(DATE,a.rfq_created_on) > = '2020-08-01'
		GROUP BY a.contact_id HAVING COUNT( DISTINCT a.rfq_id )  >= 5 
		
	END
	/**/
	ELSE
	BEGIN
		SELECT 
			COUNT( DISTINCT a.rfq_id ) AS TotalRFQs
			, COUNT( DISTINCT b.contact_id ) AS TotalSuppliersQuoted
		FROM mp_rfq (NOLOCK) a
		JOIN mp_rfq_quote_SupplierQuote (NOLOCK) b ON a.rfq_id = b.rfq_id AND b.is_quote_submitted = 1 AND b.is_rfq_resubmitted = 0
		JOIN mp_contacts (NOLOCK) c ON a.contact_id = c.contact_id
		WHERE
			a.contact_id = @BuyerId
			AND 
			a.rfq_status_id = 5
			AND DATEDIFF(DAY, CONVERT(DATE,a.award_date),CONVERT(DATE,GETUTCDATE())) >= 7
			AND CONVERT(DATE,a.rfq_created_on) > = '2020-08-01'
			/* Soel - Dec 21, 2022 hey so it seems some legacy buyers are coming back to post RFQs but are being blocked by our RFQ Award limit.   Is there a way to do a report for buyers who have 5 or more RFQs that need to be set for award status and the buyer has logged in the last 30 days so we can handle that for them so we aren't blocking buyers?
			*/
			AND CONVERT(DATE,c.last_login_on) <= CONVERT(DATE,DATEADD(DAY,-30,GETUTCDATE()))
			/**/	
		GROUP BY a.contact_id ,CONVERT(DATE,c.last_login_on) HAVING COUNT( DISTINCT a.rfq_id )  >= 5
		
	END

END
GO
PRINT N'Altering Procedure [dbo].[proc_get_qms_fee_types]...';


GO
/*
exec  proc_get_qms_fee_types @supplier_company_id = 1768956 , @qms_quote_id = 66

*/
ALTER procedure [dbo].[proc_get_qms_fee_types]
(
	@supplier_company_id int	
	,@qms_quote_id int	
)
as
begin

	set nocount on
	/* M2-2045 M - QMS Step 2 - Add an Other selection to the Price list and allow the user to add their own label - DB*/
	
	
	select 
		qms_fee_type_id as QMSFeeTypeId 
		,fee_type as FeeType 
		, null IsDefault  
	from mp_mst_qms_fee_types (nolock) where qms_fee_type_id <> 1
	union
	select 
		qms_dynamic_fee_type_id as QMSFeeTypeId
		,fee_type as FeeType
		, case when is_default = 0 then cast('false' as bit) else cast('true' as bit)  end as IsDefault
	from mp_mst_qms_dynamic_fee_types (nolock) a 
	where supplier_company_id = @supplier_company_id and is_default = 1
	union 
	select distinct
		a.qms_dynamic_fee_type_id as QMSFeeTypeId
		,fee_type as FeeType
		, case when is_default = 0 then cast('false' as bit) else cast('true' as bit)  end as IsDefault
	from mp_mst_qms_dynamic_fee_types (nolock) a 
	join mp_qms_quote_feetype_mapping (nolock) b on 
		a.qms_dynamic_fee_type_id = b.qms_dynamic_fee_type_id 
		and b.qms_quote_id = @qms_quote_id
	where a.supplier_company_id = @supplier_company_id 
	order by qms_fee_type_id

end
GO
PRINT N'Altering Procedure [dbo].[proc_get_qms_my_invoices]...';


GO
/*

declare @totalrec int

exec proc_get_qms_my_invoices
@SupplierId			= 1337793 
, @SearchText		= null   -- InvoiceNo -- QuoteReferenceNo
, @IsOrderByDesc	= 'false'
, @OrderBy			= 'total' -- null , 'Customer' , 'Status' 
, @Customer_id		= null
, @Status			= null
, @pageno			= 1
, @pagesize			= 20
, @total_rec		= @totalrec output

select @totalrec

*/
ALTER procedure [dbo].[proc_get_qms_my_invoices]
(
	@SupplierId			int	
	,@SearchText		varchar(150)	= null
	,@IsOrderByDesc		bit		='true'
	,@OrderBy			varchar(100)	= null -- 'Customer' , 'Status'
	,@Customer_id		int = null
	,@Status			varchar(100)	= null
	,@pageno			int = 1
	,@pagesize			int = 25
	,@total_rec			int output
)
as
begin
		/*
		 =============================================
		 Create date: Nov 22,2019
		 Description: M2-2307 M - QMS - My Invoices tab and page - DB
		 Modification:
		 =================================================================
		*/
		set nocount on

		drop table if exists #tmp_qms_my_invoices
		
		if (@OrderBy is null or @OrderBy = '' )
			set @OrderBy  = 'invoice_id'

		select	
			a.invoice_no as InvoiceNo
			, e.first_name + ' ' +last_name as Customer
			, a.reference_no as QuoteReferenceNo 
			, g.status as Status
			, sum(case when d.fee_type_id = 1 then (c.part_qty *  d.value) else  d.value end) as AmountDue
			, a.qms_quote_invoice_id as QMSQuoteInvoiceId
			, a.qms_quote_id as QMSQuoteId
			, a.invoice_id as InvoiceId
			, a.qms_customer_id as QMSCustomerId
			, f.quote_id as QuoteId
			into #tmp_qms_my_invoices
		from mp_qms_quote_invoices						(nolock) a
		join mp_qms_quote_invoice_parts					(nolock) b on a.qms_quote_invoice_id = b.qms_quote_invoice_id and a.is_deleted = 0
		join mp_qms_quote_invoice_part_quantities		(nolock) c on b.qms_quote_invoice_part_id = c.qms_quote_invoice_part_id and c.is_deleted = 0
		left join mp_qms_quote_invoice_part_qty_fee_types	(nolock) d on c.qms_quote_invoice_part_qty_id = d.qms_quote_invoice_part_qty_id
		join mp_qms_contacts							(nolock) e on a.qms_customer_id = e.qms_contact_id
		join mp_qms_quotes								(nolock) f on a.qms_quote_id = f.qms_quote_id
		join mp_mst_qms_status							(nolock) g on a.status_id = g.qms_status_id
		where 
			 a.created_by = @SupplierId
			 and 
			 (
				 (a.invoice_no like '%'+@SearchText+'%')	
				 or	
				 (a.reference_no like '%'+@SearchText+'%')		
				 or
				 (@SearchText is null)
			 )
			 and a.qms_customer_id = (case when @Customer_id is null or @Customer_id ='0'  then a.qms_customer_id else @Customer_id end )
			 and g.status = (case when @Status is null or @Status = '' then g.status else @Status end ) 
		group by a.invoice_no ,e.first_name + ' ' +last_name ,a.reference_no,g.status, a.qms_quote_invoice_id, a.qms_quote_id ,a.invoice_id ,a.qms_customer_id,f.quote_id
		
		select @total_rec = count(1)  from #tmp_qms_my_invoices

		select 
			InvoiceNo	
			,Customer	
			,QuoteReferenceNo	
			,Status	
			,AmountDue	+ isnull(SpecialFeeAmt,0) as AmountDue
			,a.QMSQuoteInvoiceId	
			,QMSQuoteId	
			,InvoiceId	
			,QMSCustomerId	
			,QuoteId	

		from #tmp_qms_my_invoices a
		left join
		(
			select a.qms_quote_invoice_id as QMSQuoteInvoiceId, sum(h.value) SpecialFeeAmt
			from mp_qms_quote_invoices							(nolock) a
			join mp_qms_quote_invoice_parts						(nolock) b on a.qms_quote_invoice_id = b.qms_quote_invoice_id and a.is_deleted = 0
			left join mp_qms_quote_invoice_part_special_fees	(nolock) h on b.qms_quote_invoice_part_id = h.qms_quote_invoice_part_id
			where 
			 a.created_by = @SupplierId
			group by a.qms_quote_invoice_id 
		)  b on a.QMSQuoteInvoiceId = b.QMSQuoteInvoiceId
		order by 
				case   when @IsOrderByDesc =  1 and @OrderBy = 'invoice_id' then   convert(bigint,InvoiceNo) end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'Customer' then   Customer end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'Status' then   Status end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'quote_id' then   QMSQuoteId end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'total' then   AmountDue end desc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'invoice_id' then   convert(bigint,InvoiceNo) end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'Customer' then   Customer end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'Status' then   Status end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'quote_id' then   QMSQuoteId end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'total' then   AmountDue end asc
		offset @pagesize * (@pageno - 1) rows
		fetch next @pagesize rows only

end
GO
PRINT N'Altering Procedure [dbo].[proc_get_qms_process_material_postproduction]...';


GO
/*

declare @default_value int 
exec proc_get_qms_process_material_postproduction 
@get_type = 1 
, @supplier_company_id = 1768056  
,@supplier_id =  1337894 
, @defaultValue = @default_value output
select @default_value

*/
ALTER procedure [dbo].[proc_get_qms_process_material_postproduction]
(
	@get_type				smallint  -- 1 process -- 2 material -- 3 post production
	,@supplier_company_id	int
	,@supplier_id			int
	,@defaultValue			int output
	
)
as
begin

	/*  M2-2138 M - Create QMS - In the part drawer, make the process list a manual entry - DB*/

	set nocount on

	if @get_type = 1
	begin
	
		select b.qms_process_id as id , b.qms_process as value 
		,  case 
				when ((select count(1) from mp_qms_quote_parts (nolock) where  part_category_id = a.qms_process_id) = 0) then cast('true' as bit) 
				else cast('false' as bit) 
			end as IsRemovable
		from mp_qms_company_processes (nolock) a
		join mp_mst_qms_processes (nolock) b on a.qms_process_id = b.qms_process_id
		where 
			b.is_active  = 1 
			and a.supplier_company_id = @supplier_company_id
		union 
		select qms_process_id ,qms_process , cast('false' as bit) as IsRemovable from mp_mst_qms_processes where parent_id is not null
		order by value

	end
	else 	if @get_type = 2
	begin

		select b.qms_material_id as id , b.qms_material as value
			,  case 
				when ((select count(1) from mp_qms_quote_parts (nolock) where  material_id = a.qms_material_id) = 0) then cast('true' as bit) 
				else cast('false' as bit) 
			end as IsRemovable
		from mp_qms_company_materials (nolock) a
		join mp_mst_qms_materials (nolock) b on a.qms_material_id = b.qms_material_id
		where 
			b.is_active  = 1
			and a.supplier_company_id = @supplier_company_id
		union 
		select qms_material_id ,qms_material , cast('false' as bit) as IsRemovable from mp_mst_qms_materials where parent_id is not null
		order by value

	end
	else 	if @get_type = 3
	begin

		select b.qms_post_production_id as id , b.qms_post_production as value
		,  case 
				when ((select count(1) from mp_qms_quote_parts (nolock) where  post_production_id = a.qms_post_production_id) = 0) then cast('true' as bit) 
				else cast('false' as bit) 
			end as IsRemovable 
		from mp_qms_company_post_productions (nolock) a
		join mp_mst_qms_post_productions (nolock) b on a.qms_post_production_id = b.qms_post_production_id
		where 
			b.is_active  = 1 
			and a.supplier_company_id = @supplier_company_id
		union 
		select qms_post_production_id ,qms_post_production , cast('false' as bit) as IsRemovable from mp_mst_qms_post_productions where parent_id is not null
		order by value
	end

	set @defaultValue =  
	(		
			select default_value 
			from mp_qms_user_quote_settings (nolock)
			where contact_id = @supplier_id and qms_quote_setting_id = (case when @get_type = 1 then 1 when @get_type = 2 then 2  when @get_type = 3 then 3 end)
	)


end
GO
PRINT N'Altering Procedure [dbo].[proc_get_qms_quote_invoices]...';


GO

/*

exec proc_get_qms_quote_invoices
@supplier_id = 1337916 
,@qms_quote_id = 57

*/
ALTER procedure [dbo].[proc_get_qms_quote_invoices]
(
	@supplier_id int
	,@qms_quote_id int
)
as
begin
		/*
		 =============================================
		 Create date: Nov 22,2019
		 Description: M2-2304 M - Invoice tab - Invoices added to the list - DB
		 Modification:
		 =================================================================
		*/

		set nocount on

		select	
			a.qms_quote_invoice_id as QMSQuoteInvoiceId
			, a.qms_quote_id as QMSQuoteId
			, a.invoice_no as InvoiceNo
			, a.invoice_name as InvoiceName
			, convert(varchar(10) ,a.created_date,101) as InvoiceCreated
			, a.reference_no as QuoteReferenceNo
			, e.company as Customer
			, sum(case when d.fee_type_id = 1 then (c.part_qty *  d.value) else  d.value end) as AmountDue
			, a.status_id as StatusId
			, e.qms_contact_id as QmsContactId
		from mp_qms_quote_invoices						(nolock) a
		join mp_qms_quote_invoice_parts					(nolock) b on a.qms_quote_invoice_id = b.qms_quote_invoice_id
		join mp_qms_quote_invoice_part_quantities		(nolock) c on b.qms_quote_invoice_part_id = c.qms_quote_invoice_part_id and c.is_deleted = 0
		join mp_qms_quote_invoice_part_qty_fee_types	(nolock) d on c.qms_quote_invoice_part_qty_id = d.qms_quote_invoice_part_qty_id
		join mp_qms_contacts							(nolock) e on a.qms_customer_id = e.qms_contact_id
		where 
			a.qms_quote_id = @qms_quote_id
			and a.created_by = @supplier_id
			and a.is_deleted != 1 
		group by a.qms_quote_invoice_id,a.qms_quote_id, a.invoice_no, a.invoice_name  ,convert(varchar(10) ,a.created_date,101) , a.reference_no , a.status_id, e.company,e.qms_contact_id
		order by QMSQuoteInvoiceId , QMSQuoteId 
end
GO
PRINT N'Altering Procedure [dbo].[proc_get_qms_quotes_activity_status]...';


GO
ALTER PROCEDURE proc_get_qms_quotes_activity_status
@qms_quote_id int
AS
BEGIN
	set nocount on

	SELECT 
	case 
	when (select count(1) from  mp_qms_quote_activities (nolock) where qms_quote_id = @qms_quote_id and qms_quote_activity_id = 101) > 0 then cast('true' as bit) 
	else cast('false' as bit) 
	end as QuoteDowloaded
	, case 
	when (select count(1) from  mp_qms_quote_activities (nolock) where qms_quote_id = @qms_quote_id and qms_quote_activity_id = 102) > 0 then cast('true' as bit) 
	else cast('false' as bit) 
	end as QuoteSentToSelf
	, case 
	when (select count(1) from  mp_qms_quote_activities (nolock) where qms_quote_id = @qms_quote_id and qms_quote_activity_id = 103) > 0 then cast('true' as bit) 
	else cast('false' as bit) 
	end as QuoteSentToCustomer
END
GO
PRINT N'Altering Procedure [dbo].[proc_get_rfq_dropdownData]...';


GO

/*


 exec [proc_get_rfq_dropdownData] @Li_Abbr = 'EN'

*/
ALTER  PROCEDURE [dbo].[proc_get_rfq_dropdownData]( @Li_Abbr varchar(2) = 'EN')

AS
BEGIN
	SET NOCOUNT ON

	/*-- =============================================
	-- Create date: 05 Sep, 2018
	-- Description:	This Procedure will be used in rfq part creation and will return the list of data like
	-- Modified:  12 Aug, 2020
	-- Description: M2-3177 Parent and Children changes - DB
	*/
	

	;WITH Capabilities_Parents AS
	(
		SELECT part_category_id ,discipline_name ,level , parent_part_category_id  , ShowPartSizingComponent , ShowQuestionsOnPartDrawer , SortOrder FROM mp_mst_part_category  (NOLOCK) WHERE status_id =  2 AND level = 0
	) , 
	Capabilities_Childs AS
	(
		SELECT part_category_id ,discipline_name ,level , parent_part_category_id  FROM mp_mst_part_category  (NOLOCK) WHERE status_id =  2 AND level = 1
	)
	SELECT 
		--(CASE WHEN p.discipline_name = c.discipline_name THEN  c.part_category_id ELSE p.part_category_id END) 		AS Parent_discipline_id	
		--, (CASE WHEN p.discipline_name = c.discipline_name THEN  c.discipline_name ELSE p.discipline_name END) 		AS Parent_discipline_name	
		--, (CASE WHEN p.discipline_name = c.discipline_name THEN  c.part_category_id ELSE c.part_category_id END)  	AS Child_discipline_id	
		--, (CASE WHEN p.discipline_name = c.discipline_name THEN  NULL ELSE c.discipline_name END) 	 		AS Child_discipline_name	
		--, (CASE WHEN p.discipline_name = c.discipline_name THEN  0 ELSE c.level END)   AS level
		--, p.level AS plevel
		p.part_category_id		AS Parent_discipline_id	
		, p.discipline_name		AS Parent_discipline_name	
		, c.part_category_id	AS Child_discipline_id	
		, c.discipline_name		AS Child_discipline_name	
		, c.level 
		, p.level AS plevel
		, p.ShowPartSizingComponent 
		, p.ShowQuestionsOnPartDrawer
		, p.SortOrder
	FROM Capabilities_Parents p
	LEFT JOIN Capabilities_Childs c ON p.part_category_id = c.parent_part_category_id
	ORDER BY 
		--(CASE WHEN p.discipline_name = 'Contact an Engineer' THEN 'Z'+p.discipline_name ELSE p.discipline_name END)
		--,c.discipline_name
		 p.SortOrder 

END
GO
PRINT N'Altering Procedure [dbo].[proc_get_role_entitlements]...';


GO

/*

EXEC proc_get_role_entitlements @Role = 'Super Admin'
EXEC proc_get_role_entitlements @Role = 'Admin'
EXEC proc_get_role_entitlements @Role = 'Engineer'
EXEC proc_get_role_entitlements @Role = 'User'
*/
ALTER PROCEDURE [dbo].[proc_get_role_entitlements]
(
	@Role VARCHAR(150)
)
AS
BEGIN

	SET NOCOUNT ON 
	/*  M2-2859 Vision - Add User Management to the profile drop down menu and a new page - DB */

	SELECT 
		a.Id			AS	EntitlementId
		,c.Id			AS	ElementId
		,c.Element		AS	Element
		,c.[Key]		AS	ElementKey
		,b.Id			AS	PrivilageId
		,b.PrivilegeTo	AS	Privilage
		,b.[Key]			AS	PrivilageKey
		,(CASE WHEN a.DefaultValue	= 1 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END) AS EntitlementValue
	FROM mp_Entitlements		a (NOLOCK)
	JOIN mp_mst_Privilages		b (NOLOCK) ON a.PrivilegeID = b.Id
	JOIN mp_mst_PermissionFor	c (NOLOCK) ON b.ElementID = c.Id
	JOIN aspnetroles			d (NOLOCK) ON a.RoleID = d.Id
	WHERE d.Name = @Role
	ORDER BY c.Id , b.Id

END
GO
PRINT N'Altering Procedure [dbo].[proc_get_spotlight_processlist]...';


GO
-----------------------------------------------------------------------------------------------------
/*
EXEC proc_get_spotlight_processlist  @CompanyId =0
EXEC proc_get_spotlight_processlist  @CompanyId =1
*/
--exec [proc_get_spotlight_processlist] @Li_Abbr = 'EN' , @CompanyId =0
/*
EXEC proc_get_spotlight_processlist  @CompanyId =0
EXEC proc_get_spotlight_processlist  @CompanyId =1
*/
--exec [proc_get_spotlight_processlist] @Li_Abbr = 'EN' , @CompanyId =0
ALTER  procedure [dbo].[proc_get_spotlight_processlist] (@Li_Abbr varchar(2) = 'EN' , @CompanyId int)

/*
-- ===================================================================================================================
-- Create date: 09 Jul, 2019
-- Description:	M2-1777 Change the process selector in Discover M and Vision Spotlight to include top level process-DB
-- ===================================================================================================================
*/
AS
BEGIN

	SET NOCOUNT ON
	
	IF @CompanyId > 0 
	BEGIN

		;WITH Capabilities_Parents AS
		(
			SELECT part_category_id ,discipline_name ,level , parent_part_category_id  FROM mp_mst_part_category  (NOLOCK) WHERE status_id in (2) AND level = 0
		) , 
		Capabilities_Childs AS
		(
			SELECT part_category_id ,discipline_name ,level , parent_part_category_id  FROM mp_mst_part_category  (NOLOCK) WHERE status_id in (2) AND level = 1
		)
		SELECT DISTINCT
		a.Parent_discipline_id 	AS Parent_discipline_id	
			, a.Parent_discipline_name AS Parent_discipline_name	
			, NULL  AS Child_discipline_id 	
			, NULL	AS Child_discipline_name	
			, 0 AS [Level] 
		FROM
		(
		SELECT
			p.part_category_id		AS Parent_discipline_id	
			, p.discipline_name	AS Parent_discipline_name	
			, c.part_category_id	AS Child_discipline_id	
			, c.discipline_name		AS Child_discipline_name	
			, c.level  AS [Level]
			--, p.level AS plevel
			FROM Capabilities_Parents p
		LEFT JOIN Capabilities_Childs c					ON p.part_category_id = c.parent_part_category_id
		JOIN mp_company_processes	  MCP	(NOLOCK)	ON c.part_category_id=MCP.part_category_id
		AND MCP.company_id=  @CompanyId 
				AND p.discipline_name NOT IN ('Contact an Engineer')

		)a

	END
	ELSE
	BEGIN

		SELECT DISTINCT
			part_category_id AS Parent_discipline_id	
			, discipline_name  AS Parent_discipline_name	
			, NULL  AS Child_discipline_id 	
			, NULL	AS Child_discipline_name	
			, 0   AS [Level] 
			--, p.level AS pleve
			FROM mp_mst_part_category  (NOLOCK) 
			WHERE status_id =  2 AND level = 0
			AND discipline_name NOT IN ('Contact an Engineer')

--	DROP TABLE IF EXISTS #1

	END
END
GO
PRINT N'Altering Procedure [dbo].[proc_get_supplier_capabilities]...';


GO

/*

EXEC proc_get_supplier_capabilities @supplier_company_id = 1768939 ,  @type = 'Profile'
EXEC proc_get_supplier_capabilities @supplier_company_id = 1768939 ,  @type = 'RFQSearch'
*/
ALTER PROCEDURE [dbo].[proc_get_supplier_capabilities]
(
	@supplier_company_id	INT
	,@type					VARCHAR(50) = NULL
)
AS
BEGIN
	
	SET NOCOUNT ON
	/* M2-3209 Capabiities (Parent & Child) changes - DB */


	SELECT 
		CompanyId
		, (CASE WHEN a.ParentCapability = a.ChildCapability THEN  ChildCapabilityId ELSE ParentCapabilityId END) 	AS ParentCapabilityId	
		, (CASE WHEN a.ParentCapability = a.ChildCapability THEN  ChildCapability ELSE ParentCapability END) 		AS ParentCapability	
		, (CASE WHEN a.ParentCapability = a.ChildCapability THEN  NULL ELSE ChildCapabilityId END)  ChildCapabilityId 	
		, (CASE WHEN a.ParentCapability = a.ChildCapability THEN  NULL ELSE ChildCapability END) 	 		AS ChildCapability	
		, (CASE WHEN a.ParentCapability = a.ChildCapability THEN  0 ELSE [Level] END)   AS [Level]
	FROM
	(
		SELECT DISTINCT  
			MCP.company_id				AS CompanyId,  
			Parent_PC.part_category_id	AS ParentCapabilityId  
		  , Parent_PC.discipline_name	AS ParentCapability  
		  , Child_PC.Part_category_id	AS ChildCapabilityId  
		  , Child_PC.discipline_name	AS ChildCapability  
		  , Child_PC.level				AS [Level]
		 FROM   
		  mp_mst_part_category				Child_PC	(NOLOCK) 
		  LEFT JOIN mp_mst_part_category	Parent_PC	(NOLOCK)  ON Child_PC.parent_part_category_id = Parent_PC.part_category_id  
		  JOIN mp_company_processes			MCP			(NOLOCK)  ON Child_PC.part_category_id=MCP.part_category_id  
		 WHERE    
			 MCP.company_id= @supplier_company_id  
			 and Child_PC.status_id IN (2,4)   
			 and Parent_PC.status_id IN (2,4)  
		 UNION
		 SELECT DISTINCT  
			SCP.company_id				AS CompanyId,  
			Parent_PC.part_category_id	AS ParentCapabilityId  
		  , Parent_PC.discipline_name	AS ParentCapability  
		  , Child_PC.Part_category_id	AS ChildCapabilityId  
		  , Child_PC.discipline_name	AS ChildCapability  
		  , Child_PC.level				AS [Level]
		 FROM   
		  mp_mst_part_category				Child_PC	(NOLOCK) 
		  LEFT JOIN mp_mst_part_category	Parent_PC	(NOLOCK)  ON Child_PC.parent_part_category_id = Parent_PC.part_category_id  
		  JOIN mp_gateway_subscription_company_processes	SCP			(NOLOCK)  ON Child_PC.part_category_id=SCP.part_category_id  
		 WHERE    
			 SCP.company_id= (CASE WHEN @type = 'Profile' THEN -1 WHEN @type = 'RFQSearch' THEN @supplier_company_id END )  
			 and Child_PC.status_id IN(2,4)   
			 and Parent_PC.status_id IN(2,4)  
	) a
	ORDER BY ParentCapability, ChildCapability  

END
GO
PRINT N'Altering Procedure [dbo].[proc_get_update_CompanyAccount_Zoho_Id]...';


GO

-- =============================================
-- Author:		<Allwin Lewis>
-- Create date: <16 Apr 2020>
-- Description:	<Stored Procedure for Fetching the Company/Account Zoho ID from first in MFG Db then in the Zoho DB.>
-- =============================================
ALTER PROCEDURE [dbo].[proc_get_update_CompanyAccount_Zoho_Id]
	-- Add the parameters for the stored procedure here
	@CompanyId INT

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	DECLARE @Company_Zoho_Id varchar(200)

	----Extract Company Zoho ID from the MFG DB
	SELECT @Company_Zoho_Id = [company_zoho_id] from [dbo].[mp_companies] comp where comp.company_id = @CompanyId

	IF (LTRIM(RTRIM(ISNULL(@Company_Zoho_Id,''))) = '' or LTRIM(RTRIM(@Company_Zoho_Id)) = '0')
		BEGIN	

		----Extract Company Zoho ID from the Zoho DB
		SELECT @Company_Zoho_Id = zca.Zoho_id from [dbo].[mp_companies] comp 
		LEFT JOIN Zoho..[zoho_company_account] zca
		on comp.[company_id] = zca.VisionACCTID
		
		where comp.company_id = @CompanyId and zca.SyncType = 1

		----Update the Extracted Company Zoho ID from the Zoho DB into the MFG DB.
		Update mp_companies SET  [company_zoho_id] = @Company_Zoho_Id where company_id  = @CompanyId;

		END



	Select @Company_Zoho_Id -- return back the Extracted Company/Account Zoho ID.


	
END
GO
PRINT N'Altering Procedure [dbo].[proc_get_XML_SupplierProfile]...';


GO

/*


DECLARE @XMLSupplierProfile XML;

EXEC proc_get_XML_SupplierProfile
    @PageNumber = 1,
	@PageSize = 5000,
    @XMLOutSupplierProfile = @XMLSupplierProfile OUTPUT;

SELECT @XMLSupplierProfile AS 'SupplierProfileXML';
UPDATE XML_SupplierProfile SET isincludedinxml = 0

SELECT * FROM MP_MST_GEOCODE_DATA WHERE ZIPCODE= '45345'
*/
ALTER PROCEDURE [dbo].[proc_get_XML_SupplierProfile]
(
@PageNumber					INT		= 1
,@PageSize					INT		= 1000
,@XMLOutSupplierProfile		XML OUTPUT	
)
AS
BEGIN
	--M2-3466 Supplier profile XML file generation

	SET NOCOUNT ON

	DROP TABLE IF EXISTS #tmpXMLSupplierProfile
	
	

	SELECT 
		[3dshopview]
		,address
		,avatar
		,banner
		,cagecode
		,capabilities
		,certifications
		,date_established
		,description
		,duns
		--,email
		,employees
		,equipment
		--,first_name
		--,last_name
		,company_id as id
		,gallery
		,industries
		,languages
		,location_manufacturing
		--,marketplaces
		,mfgverified
		,name
		,tier
		,phone
		,owner
		,reviews
		,publicprofile as slug
		,[source]
		,type
		,website
	INTO #tmpXMLSupplierProfile
	FROM XML_SupplierProfile (NOLOCK)
	WHERE isprocessed = 1 AND isincludedinxml =0
	ORDER BY [date_established] DESC
	OFFSET @PageSize * (@PageNumber - 1) ROWS
	FETCH NEXT @PageSize ROWS ONLY
	
	--SELECT * FROM #tmpXMLSupplierProfile
	
	SET @XMLOutSupplierProfile = 
	(
		SELECT 
			[3dshopview] shopview3d
			,address
			,avatar
			,banner
			,cagecode
			,capabilities
			,certifications
			,date_established
			,description
			,duns
			--,email
			,employees
			,equipment
			--,first_name
			--,last_name
			,id
			,gallery
			,industries
			,languages
			,location_manufacturing
			--,marketplaces
			,mfgverified
			,name
			,tier
			,phone
			,owner
			,reviews
			,slug
			,[source]
			,type
			,website
		FROM  #tmpXMLSupplierProfile
		FOR XML PATH('manufacturer'), ROOT('root'),ELEMENTS
	)


	UPDATE XML_SupplierProfile SET isincludedinxml = 1 , includeddate = GETUTCDATE() WHERE company_id IN (SELECT id FROM #tmpXMLSupplierProfile)

END
GO
PRINT N'Altering Procedure [dbo].[proc_set_cleanup_tables]...';


GO
ALTER PROCEDURE [dbo].[proc_set_cleanup_tables]
AS
BEGIN

	/* M2-2819 SQL Job for cleaning unwanted data from tables - DB */

	
	DECLARE @TableName NVARCHAR(500);
	DECLARE @SQLIndex NVARCHAR(MAX);
	DECLARE @SQLStatisticstaIndex NVARCHAR(MAX);
	DECLARE @RowCount INT;
	DECLARE @Counter INT;

	DECLARE @IndexAnalysis TABLE
	(
		AnalysisID INT IDENTITY(1, 1) NOT NULL    PRIMARY KEY ,
		TableName NVARCHAR(500) ,
		SQLText NVARCHAR(MAX) ,
		UpdateStatisticsText NVARCHAR(MAX) ,
		AvgFragmentationInPercent FLOAT 		
	)

	-- cleanup data history table 
	DELETE FROM mp_data_history WHERE CONVERT(DATE,creation_date) = CONVERT(DATE,GETUTCDATE()-1) AND is_processed = 0
	
	-- cleanup email table 
	UPDATE mp_email_messages SET email_message_descr = '' 
	WHERE CONVERT(DATE,email_message_date) = CONVERT(DATE,GETUTCDATE()-1) AND message_sent = 1

	-- weekly maintanance 
	IF FORMAT(GETUTCDATE(),'dddd') = 'Sunday'
	BEGIN

		INSERT  INTO @IndexAnalysis
		SELECT  
			T.name 
			, 'ALTER INDEX [' + I.name + '] ON ['+ S.name + '].[' + T.name + '] ' + 'REORGANIZE' AS  frag_script 
			, 'UPDATE STATISTICS ['+ S.name + '].[' + T.name + '] '  AS  statistics_script 
			, DDIPS.avg_fragmentation_in_percent		AS  fragmentation_in_percent
		FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL, NULL, NULL) AS DDIPS
		INNER JOIN sys.tables T on T.object_id = DDIPS.object_id
		INNER JOIN sys.schemas S on T.schema_id = S.schema_id
		INNER JOIN sys.indexes I ON I.object_id = DDIPS.object_id
		AND DDIPS.index_id = I.index_id
		WHERE DDIPS.database_id = DB_ID()
		and I.name is not null
		AND DDIPS.avg_fragmentation_in_percent > 0
		ORDER BY fragmentation_in_percent DESC

		SELECT  @RowCount = COUNT(AnalysisID)
		FROM    @IndexAnalysis

		SET @Counter = 1
		WHILE @Counter <= @RowCount 
		BEGIN

			SELECT  
				@SQLIndex = SQLText 
				, @SQLStatisticstaIndex = UpdateStatisticsText
			FROM    @IndexAnalysis
			WHERE   AnalysisID = @Counter

			EXECUTE sp_executesql @SQLIndex

			SET @Counter = @Counter + 1

		END

	END


	

END
GO
PRINT N'Altering Procedure [dbo].[proc_set_CompanyProfileVideos]...';


GO


/*
TRUNCATE TABLE mpUserProfileVideoLinks

select * from mpUserProfileVideoLinks order by 1 desc

--SELECT * FROM mp_contacts where contact_id  = 1338129

exec proc_set_CompanyProfileVideos
	@ProfileVideoLinksId		=	4
	,@CompanyId					=   1768233
	,@ContactId					=   1338129
	,@Title						=   'T5'
	,@Description				=	'D5'
	,@VideoLink					=	'https://people.zoho.com/delaplex/zp#timetracker/timelogs/listview5'

select top 5 * from mpUserProfileVideoLinks order by 1 desc
select top 5 * from XML_SupplierProfileCaptureChanges order by 1 desc

*/
ALTER PROCEDURE proc_set_CompanyProfileVideos
(
	@ProfileVideoLinksId		INT
	,@CompanyId					INT
	,@ContactId					INT
	,@Title						VARCHAR(250)
	,@Description				VARCHAR(500)
	,@VideoLink					NVARCHAR(4000) 
)
AS
BEGIN

	-- M2-4549 M - Add the ability to add large videos to the profile - DB

	DECLARE @OldVideoLink	AS NVARCHAR(4000) = '' 

	SELECT @OldVideoLink = ISNULL(VideoLink,'') FROM mpUserProfileVideoLinks (NOLOCK) WHERE Id = @ProfileVideoLinksId

	BEGIN TRY
		IF ISNULL(@VideoLink,'') =  ISNULL(@OldVideoLink,'')
		BEGIN

			UPDATE  mpUserProfileVideoLinks 
			SET
				Title = @Title
				,[Description] = @Description
			WHERE Id = @ProfileVideoLinksId

		END
		ELSE
		BEGIN

			UPDATE  mpUserProfileVideoLinks 
			SET
				IsDeleted = 1
				,DeletedOn = GETUTCDATE()	
				,DeletedBy = @ContactId
			WHERE Id = @ProfileVideoLinksId

			INSERT INTO mpUserProfileVideoLinks (CompanyId ,	ContactId,	Title	,VideoLink	,Description,	IsDeleted , CreatedOn)
			SELECT @CompanyId ,  @ContactId , @Title , @VideoLink , @Description ,  0 , GETUTCDATE()

			INSERT INTO XML_SupplierProfileCaptureChanges (CompanyId , Event ,  CreatedOn , CreatedBy)
			SELECT @CompanyId , 'video_updated'  , GETUTCDATE() , @ContactId

		END

		SELECT TransactionStatus  = 'Success'
	END TRY
	BEGIN CATCH

		ROLLBACK
		SELECT TransactionStatus  = 'Failure'

	END CATCH


END
GO
PRINT N'Altering Procedure [dbo].[proc_set_email_notification_sent_flag]...';


GO

/*
declare @tbl_email_notification_sentflag tbl_email_notification_sentflag
insert into @tbl_email_notification_sentflag values(1)

exec proc_set_email_notification_sent_flag @tbl_email_notification_sentflag 


select * from mp_email_messages a
*/

ALTER procedure [dbo].[proc_set_email_notification_sent_flag]
(
@tbl_email_notification_sentflag tbl_email_notification_sentflag READONLY
)
as
begin
	declare @record_count int = 0

	begin try
		
		update a set a.message_sent = 1 , email_message_descr = null
		from mp_email_messages a
		join @tbl_email_notification_sentflag b on a.email_message_id = b.email_message_id
		set @record_count = @@rowcount

		if @record_count = (select count(*) from @tbl_email_notification_sentflag )
			select 'SUCCESS' processStatus
		else
			select 'FAILURE'  processStatus
	end try
	begin catch
		select 'FAILURE: '+ error_message()  processStatus
	end catch


end
GO
PRINT N'Altering Procedure [dbo].[proc_set_message_threads_to_unread]...';


GO

/*
EXEC [proc_set_message_threads_to_unread] @MessageId =19193161
*/
ALTER PROCEDURE [dbo].[proc_set_message_threads_to_unread]
(
	@MessageId INT
)
AS
BEGIN

	SET NOCOUNT ON 
	
	
	DECLARE @FromCont			INT
	DECLARE @ToCont				INT
	DECLARE @MessageTypeId		INT
	DECLARE @MessageSubject		NVARCHAR(2000)
	DECLARE @MessageMinId		INT
	DECLARE @MessageMaxId		INT


	DROP TABLE IF EXISTS #tmp_messages 

	/* Nov 16 2021 - We are comment below code as there is no need of this sp. We will check the functionality after Sprint 6.4 release and if all seems look good then we will remove it from application  */
	--SELECT 
	--	@FromCont			= from_cont
	--	,@ToCont			= to_cont
	--	,@MessageTypeId		= message_type_id
	--	,@MessageSubject	= message_subject
	--FROM mp_messages (NOLOCK)
	--WHERE message_id = @MessageId


	----SELECT *
	----FROM mp_messages  (NOLOCK)
	----WHERE message_subject = @MessageSubject
	------AND message_type_id = @MessageTypeId
	----AND to_cont = @ToCont
	----AND from_cont = @FromCont
	----UNION
	----SELECT *
	----FROM mp_messages  (NOLOCK)
	----WHERE message_subject = @MessageSubject
	------AND message_type_id = @MessageTypeId
	----AND to_cont = @FromCont 
	----AND from_cont = @ToCont


	--SELECT message_id INTO #tmp_messages
	--FROM mp_messages  (NOLOCK)
	--WHERE message_subject = @MessageSubject
	----AND message_type_id = @MessageTypeId
	--AND to_cont = @ToCont
	--AND from_cont = @FromCont
	--UNION
	--SELECT message_id
	--FROM mp_messages  (NOLOCK)
	--WHERE message_subject = @MessageSubject
	----AND message_type_id = @MessageTypeId
	--AND to_cont = @FromCont 
	--AND from_cont = @ToCont
	
	--SELECT 
	--	@MessageMinId = MIN(message_id)
	--	,@MessageMaxId = MAX(message_id)
	--FROM #tmp_messages

	--UPDATE mp_messages SET message_read = 0 WHERE message_id in (@MessageMinId,@MessageMaxId)

	--DROP TABLE IF EXISTS #tmp_messages 

END
GO
PRINT N'Altering Procedure [dbo].[proc_set_organize_files]...';


GO

/*

declare @p28 dbo.tbltype_ListOfFileIds
insert into @p28 values (363856) ,(363854) ,(363855)

exec proc_set_organize_files @FileIds =@p28 
*/
ALTER procedure proc_set_organize_files
(
	@FileIds	as tbltype_ListOfFileIds	readonly
)
as
begin

	/*
	===============================================================================================
	Create date:	Nov 19,2019
	Description:	M2-2294 Supplier Profile - Add ability to organize and set photo order & show 
					labels in gallery (if label exists) - DB 					
	Modification:		 
	===============================================================================================
	*/

	declare @transaction_status			varchar(500) = 'Failed'

	begin tran
	begin try
			
		update a set a.sort_order = b.row_no
		from mp_special_files a  (nolock) 
		join
		(
			select FileId as file_id , row_number() over(order by (select 0)) as row_no from @FileIds
		) b on a.file_id = b.file_id
	
		commit

		set @transaction_status = 'Success'
		select @transaction_status TransactionStatus
	
	end try
	begin catch

		rollback

		set @transaction_status = 'Failed - ' + error_message()
		select @transaction_status TransactionStatus 

	end catch
	
end
GO
PRINT N'Altering Procedure [dbo].[proc_set_qms_contacts]...';


GO
/*

declare @p2 dbo.tbltype_ImportQMSContacts
insert into @p2 values(N'
tests',N'Last name',N'city',N'eee@hhh.co',N'455',N'fgfgf',N'fisrt name',N'ss',N'ccccc',N'22332')
insert into @p2 values(N'
tytyt',N'Last name',N'city',N'hggf@hhh.com',N'423',N'45',N'first name',N'fg',N'trrtr',N'654654')


exec proc_set_qms_contacts @SupplierId=1337894,@QMSContacts=@p2

*/

------------------------------------------------------------------------------------------------------
ALTER procedure [dbo].[proc_set_qms_contacts]
(
	@SupplierId		int
	,@QMSContacts	as tbltype_ImportQMSContacts			readonly
	
)
as
begin
	/*
		Jan 28, 2020 - M2-2587 M - My Customers - Upload CSV Step 2 - Mapping- DB
	*/
		
	declare @transaction_status		varchar(500) = 'Failed'
	declare @created_date			datetime = getutcdate()
	declare @ImportCount			int  = 0

	begin tran
	begin try

		insert into mp_qms_contacts
		(supplier_id,company,first_name,last_name,email,phone,address
		,city,state,country,zip_code,state_id,country_id,is_import,created_date)
		select 
			@SupplierId SupplierId , a.*  , c.region_id state_id , b.country_id 
			, 1 is_import ,@created_date 
		from @QMSContacts a
		left join mp_mst_country (nolock) b on ltrim(rtrim(a.country)) = b.country_name
		left join mp_mst_region (nolock) c on ltrim(rtrim(a.state)) = c.region_name
		set @ImportCount = @@ROWCOUNT

		commit

		set @transaction_status = 'Success' 
		select @transaction_status TransactionStatus , @ImportCount as ImportCount

	end try
	begin catch
		rollback
		
		set @transaction_status = 'Failed - ' + error_message()
		select @transaction_status TransactionStatus , 0 as ImportCount

	end catch


end
GO
PRINT N'Altering Procedure [dbo].[proc_set_qms_quote_invoice_basic_info]...';


GO
/*
declare @QMSQuoteInvoiceId1 int

exec proc_set_qms_quote_invoice_basic_info
	@QMSQuoteId				=3176
	,@SupplierId			=3176
	,@CustomerId			=1064
	,@ReferenceNo			='1064'
	,@InvoiceName			='1064'
	,@InvoiceNo				='1064'
	,@InvoiceDate			= getdateutc()
	,@CurrencyId			= 2
	,@PurchaseOrderNo		=1064
	,@PaymentTermId			=20
	,@StatusID				=21
	,@Notes					='1064'
	,@QMSQuoteInvoiceId		=@QMSQuoteInvoiceId1  output

select @QMSQuoteInvoiceId1

*/

ALTER proc proc_set_qms_quote_invoice_basic_info
(
	@QMSQuoteId				int
	,@SupplierId			int
	,@CustomerId			int
	,@ReferenceNo			nvarchar(300)
	,@InvoiceName			nvarchar(500)
	,@InvoiceNo				varchar(150)
	,@InvoiceDate			datetime
	,@CurrencyId			int
	,@PurchaseOrderNo		int
	,@PaymentTermId			int = null
	,@StatusID				int
	,@Notes					nvarchar(4000)
	,@QMSQuoteInvoiceId		int output
)
as
begin

	/* Dec 12 M2-2421 M - Invoice tab - Update Other Quantity selection -DB */

	declare @TransactionStatus		varchar(500) = 'Failed'
	
	begin tran
	begin try

		
		insert into mp_qms_quote_invoices
		(qms_quote_id, qms_customer_id, invoice_no, invoice_name, purchase_order_number, reference_no
		,currency_id ,invoice_date ,payment_term_id ,status_id ,notes ,created_by ,created_date)
		values 
		(@QMSQuoteId ,@CustomerId ,@InvoiceNo ,@InvoiceName ,@PurchaseOrderNo ,@ReferenceNo
		,@CurrencyId ,@InvoiceDate ,@PaymentTermId ,@StatusID ,@Notes ,@SupplierId ,GETUTCDATE()
		)
		set @QMSQuoteInvoiceId = @@IDENTITY


		commit

		set @TransactionStatus = 'Success'
		select @TransactionStatus TransactionStatus 

	end try
	begin catch
		rollback

		set @TransactionStatus = 'Failed - ' + error_message()
		select @TransactionStatus TransactionStatus 

	end catch


end
GO
PRINT N'Altering Procedure [dbo].[proc_set_qms_quote_invoice_part_info]...';


GO
/*

declare @p27 dbo.tbltype_QMSQuoteInvoicePartQTYWithFeeTypeValues

insert into  @p27 values(101,100.5864),(102,29.5864),(103,39.5864),(104,44044488.5864),(105,59.5864)
--select * from @p27
exec proc_set_qms_quote_invoice_part_info
	@QMSQuoteInvoiceId		=1
	,@QMSQuotePartId		=1
	,@QTYLevel				=0
	,@PartQTY				= 11
	,@UnitId				= 14
	,@FeeTypeValues			= @p27
*/

ALTER proc [dbo].[proc_set_qms_quote_invoice_part_info]
(
	@QMSQuoteInvoiceId		int
	,@QMSQuotePartId		int
	,@QTYLevel				smallint
	,@PartQTY				numeric(18, 0) =  null
	,@UnitId				int =  null
	,@IsPartOfInvoice		bit
	,@FeeTypeValues			as tbltype_QMSQuoteInvoicePartQTYWithFeeTypeValues			readonly
)
as
begin

	/* Dec 12 M2-2421 M - Invoice tab - Update Other Quantity selection -DB */

	declare @TransactionStatus				varchar(500) = 'Failed'
	declare @qms_quote_invoice_part_id		int
	declare @qms_quote_invoice_part_qty_id	int
	
	drop table if exists #qms_quote_invoice

	begin tran
	begin try
	
		--select  * from mp_qms_quote_invoices 
		--delete from mp_qms_quote_invoice_part_qty_fee_types where qms_quote_invoice_part_qty_id in 
		--(
		--	select qms_quote_invoice_part_qty_id from 
		--	mp_qms_quote_invoice_part_quantities (nolock) a
		--	join mp_qms_quote_invoice_parts (nolock) b on a.qms_quote_invoice_part_id = b.qms_quote_invoice_part_id
		--	--join mp_qms_quote_invoices		(nolock) c on b.qms_quote_invoice_id = c.qms_quote_invoice_id
		--	where b.qms_quote_invoice_id  =  @QMSQuoteInvoiceId
		--)
		--delete from mp_qms_quote_invoice_part_quantities where qms_quote_invoice_part_qty_id in 
		--(
		--	select a.qms_quote_invoice_part_qty_id from 
		--	mp_qms_quote_invoice_part_quantities (nolock) a
		--	join mp_qms_quote_invoice_parts (nolock) b on a.qms_quote_invoice_part_id = b.qms_quote_invoice_part_id
		--	--join mp_qms_quote_invoices		(nolock) c on b.qms_quote_invoice_id = c.qms_quote_invoice_id
		--	where b.qms_quote_invoice_id  =  @QMSQuoteInvoiceId
		--)

		--delete from mp_qms_quote_invoice_parts where qms_quote_invoice_id  =  @QMSQuoteInvoiceId
		
		
		
		select 
			@QMSQuoteInvoiceId	QMSQuoteInvoiceId 
			,@QMSQuotePartId	QMSQuotePartId
			,@QTYLevel			QTYLevel
			,@PartQTY			PartQTY
			,@UnitId			UnitId
			,@IsPartOfInvoice	IsPartOfInvoice
			, * 
			into #qms_quote_invoice
		from @FeeTypeValues



		merge mp_qms_quote_invoice_parts as target  
		 using (select distinct QMSQuoteInvoiceId ,QMSQuotePartId , IsPartOfInvoice  from #qms_quote_invoice) as source on  
		  (target.qms_quote_invoice_id = source.QMSQuoteInvoiceId and target.qms_quote_part_id = source.QMSQuotePartId  )  
		 when not matched by target then  
		  insert (qms_quote_invoice_id,qms_quote_part_id,IsPartOfInvoice)   
		  values (source.QMSQuoteInvoiceId,source.QMSQuotePartId, source.IsPartOfInvoice)
		 --when not matched by source then  
		 --delete
		 ;
		 set @qms_quote_invoice_part_id = SCOPE_IDENTITY()
	 
		 if (@qms_quote_invoice_part_id is null)
		 begin
			set @qms_quote_invoice_part_id =
			(
				select qms_quote_invoice_part_id
				from mp_qms_quote_invoice_parts
				where 
				qms_quote_invoice_id = @QMSQuoteInvoiceId
				and qms_quote_part_id = @QMSQuotePartId
			)
		 end
	 
		 if (@qms_quote_invoice_part_id>0)
		 begin

			--select distinct @qms_quote_invoice_part_id qms_quote_invoice_part_id ,	QTYLevel ,PartQTY,UnitId  from #qms_quote_invoice
		
			merge mp_qms_quote_invoice_part_quantities as target  
			using (select distinct @qms_quote_invoice_part_id qms_quote_invoice_part_id ,	QTYLevel ,PartQTY,UnitId  from #qms_quote_invoice)  as source on  
			(target.qms_quote_invoice_part_id = source.qms_quote_invoice_part_id and target.part_qty = source.PartQTY  and target.part_qty_unit_id = source.UnitId  and target.qty_level = source.QTYLevel )  
			when not matched by target then  
				insert (qms_quote_invoice_part_id ,part_qty ,part_qty_unit_id ,qty_level)  
				values (source.qms_quote_invoice_part_id ,source.PartQTY ,source.UnitId ,source.QTYLevel)
			--when not matched by source then  
			-- delete
			;
			set @qms_quote_invoice_part_qty_id = SCOPE_IDENTITY()
		
			if (@qms_quote_invoice_part_qty_id is null)
			begin
				set @qms_quote_invoice_part_qty_id =
				(
					select qms_quote_invoice_part_id
					from mp_qms_quote_invoice_part_quantities
					where 
					qms_quote_invoice_part_id = @qms_quote_invoice_part_id
					and qty_level = @QTYLevel
				)
			end
		

			if (@qms_quote_invoice_part_qty_id>0)
			begin
	
				merge mp_qms_quote_invoice_part_qty_fee_types as target  
				using (select distinct @qms_quote_invoice_part_qty_id qms_quote_invoice_part_qty_id ,*  from #qms_quote_invoice)  as source on  
				(target.qms_quote_invoice_part_qty_id = source.qms_quote_invoice_part_qty_id and target.fee_type_id = source.FeeTypeId  )  
				when matched and (target.value  <> source.value) then  
					update set target.value  = source.value
				when not matched then  
					insert (qms_quote_invoice_part_qty_id ,fee_type_id ,value)  
					values (source.qms_quote_invoice_part_qty_id ,source.FeeTypeId ,source.value )
				;

			end


		 end 


		commit

		set @TransactionStatus = 'Success'
		select @TransactionStatus TransactionStatus 

	end try
	begin catch
		rollback

		set @TransactionStatus = 'Failed - ' + error_message()
		select @TransactionStatus TransactionStatus 

	end catch


end
GO
PRINT N'Altering Procedure [dbo].[proc_set_qms_quote_invoice_part_specialfee_info]...';


GO
/*
declare @p271 dbo.tbltype_QMSQuoteInvoicePartQTYWithFeeTypeValues

insert into  @p271 values(101,200.5864),(102,39.5864),(103,49.5864),(104,588.5864),(105,69.5864)
--select * from @p27
exec proc_set_qms_quote_invoice_part_info
	@QMSQuoteInvoiceId		=1
	,@QMSQuotePartId		=1
	,@QTYLevel				=1
	,@PartQTY				= 11
	,@UnitId				= 14
	,@FeeTypeValues			= @p271


*/

ALTER proc [dbo].[proc_set_qms_quote_invoice_part_specialfee_info]
(
	@QMSQuoteInvoiceId		int
	,@QMSQuotePartId		int
	,@FeeTypeValues			as tbltype_QMSQuoteInvoicePartQTYWithFeeTypeValues			readonly
)
as
begin

	/* Dec 12 M2-2421 M - Invoice tab - Update Other Quantity selection -DB */

	declare @TransactionStatus				varchar(500) = 'Failed'
	declare @qms_quote_invoice_part_id		int
	
	drop table if exists #qms_quote_invoice

	begin tran
	begin try
	
		
		select 
			@QMSQuoteInvoiceId	QMSQuoteInvoiceId 
			,@QMSQuotePartId	QMSQuotePartId
			, * 
			into #qms_quote_invoice
		from @FeeTypeValues

		set @qms_quote_invoice_part_id = (select qms_quote_invoice_part_id from mp_qms_quote_invoice_parts where  qms_quote_invoice_id =  @QMSQuoteInvoiceId and qms_quote_part_id = @QMSQuotePartId)

		merge mp_qms_quote_invoice_part_special_fees as target  
		using (select distinct @qms_quote_invoice_part_id qms_quote_invoice_part_id ,*  from #qms_quote_invoice)  as source on  
		(target.qms_quote_invoice_part_id = source.qms_quote_invoice_part_id and target.fee_type_id = source.FeeTypeId  )  
		when matched and (target.value  <> source.value) then  
			update set target.value  = source.value
		when not matched then  
			insert (qms_quote_invoice_part_id ,fee_type_id ,value)  
			values (source.qms_quote_invoice_part_id ,source.FeeTypeId ,source.value )
		;

		 

		commit

		set @TransactionStatus = 'Success'
		select @TransactionStatus TransactionStatus 

	end try
	begin catch
		rollback

		set @TransactionStatus = 'Failed - ' + error_message()
		select @TransactionStatus TransactionStatus 

	end catch


end
GO
PRINT N'Altering Procedure [dbo].[proc_set_qms_user_quote_settings]...';


GO
/*
exec [proc_set_qms_user_quote_settings-NEW]
	@supplier_id			= 1338073
	,@quote_setting_type_id	= 4
	,@default_value			= NULL
*/
ALTER procedure [dbo].[proc_set_qms_user_quote_settings]
(
	@supplier_id			int
	,@quote_setting_type_id	int
	,@default_value			int= null

)
as
begin

	/*
		Oct 21, 2019 - M2-2184 M - Add Quote Details items to the site preferences : DB
		1	Process
		2	Material
		3	Post_Process
		4	Payment_Term
		5	Custom_Cost
		6	Shipping_Method
	*/
		
	declare @transaction_status			varchar(500) = 'Failed'

	begin tran
	begin try

		
		if (@default_value is null or @default_value = 0 )
		begin

				 delete from mp_qms_user_quote_settings 
				 where contact_id = @supplier_id and qms_quote_setting_id = @quote_setting_type_id 

		end
		else if ((select count(1) from mp_qms_user_quote_settings (nolock) where contact_id = @supplier_id and qms_quote_setting_id = @quote_setting_type_id) > 0 )
		begin
				update mp_qms_user_quote_settings 
					set qms_quote_setting_id = @quote_setting_type_id , default_value = @default_value
				where contact_id = @supplier_id AND qms_quote_setting_id = @quote_setting_type_id
		end
		else 
		begin
				insert into mp_qms_user_quote_settings
				(contact_id ,qms_quote_setting_id ,default_value)
				select @supplier_id , @quote_setting_type_id , @default_value

		end

		commit

		set @transaction_status = 'Success'
		
		if (@default_value is null or @default_value = 0 )
			select @transaction_status TransactionStatus , NULL AS ContactId , NULL AS SettingId , NULL Defaultvalue
		else 
			select @transaction_status TransactionStatus , contact_id AS ContactId 
				  ,qms_quote_setting_id AS SettingId 
				  ,default_value AS DefaultValue
			from mp_qms_user_quote_settings (nolock)
			where contact_id = @supplier_id and qms_quote_setting_id = @quote_setting_type_id 


	end try
	begin catch
		rollback

		set @transaction_status = 'Failed - ' + error_message()
		select @transaction_status TransactionStatus , NULL AS ContactID , NULL AS SettingId , NULL Defaultvalue

	end catch
	
end
GO
PRINT N'Altering Procedure [dbo].[proc_ssis_set_rfqQuoteRawData]...';


GO

ALTER PROCEDURE [dbo].[proc_ssis_set_rfqQuoteRawData](
@tblRFQQuoteDataType tblRFQQuoteDataType READONLY
)
-- =============================================
-- Author:		dp-sb
-- Create date:  30/11/2018
-- Description:	Stored procedure to set the legacy RFQ Quote data. This procedure in call in SSIS package.
-- Modification:
-- Example: [proc_ssis_set_rfqQuoteData]  
-- =================================================================
--Version No – Change Date – Modified By      – CR No – Note
-- =================================================================
AS
BEGIN

	truncate table tmp_SSIS_RFQ_Quote_data
	

	INSERT INTO tmp_SSIS_RFQ_Quote_data
	(
	 RFQID							
	, Supplier_Contact_id			  
	, Supplier_company_id			  
	, is_prefered_nda_type_accepted	  
	, prefered_nda_type_accepted_date 
	, payment_terms					  
	, is_payterm_accepted			  
	, QuoteReferenceNumber			  
	, IsSubmittedQuote				  
	, QuoteCreationDate				  
	, QuoteExpirationDate			  
	, PMS_ITEM_ID					  
	, grid_article					  
	, per_unit_price				  
	, tooling_amount				  
	, miscellaneous_amount			  
	, shipping_amount				  
	, is_awarded					  
	, QUANTITY_REF					  
	, is_award_accepted				  
	, AwardAcceptanceStatusDate		  )
	SELECT 
	 RFQID							
	, Supplier_Contact_id			  
	, Supplier_company_id			  
	, is_prefered_nda_type_accepted	  
	, prefered_nda_type_accepted_date 
	, payment_terms					  
	, is_payterm_accepted			  
	, QuoteReferenceNumber			  
	, IsSubmittedQuote				  
	, QuoteCreationDate				  
	, QuoteExpirationDate			  
	, PMS_ITEM_ID					  
	, grid_article					  
	, per_unit_price				  
	, tooling_amount				  
	, miscellaneous_amount			  
	, shipping_amount				  
	, is_awarded					  
	, QUANTITY_REF					  
	, is_award_accepted				  
	, AwardAcceptanceStatusDate	
	 FROM @tblRFQQuoteDataType
END
GO
PRINT N'Creating Procedure [dbo].[proc_get_GrowthPackageManufacturerFlag_2023_09_26]...';


GO

--SELECT * FROM mpGrowthPackageUnlockRFQsInfo  WHERE IsDeleted = 1 CompanyID=1856478

--UPDATE mpGrowthPackageUnlockRFQsInfo SET IsDeleted = 1  WHERE CompanyID=1856478 
---- exec [proc_get_GrowthPackageManufacturerFlag_2023_09_26] @CompanyID=1856478
CREATE PROCEDURE [dbo].[proc_get_GrowthPackageManufacturerFlag_2023_09_26]  
(@CompanyId int )  
AS  

BEGIN  
 SET NOCOUNT ON   

 --  M2-4616 : Hubspot - Add the Growth Package Flag to the down sync
	
	DECLARE @IsEligibleForGrowthPackage INT ,@IsGrowthPackageTaken INT  ,@UnlockRfqCount INT , @TotalUnlockRfqCount INT , @NoOfDaysLeft INT 
	,@IsStarterPackageTaken BIT , @IsStarterFreeTrialTaken BIT,  @FreeTrialSubscriptionEndDate DATETIME 

	DECLARE @AccountType INT = (SELECT account_type FROM  [mp_registered_supplier] (NOLOCK)  WHERE company_id = @CompanyId )

	DECLARE @SubscriptionStatus VARCHAR(25) , @RunningSubscriptionId INT

	SELECT 
		@IsEligibleForGrowthPackage = IsEligibleForGrowthPackage
		,@IsGrowthPackageTaken      = IsGrowthPackageTaken
		,@IsStarterPackageTaken     = IsStarterPackageTaken
		,@IsStarterFreeTrialTaken   = IsStarterFreeTrialTaken
	FROM mp_companies (NOLOCK) 
	WHERE Company_Id = @CompanyId
	 
	-- To show unlock option in left panel  
	SELECT @TotalUnlockRfqCount = COUNT(DISTINCT Rfq_Id) FROM mpGrowthPackageUnlockRFQsInfo (NOLOCK) 
	WHERE CompanyId = @CompanyId 
	--AND IsDeleted = 0

	 --- below code commented with M2-5221
	 ---- Getting status and latest running id against company id
	 --SELECT  TOP 1  @SubscriptionStatus =   b.status , @RunningSubscriptionId = b.id 
		--FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
		--JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON a.id= b.customer_id
		--WHERE a.gateway_id = 310 
		--AND a.company_id = @CompanyId
		----and status = 'active'
		--ORDER BY b.ID DESC

	   ------ Updated code with M2-5221
		;with cte as 
		(
			SELECT   MAX(b.subscription_start)  subscription_start 
			, MAX(b.subscription_end) subscription_end
			FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
			JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON a.id= b.customer_id
			WHERE a.gateway_id = 310 
			AND a.company_id = @CompanyId
		)  
			SELECT  TOP 1     @SubscriptionStatus =   b.status ,   @RunningSubscriptionId = b.id 
			FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
			JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON a.id= b.customer_id
			JOIN cte on cte.subscription_start = b.subscription_start and cte.subscription_end = b.subscription_end
			WHERE a.gateway_id = 310 
			AND a.company_id = @CompanyId
			ORDER BY b.ID DESC

	IF @SubscriptionStatus IS NULL
	   BEGIN
	
			SET @UnlockRfqCount =
			(
					SELECT COUNT(DISTINCT c.rfq_id)
					FROM mpGrowthPackageUnlockRFQsInfo (NOLOCK) c 
					WHERE c.IsDeleted = 0 AND companyid = @CompanyId
						 
			)

	    END
	ELSE IF @SubscriptionStatus = 'active'
		BEGIN
		
		SET @UnlockRfqCount =
			(
					SELECT COUNT(DISTINCT c.rfq_id)
					FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
					JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON 
						a.id = b.customer_id 
						AND a.company_id = @CompanyId
					JOIN  mpGrowthPackageUnlockRFQsInfo (NOLOCK) c on c.CompanyId = a.company_id
					/* Slack issue : restored used RFQs -> IsDeleted = 1 */  
					AND c.IsDeleted = 0
					WHERE 
					    b.id = @RunningSubscriptionId
						AND c.UnlockDate  >= b.subscription_start
						AND c.UnlockDate <= b.subscription_end
			)
				 
				SET @NoOfDaysLeft =  
				(
					SELECT NoOfDaysLeft FROM
					(
						SELECT 
							DATEDIFF(DAY,GETUTCDATE(), b.subscription_end) NoOfDaysLeft  
							, ROW_NUMBER() OVER(PARTITION BY a.company_id ORDER BY a.company_id , b.Id DESC) Rn
						FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
						JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON 					
							a.id = b.customer_id 
							AND a.company_id = @CompanyId
					) a 
					WHERE Rn  = 1
				)

		END
	ELSE IF @SubscriptionStatus = 'canceled'
		BEGIN
		 
				SET @UnlockRfqCount =
					(
							SELECT COUNT(DISTINCT c.rfq_id)
							FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
							JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON 
								a.id = b.customer_id 
								AND a.company_id = @CompanyId
							JOIN  mpGrowthPackageUnlockRFQsInfo (NOLOCK) c on c.CompanyId = a.company_id
							/* Slack issue : restored used RFQs -> IsDeleted = 1 */ 
							AND c.IsDeleted = 0
							WHERE b.id = @RunningSubscriptionId
							   AND	c.UnlockDate  >= b.subscription_start
							   AND CAST(c.UnlockDate AS DATE) <=  CAST(DATEADD(dd,30, b.subscription_end) AS DATE)
					) 

				SET @NoOfDaysLeft =  0  --- here set the value 0 because subscription cancel and no active subscription 

		END	 
	ELSE
		BEGIN

				SET @UnlockRfqCount =
					(
							SELECT COUNT(DISTINCT c.rfq_id)
							FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
							JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON 
								a.id = b.customer_id 
								AND a.company_id = @CompanyId
							JOIN  mpGrowthPackageUnlockRFQsInfo (NOLOCK) c on c.CompanyId = a.company_id
							/* Slack issue : restored used RFQs -> IsDeleted = 1 */ 
							AND c.IsDeleted = 0
							WHERE b.id = @RunningSubscriptionId
							   AND	c.UnlockDate  >= b.subscription_start
							   AND CAST(c.UnlockDate AS DATE) <=  CAST(DATEADD(dd,30, b.subscription_end) AS DATE)
					) 

					SET @NoOfDaysLeft =  
						(
							SELECT NoOfDaysLeft FROM
							(
								SELECT 
									DATEDIFF(DAY,GETUTCDATE(),CAST(DATEADD(dd,30, b.subscription_end) AS DATE) ) NoOfDaysLeft  
									, ROW_NUMBER() OVER(PARTITION BY a.company_id ORDER BY a.company_id , b.Id DESC) Rn
								FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
								JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON 
									a.id = b.customer_id 
									AND a.company_id = @CompanyId
							) a 
							WHERE Rn  = 1
						)

		END 
		
		---- First record information of company when starter package purchased
		IF @SubscriptionStatus = 'trialing'
		BEGIN
				SELECT  TOP 1  @FreeTrialSubscriptionEndDate =  subscription_end
				FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
				JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON a.id= b.customer_id
				WHERE a.gateway_id = 310 
				AND a.company_id = @CompanyId
				AND b.status = 'trialing'
				ORDER BY b.ID  
		END


  	SELECT  
		ISNULL(@IsEligibleForGrowthPackage,0) AS IsEligibleForGrowthPackage
		, ISNULL(@IsGrowthPackageTaken,0)   AS IsGrowthPackageTaken  
		, ISNULL((CASE WHEN @SubscriptionStatus IS NULL THEN 0 WHEN @UnlockRfqCount = 0 THEN 3 ELSE 3-@UnlockRfqCount END ),0)  AS UnlockRfqCount
		, (CASE WHEN @NoOfDaysLeft > 0 THEN @NoOfDaysLeft ELSE 0 END) NoOfDaysLeft
		, ISNULL(@IsStarterPackageTaken,0) AS IsStarterPackageTaken
		, ISNULL(@IsStarterFreeTrialTaken,0) AS IsStarterFreeTrialTaken
		, @FreeTrialSubscriptionEndDate AS FreeTrialSubscriptionEndDate
		, ISNULL(@TotalUnlockRfqCount,0)   AS TotalUnlockRfqCount  
   
END
GO
PRINT N'Creating Procedure [dbo].[proc_get_RfqList_Vision_copy]...';


GO

/*





declare @p25 dbo.tbltype_ListOfProcesses

declare @p26 dbo.tbltype_ListOfBuyerIndustryId

exec [proc_get_RfqList_Vision_copy] 
	@ContactId=848283
	,@CompanyId=1274154
	,@RfqType=10
	,@CountryId=0
	,@ManufacturingLocationId=0
	,@IsActive=0
	,@IsPending=0
	,@IsIncomplete=0
	,@IsClosingIn4Days=0
	,@IsClosingIn24Hours=0
	,@IsQuoting=0
	,@IsAwarded=0
	,@IsDraft=0
	,@IsDraftAfterClose=0
	,@DraftBeforeRelease=0
	,@IsClosed=0
	,@PageNumber=1
	,@PageSize=20
	,@IsValidated=0
	,@IsUnvalidated=0
	,@IsOrderByDesc=1
	,@OrderBy=default
	,@IsMfgCommunityRfq=0
	,@SearchText=N''
	,@ProcessIDs=@p25
	,@BuyerIndustryId=@p26

*/

CREATE   PROCEDURE [dbo].proc_get_RfqList_Vision_copy
	 @ContactId INT,
	 @CompanyId INT,
	 @RfqType INT,	
	 @ManufacturingLocationId INT = 0, 
	 @CountryId INT = 0, 
	 @IsActive BIT = 'false',
	 @IsPending BIT = 'false',
	 @IsIncomplete BIT = 'false',
	 @IsClosingIn4Days BIT = 'false',
	 @IsClosingIn24Hours BIT = 'false',
	 @IsClosed BIT = 'false',
	 @IsQuoting BIT = 'false',
	 @IsAwarded BIT = 'false',
	 @IsDraft BIT = 'false',
	 @DraftBeforeRelease BIT = 'false',
	 @IsDraftAfterClose BIT = 'false',
	 @PageNumber INT = 1,
	 @PageSize   INT = 24,
	 @IsValidated BIT = 'true',
	 @IsUnvalidated BIT = 'false',
	 @IsMfgCommunityRfq BIT = 'false',	 
	 @SearchText VARCHAR(50) = Null,
	 @IsOrderByDesc BIT = 1,
	 @OrderBy VARCHAR(50) = Null,
	 @ProcessIDs			as tbltype_ListOfProcesses			readonly,
	 @BuyerIndustryId    as tbltype_ListOfBuyerIndustryId    readonly
	  
	  
AS
-- =============================================
-- Author:		dp-Am. N.
-- Create date:  31/10/2018
-- Description:	Stored procedure to Get the RFQ details based on RFQ Type for Supplier
-- Modification:
-- Syntax: [proc_get_RfqList] <Contact_id>,<Company_id>,<RFQ_Type_id>
-- Example: [proc_get_RfqList] 216582,337455,3
--[proc_get_RfqList_Vision] 848283,1274154,10,92,NULL,NULL,NULL,NULL,NULL,Null,1,20,NULL,NULL,NULL,Null,'rfq_name'
--[proc_get_RfqList_Buyer] 216582,337455,12
--[proc_get_RfqList_Buyer] 216582,337455,6
-- =================================================================
--Version No – Change Date – Modified By      – CR No – Note
-- =================================================================
BEGIN

	set nocount on 

	SELECT 1, GETUTCDATE()

	/* M2-3384 : M & Vision - My RFQs - Search by Buyer's Industry -DB */
	drop table if exists #BuyerIndistry
	create table #BuyerIndistry (BuyerIndustryId int)

	drop table if exists #rfq_list
	create table #rfq_list (rfq_id int)

	/* M2-2863 Vision - RFQs - Filter by Process - DB */
	drop table if exists #tmpprocesses
	create table #tmpprocesses
	(
		parent_part_category_id int null
		, part_category_id int null
	)
	/**/

	------------------------ All Vision Rfq --------------------
	drop table if exists #tmpaddress
	select * into #tmpaddress from vw_address

	drop table if exists #tmpmasterprocesses
	select distinct
		part_category_id
		, discipline_name
	into #tmpmasterprocesses
	from mp_mst_part_category	p		(nolock) 					
	where status_id = 2 and level = 0
	union
	select distinct
		p.part_category_id
		, case 
			when p.discipline_name = category.discipline_name then category.discipline_name 
			else category.discipline_name +' / '+ p.discipline_name
		  end discipline_name
	from mp_mst_part_category	p		(nolock) 	
	JOIN mp_mst_part_category category (nolock) on p.parent_part_category_id=category.part_category_id				
	where p.status_id = 2 and p.level = 1
	union
	select distinct 
		p.part_category_id
		, case 
			when p.discipline_name = category.discipline_name then category.discipline_name 
			else category.discipline_name +' / '+ p.discipline_name
		  end discipline_name
	from mp_rfq			a (nolock) 
	join mp_rfq_parts	b (nolock) on a.rfq_id = b.rfq_id and a.rfq_status_id = 2
	join mp_mst_part_category	p		(nolock)  on b.part_category_id = p.part_category_id
	join mp_mst_part_category category (nolock) on p.parent_part_category_id=category.part_category_id
	order by discipline_name

	SELECT 2, GETUTCDATE()
	/* M2-3837 Vision - RFQ Submitted to Pending Priority Time Stamp - DB */
	DROP TABLE IF EXISTS #tmp_proc_get_RfqList_Vision_RfqSubmitted
	
	IF @IsPending=1 AND @IsValidated = 1
	BEGIN
		SELECT rfq_id RfqId, MAX(creation_date) SubmittedDate INTO #tmp_proc_get_RfqList_Vision_RfqSubmitted
		FROM mp_rfq_revision (NOLOCK) where newvalue = 'Pending Approval'	
		GROUP BY rfq_id
	END
	/**/

	SELECT 3,GETUTCDATE()

	if (@RfqType = 10)	
	BEGIN	

			declare @sql_query nvarchar(max),
			@where_query nvarchar(max),
			@search_query nvarchar(max),
			@orderBy_query nvarchar(max),
			@sql_query1 nvarchar(max) 
	 
			/* M2-2863 Vision - RFQs - Filter by Process - DB */
			declare @processids1				as tbltype_ListOfProcesses
			
			/* M2-3384 : M & Vision - My RFQs - Search by Buyer's Industry -DB */
			insert into #BuyerIndistry SELECT * FROM @BuyerIndustryId
			
			/**/
	SELECT 4,GETUTCDATE()
			set @where_query =  
				case when @IsPending = 'true' then 'AND ( mp_rfq.rfq_status_id = 2 )' else '' end 
				+ case when @IsActive  = 'true' then 'AND ( format(GETUTCDATE(),''yyyyMMdd'') <= format(mp_rfq.Quotes_needed_by,''yyyyMMdd'') )	' else '' end 
				+ case when @IsIncomplete  = 'true' then 'AND ( mp_rfq.rfq_status_id = 14 )' else '' end
				+ case when @IsClosingIn4Days  = 'true' then ' AND ( DATEDIFF(d, format(GETUTCDATE(),''yyyyMMdd''), format(mp_rfq.Quotes_needed_by,''yyyyMMdd'') ) <= 4 ) AND mp_rfq.rfq_id NOT IN (select rfq_id from mp_rfq_quote_SupplierQuote where rfq_id = mp_rfq.rfq_id  ) ' else '' end
				+ case when @IsClosingIn24Hours  = 'true' then 'AND ( DATEDIFF(hh, format(GETUTCDATE(),''yyyyMMdd''), format(mp_rfq.Quotes_needed_by,''yyyyMMdd'') ) <= 24 )' else '' end
				+ case when @IsClosed  = 'true' then 'AND ( format(GETUTCDATE(),''yyyyMMdd'') >  format(mp_rfq.Quotes_needed_by,''yyyyMMdd'') )' else '' end
				+ case when @IsValidated  = 'true' then 'AND ( mp_rfq.rfq_id IN ( SELECT rfq_id from mp_rfq join mp_contacts ON mp_rfq.contact_id = mp_contacts.contact_id where mp_contacts.Is_Validated_Buyer = 1) )' else '' end
				+ case when @IsUnvalidated  = 'true' then 'AND ( mp_rfq.rfq_id IN ( SELECT rfq_id from mp_rfq join mp_contacts ON mp_rfq.contact_id = mp_contacts.contact_id where mp_contacts.Is_Validated_Buyer = 0 or mp_contacts.Is_Validated_Buyer is null) )' else '' end
				+ case when (@CountryId > 0) then 'AND ( vw_address.CountryId = @CountryId1)' else '' end
				+ case when (@ManufacturingLocationId in (4)) then 'AND ( mp_rfq_preferences.rfq_pref_manufacturing_location_id in (4,7))' when (@ManufacturingLocationId in (5)) then 'AND ( mp_rfq_preferences.rfq_pref_manufacturing_location_id in (5,7))' when (@ManufacturingLocationId > 0) then 'AND ( mp_rfq_preferences.rfq_pref_manufacturing_location_id = @ManufacturingLocationId1)' else '' end
				/* M2-2861 Vision - RFQs - Search Enhancements/filters - DB*/
				+ case when @IsQuoting  = 'true' then 'AND ( format(mp_rfq.Quotes_needed_by,''yyyyMMdd'') >= format(GETUTCDATE(),''yyyyMMdd'')  ) AND mp_rfq.rfq_status_id = 3	' else '' end 
				+ case when @IsAwarded  = 'true' then ' AND mp_rfq.rfq_status_id = 6	' else '' end 
				--+ case when @IsDraft  = 'true' then ' AND mp_rfq.rfq_status_id = 1	' else '' end 
				/**/
				/* M2-2863 Vision - RFQs - Filter by Process - DB */
				+ case when (select count(1) from @ProcessIDs) > 0 then 'AND  mp_rfq.rfq_id in (select * from  #rfq_list ) ' else ' ' end
				/**/
				/* M2-3384 : M & Vision - My RFQs - Search by Buyer's Industry -DB */
				+ case when (select count(1) from @BuyerIndustryId) > 0 then ' and mcst.supplier_type_id in (select * from  #BuyerIndistry) ' else '' end

		   set @orderBy_query = 
				case when (@OrderBy IS Null AND @IsOrderByDesc = 'true' AND @IsPending = 1 AND @IsValidated = 1 ) then 'ORDER BY AllRfqs.RfqSubmittedDate DESC' else '' end
				+ case when (@OrderBy IS Null AND @IsOrderByDesc = 'false'  AND @IsPending = 1 AND @IsValidated = 1) then 'ORDER BY AllRfqs.RfqSubmittedDate' else '' end
				+ case when (@OrderBy IS Null AND @IsOrderByDesc = 'true' AND @IsPending = 1 AND @IsUnvalidated = 1 ) then 'ORDER BY AllRfqs.RFQCreatedOn DESC' else '' end
				+ case when (@OrderBy IS Null AND @IsOrderByDesc = 'false'  AND @IsPending = 1 AND @IsUnvalidated = 1) then 'ORDER BY AllRfqs.RFQCreatedOn' else '' end
				+ case when (@OrderBy IS Null AND @IsOrderByDesc = 'true'  AND @IsPending = 0) then 'ORDER BY AllRfqs.RFQCreatedOn DESC' else '' end
				+ case when (@OrderBy IS Null AND @IsOrderByDesc = 'false'  AND @IsPending = 0) then 'ORDER BY AllRfqs.RFQCreatedOn' else '' end
				+ case when (@OrderBy = 'rfq_name' AND @IsOrderByDesc = 'true') then 'ORDER BY AllRfqs.RFQName DESC ' else '' end
				+ case when (@OrderBy = 'rfq_name' AND @IsOrderByDesc = 'false') then 'ORDER BY AllRfqs.RFQName ' else '' end

	
			set @search_query =  
				  case when @SearchText Is NOT Null then 'AND ((mp_rfq.rfq_name Like ''%'+@SearchText+'%'')	OR (mp_rfq.rfq_id Like ''%'+@SearchText+'%'') OR (mp_companies.name Like ''%'+@SearchText+'%'') OR ((mp_contacts.first_name + '' '' +	mp_contacts.last_name) Like ''%'+@SearchText+'%'') OR (aspnetusers.Email Like ''%'+@SearchText+'%''))' else '' end 



SELECT 5, GETUTCDATE()

			/* M2-2863 Vision - RFQs - Filter by Process - DB */
			insert into #tmpprocesses (parent_part_category_id , part_category_id)
			select distinct parent_part_category_id , part_category_id 
			from mp_mst_part_category a where part_category_id in (select processId from @ProcessIDs ) and status_id = 2 and level =1 

			insert into #tmpprocesses (parent_part_category_id , part_category_id)
			select distinct parent_part_category_id , part_category_id 
			from mp_mst_part_category a where parent_part_category_id in 
			(
				select processId from @ProcessIDs where  processId not in (select parent_part_category_id from #tmpprocesses) 
			) and status_id = 2 and level =1 
	
	        
SELECT 6,GETUTCDATE()
			set @sql_query=			
			'
			insert into #rfq_list (rfq_id)
			select distinct a.rfq_id 
			from mp_rfq			a (nolock) 
			join mp_rfq_parts	b (nolock) on a.rfq_id = b.rfq_id 
			'
			+
			/* M2-3615 Vision - Add Directory RFQs under RFQs on the left menu - DB */
			CASE WHEN @IsMfgCommunityRfq =  0 THEN ' and a.IsMfgCommunityRfq = 0 ' ELSE ' and a.IsMfgCommunityRfq = 1 ' END
			/**/
			+
			'
			join mp_parts		c (nolock) on b.part_id  = c.part_id 
			where b.part_category_id in 
			(
				select part_category_id from  #tmpprocesses
			)
			'

			exec sp_executesql  @sql_query 
			,N'@processids1  tbltype_ListOfProcesses readonly'  --, @BuyerIndustryId1 tbltype_ListOfBuyerIndustryId readonly
			,@processids1  = @ProcessIDs
			--,@BuyerIndustryId1 = @BuyerIndustryId /* M2-3384 : M & Vision - My RFQs - Search by Buyer's Industry -DB */	
			/**/
			--select * from #rfq_list
			SELECT 7, GETUTCDATE()
				IF @IsDraft = 0 AND @DraftBeforeRelease = 0 AND @IsDraftAfterClose = 0
				BEGIN
				SELECT 8, GETUTCDATE()
						set @sql_query = 
						' 		  
						SELECT  *,TotalCount = count(*) over() FROM(  
		  
						SELECT DISTINCT  
						mp_rfq.rfq_id AS RFQId
						, mp_rfq.rfq_name AS RFQName				 
						, mp_special_files.file_name AS file_name
						, floor(mp_rfq_parts.min_part_quantity)  AS Quantity			 
						, mp_rfq_parts.min_part_quantity_unit AS UnitValue
						, Processes.value AS PostProductionProcessValue
						, mp_mst_materials.material_name_en as  Material 
						, p.discipline_name  AS Process
						, mp_companies.name AS Buyer
						, mp_Companies.company_id as buyer_company_id
						, mp_mst_rfq_buyerStatus.rfq_buyerstatus_li_key AS RFQStatus
						, mp_rfq.rfq_created_on AS RFQCreatedOn
						, mp_rfq.Quotes_needed_by AS QuotesNeededBy
						, mp_rfq.award_date AS AwardDate
						, mp_rfq_supplier_likes.is_rfq_like AS IsRfqLike
						, mp_star_rating.no_of_stars AS NoOfStars
						, '+COALESCE('ThumbnailFile.File_Name','')+' AS RfqThumbnail
						, mp_contacts.contact_id AS BuyerContactId	
						, mp_rfq.payment_term_id AS payment_term_id		
						, vw_address.City			AS City		 
						, vw_address.[State]		AS [State]
						, vw_address.CountryId		AS CountryId
						, vw_address.country_name	AS Country	
						, mc.first_name + '' '' +	mc.last_name as BuyerOwner
						, mp_rfq.rfq_quality		AS RFQQuality
						, aspnetusers.Email			AS BuyerEmail
						, (mp_contacts.first_name + '' '' +	mp_contacts.last_name) AS BuyerName
						, mp_rfq_preferences.rfq_pref_manufacturing_location_id AS RFQLocationId
						/*M2-2458 : Buyers - Tile and Row - Add Dates and # of Quotes on to RFQ tiles in MY RFQs  -DB*/
						,(select count(1) from mp_rfq_quote_supplierquote (nolock) 
									where mp_rfq.rfq_id = rfq_id and is_quote_submitted = 1 and is_rfq_resubmitted = 0) as RFQQuoteCount
						,'
						+
						CASE WHEN @IsPending=1 AND @IsValidated = 1 THEN ' RfqSubmitted.SubmittedDate AS RfqSubmittedDate ' ELSE ' NULL AS RfqSubmittedDate ' END
						+
						'

						FROM  mp_rfq							(nolock) 
						JOIN mp_contacts					(nolock) ON mp_rfq.contact_id=mp_contacts.contact_id AND mp_rfq.rfq_status_id >=2  AND mp_rfq.rfq_status_id != 13	
						JOIN mp_rfq_parts					(nolock) ON mp_rfq.rfq_id = mp_rfq_parts.rfq_id and Is_Rfq_Part_Default =  1
						LEFT JOIN mp_rfq_parts_file				(nolock) ON mp_rfq_parts.rfq_part_id = mp_rfq_parts_file.rfq_part_id
						JOIN mp_special_files				(nolock) ON mp_special_files.file_id = mp_rfq_parts_file.file_id
						JOIN mp_parts						(nolock) ON mp_parts.part_id = mp_rfq_parts.part_id 
						JOIN mp_mst_rfq_buyerStatus		(nolock) ON mp_rfq.rfq_status_id=mp_mst_rfq_buyerStatus.rfq_buyerstatus_id
						JOIN mp_companies					(nolock) ON mp_contacts.company_id=mp_companies.company_id
						LEFT JOIN mp_contacts mc				(nolock) ON mp_companies.Assigned_SourcingAdvisor=mc.contact_id
						JOIN mp_rfq_part_quantity			(nolock) ON mp_rfq_part_quantity.rfq_part_id = mp_rfq_parts.rfq_part_id
						JOIN #tmpmasterprocesses	p		(nolock) ON p.part_category_id = mp_rfq_parts.part_category_id 
						LEFT JOIN mp_rfq_supplier_likes	(nolock) ON mp_rfq_supplier_likes.rfq_id = mp_rfq.rfq_id and mp_rfq.contact_id = mp_rfq_supplier_likes.contact_id
						LEFT JOIN mp_special_files			(nolock) AS ThumbnailFile ON ThumbnailFile.file_id = mp_rfq.file_id
						left join #tmpaddress	vw_address			(nolock) ON mp_contacts.address_Id = vw_address.address_Id			 		 
						left join mp_star_rating			(nolock) on mp_star_rating.company_id = mp_contacts.company_id	
						LEFT JOIN mp_system_parameters AS Processes (nolock) ON Processes.id = mp_rfq_parts.Post_Production_Process_id AND Processes.sys_key = ''@PostProdProcesses''
						LEFT JOIN mp_mst_materials		(nolock) ON mp_mst_materials.material_id = mp_rfq_parts.material_id
						LEFT JOIN mp_system_parameters AS Unit (nolock) ON Unit.id = mp_parts.part_qty_unit_id AND Unit.sys_key = ''@UNIT2_LIST'' 
						JOIN aspnetusers					(nolock) ON  mp_contacts.user_id = aspnetusers.id
						JOIN mp_rfq_preferences (nolock)  ON mp_rfq.rfq_id = mp_rfq_preferences.rfq_id
						/* M2-3384 : M & Vision - My RFQs - Search by Buyers Industry -DB */
						LEFT JOIN mp_company_supplier_types mcst (nolock) on mp_companies.company_id = mcst.company_id and mcst.is_buyer = 1 
						'
						+
						CASE WHEN @IsPending=1 AND @IsValidated = 1 THEN ' LEFT JOIN #tmp_proc_get_RfqList_Vision_RfqSubmitted RfqSubmitted ON mp_rfq.rfq_id = RfqSubmitted.RfqId ' ELSE '' END
						+
						'
						WHERE 			 			 			 			 
							mp_rfq_parts_file.is_primary_file = 1 			 
							AND mp_rfq.rfq_status_id >=2
							AND mp_rfq.rfq_status_id != 13	'
						+
						/* M2-3615 Vision - Add Directory RFQs under RFQs on the left menu - DB */
						CASE WHEN @IsMfgCommunityRfq =  0 THEN ' and mp_rfq.IsMfgCommunityRfq = 0 ' ELSE ' and mp_rfq.IsMfgCommunityRfq = 1 ' END
						/**/
						
			 	 			 	

					set @sql_query1 = @sql_query  + @where_query + @search_query+
					') AS AllRfqs
					left join (select rfq_id , max(status_date) release_date from mp_rfq_release_history group by rfq_id ) rfq_release  on AllRfqs.RFQId = rfq_release.rfq_id		 '
					+ @orderBy_query +
					' OFFSET '+ convert(varchar(50),@PageSize) +'   * ( '+ convert(varchar(50),@PageNumber) + ' - 1) ROWS FETCH NEXT '+ convert(varchar(50),@PageSize) + ' ROWS ONLY'
				END
			/* M2-3520 Vision - Draft RFQ filter revisions - DB */
				ELSE IF @IsDraft = 1
				BEGIN
				SELECT 9,GETUTCDATE()
					set @sql_query = 
						' 		  
						SELECT  *,TotalCount = count(*) over() FROM(  
		  
						SELECT DISTINCT  
						mp_rfq.rfq_id AS RFQId
						, mp_rfq.rfq_name AS RFQName				 
						, mp_special_files.file_name AS file_name
						, floor(mp_rfq_parts.min_part_quantity)  AS Quantity			 
						, mp_rfq_parts.min_part_quantity_unit AS UnitValue
						, Processes.value AS PostProductionProcessValue
						, mp_mst_materials.material_name_en as  Material 
						, case when category.discipline_name is null then p.discipline_name  when category.discipline_name = p.discipline_name then p.discipline_name else category.discipline_name +'' / ''+ p.discipline_name end AS Process
						, mp_companies.name AS Buyer
						, mp_Companies.company_id as buyer_company_id
						, mp_mst_rfq_buyerStatus.rfq_buyerstatus_li_key AS RFQStatus
						, mp_rfq.rfq_created_on AS RFQCreatedOn
						, mp_rfq.Quotes_needed_by AS QuotesNeededBy
						, mp_rfq.award_date AS AwardDate
						, mp_rfq_supplier_likes.is_rfq_like AS IsRfqLike
						, mp_star_rating.no_of_stars AS NoOfStars
						, '+COALESCE('ThumbnailFile.File_Name','')+' AS RfqThumbnail
						--, MessagesMst.message_date AS message_date	
						, mp_contacts.contact_id AS BuyerContactId	
						, mp_rfq.payment_term_id AS payment_term_id		
						, vw_address.City			AS City		 
						, vw_address.[State]		AS [State]
						, vw_address.CountryId		AS CountryId
						, vw_address.country_name	AS Country	
						, mc.first_name + '' '' +	mc.last_name as BuyerOwner
						, mp_rfq.rfq_quality		AS RFQQuality
						, aspnetusers.Email			AS BuyerEmail
						, (mp_contacts.first_name + '' '' +	mp_contacts.last_name) AS BuyerName
						, mp_rfq_preferences.rfq_pref_manufacturing_location_id AS RFQLocationId
						/*M2-2458 : Buyers - Tile and Row - Add Dates and # of Quotes on to RFQ tiles in MY RFQs  -DB*/
						,(select count(1) from mp_rfq_quote_supplierquote (nolock) 
									where mp_rfq.rfq_id = rfq_id and is_quote_submitted = 1 and is_rfq_resubmitted = 0) as RFQQuoteCount
						,  NULL AS RfqSubmittedDate /* M2-3837 Vision - RFQ Submitted to Pending Priority Time Stamp - DB */
						FROM  mp_rfq							(nolock) 
							JOIN mp_contacts					(nolock) ON mp_rfq.contact_id=mp_contacts.contact_id 
							LEFT JOIN mp_rfq_parts					(nolock) ON mp_rfq.rfq_id = mp_rfq_parts.rfq_id and Is_Rfq_Part_Default =  1
							LEFT JOIN mp_rfq_parts_file				(nolock) ON mp_rfq_parts.rfq_part_id = mp_rfq_parts_file.rfq_part_id AND mp_rfq_parts_file.is_primary_file = 1 	
							LEFT JOIN mp_special_files				(nolock) ON mp_special_files.file_id = mp_rfq_parts_file.file_id
							LEFT JOIN mp_parts						(nolock) ON mp_parts.part_id = mp_rfq_parts.part_id 
							LEFT JOIN mp_mst_rfq_buyerStatus		(nolock) ON mp_rfq.rfq_status_id=mp_mst_rfq_buyerStatus.rfq_buyerstatus_id
							LEFT JOIN mp_companies					(nolock) ON mp_contacts.company_id=mp_companies.company_id
							LEFT JOIN mp_contacts mc				(nolock) ON mp_companies.Assigned_SourcingAdvisor=mc.contact_id
							LEFT JOIN mp_rfq_part_quantity			(nolock) ON mp_rfq_part_quantity.rfq_part_id = mp_rfq_parts.rfq_part_id
							LEFT JOIN mp_mst_part_category	p		(nolock) ON p.part_category_id = mp_rfq_parts.part_category_id 
							/* M2-3202 Buyer and M - Change the tiles and rows to include parent category */
							LEFT JOIN mp_mst_part_category category (nolock) on p.parent_part_category_id=category.part_category_id
							/**/
							LEFT JOIN mp_rfq_supplier_likes	(nolock) ON mp_rfq_supplier_likes.rfq_id = mp_rfq.rfq_id and mp_rfq.contact_id = mp_rfq_supplier_likes.contact_id
							LEFT JOIN mp_special_files			(nolock) AS ThumbnailFile ON ThumbnailFile.file_id = mp_rfq.file_id
							left join vw_address				(nolock) ON mp_contacts.address_Id = vw_address.address_Id			 		 
							left join mp_star_rating			(nolock) on mp_star_rating.company_id = mp_contacts.company_id	
							LEFT JOIN mp_system_parameters AS Processes (nolock) ON Processes.id = mp_rfq_parts.Post_Production_Process_id AND Processes.sys_key = ''@PostProdProcesses''
							LEFT JOIN mp_mst_materials		(nolock) ON mp_mst_materials.material_id = mp_rfq_parts.material_id
							LEFT JOIN mp_system_parameters AS Unit (nolock) ON Unit.id = mp_parts.part_qty_unit_id AND Unit.sys_key = ''@UNIT2_LIST'' 
							JOIN aspnetusers					(nolock) ON  mp_contacts.user_id = aspnetusers.id
							LEFT JOIN mp_rfq_preferences (nolock)  ON mp_rfq.rfq_id = mp_rfq_preferences.rfq_id
							/* M2-3384 : M & Vision - My RFQs - Search by Buyers Industry -DB */
							LEFT JOIN mp_company_supplier_types mcst (nolock) on mp_companies.company_id = mcst.company_id and mcst.is_buyer = 1  
					WHERE 	mp_rfq.rfq_status_id IN (1,14) 
					'
					+
					/* M2-3615 Vision - Add Directory RFQs under RFQs on the left menu - DB */
					CASE WHEN @IsMfgCommunityRfq =  0 THEN ' and mp_rfq.IsMfgCommunityRfq = 0 ' ELSE ' and mp_rfq.IsMfgCommunityRfq = 1 ' END
					/**/
			   

					set @sql_query1 = @sql_query  + @where_query + @search_query+
					') AS AllRfqs
					left join (select rfq_id , max(status_date) release_date from mp_rfq_release_history group by rfq_id ) rfq_release  on AllRfqs.RFQId = rfq_release.rfq_id		 '
					+ @orderBy_query +
					' OFFSET '+ convert(varchar(50),@PageSize) +'   * ( '+ convert(varchar(50),@PageNumber) + ' - 1) ROWS FETCH NEXT '+ convert(varchar(50),@PageSize) + ' ROWS ONLY'

				END
				ELSE IF @IsDraft = 0 AND @DraftBeforeRelease = 1 AND @IsDraftAfterClose = 0
				BEGIN
				SELECT 10,GETUTCDATE()
					set @sql_query = 
						' 		  
						SELECT  *,TotalCount = count(*) over() FROM(  
		  
						SELECT DISTINCT  
						mp_rfq.rfq_id AS RFQId
						, mp_rfq.rfq_name AS RFQName				 
						, mp_special_files.file_name AS file_name
						, floor(mp_rfq_parts.min_part_quantity)  AS Quantity			 
						, mp_rfq_parts.min_part_quantity_unit AS UnitValue
						, Processes.value AS PostProductionProcessValue
						, mp_mst_materials.material_name_en as  Material 
						, case when category.discipline_name is null then p.discipline_name  when category.discipline_name = p.discipline_name then p.discipline_name else category.discipline_name +'' / ''+ p.discipline_name end AS Process
						, mp_companies.name AS Buyer
						, mp_Companies.company_id as buyer_company_id
						, mp_mst_rfq_buyerStatus.rfq_buyerstatus_li_key AS RFQStatus
						, mp_rfq.rfq_created_on AS RFQCreatedOn
						, mp_rfq.Quotes_needed_by AS QuotesNeededBy
						, mp_rfq.award_date AS AwardDate
						, mp_rfq_supplier_likes.is_rfq_like AS IsRfqLike
						, mp_star_rating.no_of_stars AS NoOfStars
						, '+COALESCE('ThumbnailFile.File_Name','')+' AS RfqThumbnail
						--, MessagesMst.message_date AS message_date	
						, mp_contacts.contact_id AS BuyerContactId	
						, mp_rfq.payment_term_id AS payment_term_id		
						, vw_address.City			AS City		 
						, vw_address.[State]		AS [State]
						, vw_address.CountryId		AS CountryId
						, vw_address.country_name	AS Country	
						, mc.first_name + '' '' +	mc.last_name as BuyerOwner
						, mp_rfq.rfq_quality		AS RFQQuality
						, aspnetusers.Email			AS BuyerEmail
						, (mp_contacts.first_name + '' '' +	mp_contacts.last_name) AS BuyerName
						, mp_rfq_preferences.rfq_pref_manufacturing_location_id AS RFQLocationId
						/*M2-2458 : Buyers - Tile and Row - Add Dates and # of Quotes on to RFQ tiles in MY RFQs  -DB*/
						,(select count(1) from mp_rfq_quote_supplierquote (nolock) 
									where mp_rfq.rfq_id = rfq_id and is_quote_submitted = 1 and is_rfq_resubmitted = 0) as RFQQuoteCount
						,  NULL AS RfqSubmittedDate /* M2-3837 Vision - RFQ Submitted to Pending Priority Time Stamp - DB */
						FROM  mp_rfq							(nolock) 
							JOIN mp_contacts					(nolock) ON mp_rfq.contact_id=mp_contacts.contact_id 
							LEFT JOIN mp_rfq_parts					(nolock) ON mp_rfq.rfq_id = mp_rfq_parts.rfq_id and Is_Rfq_Part_Default =  1
							LEFT JOIN mp_rfq_parts_file				(nolock) ON mp_rfq_parts.rfq_part_id = mp_rfq_parts_file.rfq_part_id AND mp_rfq_parts_file.is_primary_file = 1 	
							LEFT JOIN mp_special_files				(nolock) ON mp_special_files.file_id = mp_rfq_parts_file.file_id
							LEFT JOIN mp_parts						(nolock) ON mp_parts.part_id = mp_rfq_parts.part_id 
							LEFT JOIN mp_mst_rfq_buyerStatus		(nolock) ON mp_rfq.rfq_status_id=mp_mst_rfq_buyerStatus.rfq_buyerstatus_id
							LEFT JOIN mp_companies					(nolock) ON mp_contacts.company_id=mp_companies.company_id
							LEFT JOIN mp_contacts mc				(nolock) ON mp_companies.Assigned_SourcingAdvisor=mc.contact_id
							LEFT JOIN mp_rfq_part_quantity			(nolock) ON mp_rfq_part_quantity.rfq_part_id = mp_rfq_parts.rfq_part_id
							LEFT JOIN mp_mst_part_category	p		(nolock) ON p.part_category_id = mp_rfq_parts.part_category_id 
							/* M2-3202 Buyer and M - Change the tiles and rows to include parent category */
							LEFT JOIN mp_mst_part_category category (nolock) on p.parent_part_category_id=category.part_category_id
							/**/
							LEFT JOIN mp_rfq_supplier_likes	(nolock) ON mp_rfq_supplier_likes.rfq_id = mp_rfq.rfq_id and mp_rfq.contact_id = mp_rfq_supplier_likes.contact_id
							LEFT JOIN mp_special_files			(nolock) AS ThumbnailFile ON ThumbnailFile.file_id = mp_rfq.file_id
							left join vw_address				(nolock) ON mp_contacts.address_Id = vw_address.address_Id			 		 
							left join mp_star_rating			(nolock) on mp_star_rating.company_id = mp_contacts.company_id	
							LEFT JOIN mp_system_parameters AS Processes (nolock) ON Processes.id = mp_rfq_parts.Post_Production_Process_id AND Processes.sys_key = ''@PostProdProcesses''
							LEFT JOIN mp_mst_materials		(nolock) ON mp_mst_materials.material_id = mp_rfq_parts.material_id
							LEFT JOIN mp_system_parameters AS Unit (nolock) ON Unit.id = mp_parts.part_qty_unit_id AND Unit.sys_key = ''@UNIT2_LIST'' 
							JOIN aspnetusers					(nolock) ON  mp_contacts.user_id = aspnetusers.id
							LEFT JOIN mp_rfq_preferences (nolock)  ON mp_rfq.rfq_id = mp_rfq_preferences.rfq_id
							/* M2-3384 : M & Vision - My RFQs - Search by Buyers Industry -DB */
							LEFT JOIN mp_company_supplier_types mcst (nolock) on mp_companies.company_id = mcst.company_id and mcst.is_buyer = 1  
					WHERE 	mp_rfq.rfq_status_id IN (1,14) 
					/* M2-3375 Vision - Add two new statuses to the RFQ list- DB */
					AND EXISTS (SELECT rfq_id FROM mp_rfq_release_history (NOLOCK) WHERE  mp_rfq.rfq_id  = mp_rfq_release_history.rfq_id) 
					AND CONVERT(DATE,mp_rfq.Quotes_needed_by) > CONVERT(DATE,GETUTCDATE()) 
					/**/ 
					'
					+
					/* M2-3615 Vision - Add Directory RFQs under RFQs on the left menu - DB */
					CASE WHEN @IsMfgCommunityRfq =  0 THEN ' and mp_rfq.IsMfgCommunityRfq = 0 ' ELSE ' and mp_rfq.IsMfgCommunityRfq = 1 ' END
					/**/
			   

					set @sql_query1 = @sql_query  + @where_query + @search_query+
					') AS AllRfqs
					left join (select rfq_id , max(status_date) release_date from mp_rfq_release_history group by rfq_id ) rfq_release  on AllRfqs.RFQId = rfq_release.rfq_id		 '
					+ @orderBy_query +
					' OFFSET '+ convert(varchar(50),@PageSize) +'   * ( '+ convert(varchar(50),@PageNumber) + ' - 1) ROWS FETCH NEXT '+ convert(varchar(50),@PageSize) + ' ROWS ONLY'

				END
				ELSE IF @IsDraft = 0 AND @DraftBeforeRelease = 0 AND @IsDraftAfterClose = 1
				BEGIN
				SELECT GETUTCDATE()
					set @sql_query = 
						' 		  
						SELECT  *,TotalCount = count(*) over() FROM(  
		  
						SELECT DISTINCT  
						mp_rfq.rfq_id AS RFQId
						, mp_rfq.rfq_name AS RFQName				 
						, mp_special_files.file_name AS file_name
						, floor(mp_rfq_parts.min_part_quantity)  AS Quantity			 
						, mp_rfq_parts.min_part_quantity_unit AS UnitValue
						, Processes.value AS PostProductionProcessValue
						, mp_mst_materials.material_name_en as  Material 
						, case when category.discipline_name is null then p.discipline_name  when category.discipline_name = p.discipline_name then p.discipline_name else category.discipline_name +'' / ''+ p.discipline_name end AS Process
						, mp_companies.name AS Buyer
						, mp_Companies.company_id as buyer_company_id
						, mp_mst_rfq_buyerStatus.rfq_buyerstatus_li_key AS RFQStatus
						, mp_rfq.rfq_created_on AS RFQCreatedOn
						, mp_rfq.Quotes_needed_by AS QuotesNeededBy
						, mp_rfq.award_date AS AwardDate
						, mp_rfq_supplier_likes.is_rfq_like AS IsRfqLike
						, mp_star_rating.no_of_stars AS NoOfStars
						, '+COALESCE('ThumbnailFile.File_Name','')+' AS RfqThumbnail
						--, MessagesMst.message_date AS message_date	
						, mp_contacts.contact_id AS BuyerContactId	
						, mp_rfq.payment_term_id AS payment_term_id		
						, vw_address.City			AS City		 
						, vw_address.[State]		AS [State]
						, vw_address.CountryId		AS CountryId
						, vw_address.country_name	AS Country	
						, mc.first_name + '' '' +	mc.last_name as BuyerOwner
						, mp_rfq.rfq_quality		AS RFQQuality
						, aspnetusers.Email			AS BuyerEmail
						, (mp_contacts.first_name + '' '' +	mp_contacts.last_name) AS BuyerName
						, mp_rfq_preferences.rfq_pref_manufacturing_location_id AS RFQLocationId
						/*M2-2458 : Buyers - Tile and Row - Add Dates and # of Quotes on to RFQ tiles in MY RFQs  -DB*/
						,(select count(1) from mp_rfq_quote_supplierquote (nolock) 
									where mp_rfq.rfq_id = rfq_id and is_quote_submitted = 1 and is_rfq_resubmitted = 0) as RFQQuoteCount
						,  NULL AS RfqSubmittedDate  /* M2-3837 Vision - RFQ Submitted to Pending Priority Time Stamp - DB */
						FROM  mp_rfq							(nolock) 
							JOIN mp_contacts					(nolock) ON mp_rfq.contact_id=mp_contacts.contact_id 
							LEFT JOIN mp_rfq_parts					(nolock) ON mp_rfq.rfq_id = mp_rfq_parts.rfq_id and Is_Rfq_Part_Default =  1
							LEFT JOIN mp_rfq_parts_file				(nolock) ON mp_rfq_parts.rfq_part_id = mp_rfq_parts_file.rfq_part_id AND mp_rfq_parts_file.is_primary_file = 1 	
							LEFT JOIN mp_special_files				(nolock) ON mp_special_files.file_id = mp_rfq_parts_file.file_id
							LEFT JOIN mp_parts						(nolock) ON mp_parts.part_id = mp_rfq_parts.part_id 
							LEFT JOIN mp_mst_rfq_buyerStatus		(nolock) ON mp_rfq.rfq_status_id=mp_mst_rfq_buyerStatus.rfq_buyerstatus_id
							LEFT JOIN mp_companies					(nolock) ON mp_contacts.company_id=mp_companies.company_id
							LEFT JOIN mp_contacts mc				(nolock) ON mp_companies.Assigned_SourcingAdvisor=mc.contact_id
							LEFT JOIN mp_rfq_part_quantity			(nolock) ON mp_rfq_part_quantity.rfq_part_id = mp_rfq_parts.rfq_part_id
							LEFT JOIN mp_mst_part_category	p		(nolock) ON p.part_category_id = mp_rfq_parts.part_category_id 
							/* M2-3202 Buyer and M - Change the tiles and rows to include parent category */
							LEFT JOIN mp_mst_part_category category (nolock) on p.parent_part_category_id=category.part_category_id
							/**/
							LEFT JOIN mp_rfq_supplier_likes	(nolock) ON mp_rfq_supplier_likes.rfq_id = mp_rfq.rfq_id and mp_rfq.contact_id = mp_rfq_supplier_likes.contact_id
							LEFT JOIN mp_special_files			(nolock) AS ThumbnailFile ON ThumbnailFile.file_id = mp_rfq.file_id
							left join vw_address				(nolock) ON mp_contacts.address_Id = vw_address.address_Id			 		 
							left join mp_star_rating			(nolock) on mp_star_rating.company_id = mp_contacts.company_id	
							LEFT JOIN mp_system_parameters AS Processes (nolock) ON Processes.id = mp_rfq_parts.Post_Production_Process_id AND Processes.sys_key = ''@PostProdProcesses''
							LEFT JOIN mp_mst_materials		(nolock) ON mp_mst_materials.material_id = mp_rfq_parts.material_id
							LEFT JOIN mp_system_parameters AS Unit (nolock) ON Unit.id = mp_parts.part_qty_unit_id AND Unit.sys_key = ''@UNIT2_LIST'' 
							JOIN aspnetusers					(nolock) ON  mp_contacts.user_id = aspnetusers.id
							JOIN mp_rfq_preferences (nolock)  ON mp_rfq.rfq_id = mp_rfq_preferences.rfq_id
							/* M2-3384 : M & Vision - My RFQs - Search by Buyers Industry -DB */
							LEFT JOIN mp_company_supplier_types mcst (nolock) on mp_companies.company_id = mcst.company_id and mcst.is_buyer = 1  
					WHERE 	mp_rfq.rfq_status_id IN (1,14) 
					/* M2-3375 Vision - Add two new statuses to the RFQ list- DB */
					AND EXISTS (SELECT rfq_id FROM mp_rfq_release_history (NOLOCK) WHERE  mp_rfq.rfq_id  = mp_rfq_release_history.rfq_id) 
					AND CONVERT(DATE,mp_rfq.Quotes_needed_by) < CONVERT(DATE,GETUTCDATE()) 
					/**/ 
					'
					+
					/* M2-3615 Vision - Add Directory RFQs under RFQs on the left menu - DB */
					CASE WHEN @IsMfgCommunityRfq =  0 THEN ' and mp_rfq.IsMfgCommunityRfq = 0 ' ELSE ' and mp_rfq.IsMfgCommunityRfq = 1 ' END
					/**/
			   

					set @sql_query1 = @sql_query  + @where_query + @search_query+
					') AS AllRfqs
					left join (select rfq_id , max(status_date) release_date from mp_rfq_release_history group by rfq_id ) rfq_release  on AllRfqs.RFQId = rfq_release.rfq_id		 '
					+ @orderBy_query +
					' OFFSET '+ convert(varchar(50),@PageSize) +'   * ( '+ convert(varchar(50),@PageNumber) + ' - 1) ROWS FETCH NEXT '+ convert(varchar(50),@PageSize) + ' ROWS ONLY'

				END
			/**/

			EXECUTE sp_executesql @sql_query1,N'@CountryId1 INT,@ManufacturingLocationId1 INT', @CountryId1 = @CountryId , @ManufacturingLocationId1 = @ManufacturingLocationId 
			SELECT 11, GETUTCDATE() , @sql_query1
			--SELECT @sql_query1
	END	

	 

END
GO
PRINT N'Creating Procedure [dbo].[proc_get_rpt_AwardDetails]...';


GO


-- EXEC proc_get_rpt_AwardDetails
CREATE PROCEDURE proc_get_rpt_AwardDetails
AS
BEGIN
	SET NOCOUNT ON
	   
	SELECT DISTINCT 
		c.company_id					AS BuyerCompanyId
		, c.name						AS BuyerCompany
		, b.first_name + b.last_name	AS Buyer
		, b.contact_id					AS BuyerId
		, a.rfq_id						AS [Rfq #]
		, a.rfq_name					AS Rfq
		, CONVERT(DATE,a.rfq_created_on)				AS [Rfq Created]
		, A.rfq_status_id
		, d.description					AS [Rfq Status]
		, [Rfq Location]  
		, f.part_name					AS [Part Name]
		, g.discipline_name				AS [Process]
		, CASE WHEN rfq_status_id IN (17,20) THEN NULL ELSE  i.awarded_qty END  [Awarded Qty]
		, CASE WHEN rfq_status_id IN (17,20) THEN NULL ELSE  i.per_unit_price END [Awarded Price]
		, CASE WHEN rfq_status_id IN (17,20) THEN NULL ELSE  i.AwardDate END [Award Date]
		, CASE WHEN rfq_status_id IN (17,20) THEN NULL ELSE  [Supplier Location] END   [Supplier Location] 
		, CASE WHEN rfq_status_id IN (17,20) THEN NULL ELSE  i.SupplierCompanyId END SupplierCompanyId
		, CASE WHEN rfq_status_id IN (17,20) THEN NULL ELSE  i.SupplierCompany END SupplierCompany
		, CASE WHEN rfq_status_id IN (17,20) THEN NULL ELSE  i.SupplierId END SupplierId
		, CASE WHEN rfq_status_id IN (17,20) THEN NULL ELSE  i.Supplier END Supplier
	FROM mp_rfq			(NOLOCK) a
	JOIN mp_contacts	(NOLOCK) b ON a.contact_id = b.contact_id AND b.IsTestAccount = 0
	JOIN mp_companies	(NOLOCK) c ON b.company_id = c.company_id
	JOIN mp_mst_rfq_buyerStatus (NOLOCK) d ON a.rfq_status_id = d.rfq_buyerstatus_id
	JOIN mp_rfq_parts	(NOLOCK) e ON a.rfq_id = e.rfq_id
	JOIN mp_parts		(NOLOCK) f ON e.part_id = f.part_id
	JOIN mp_mst_part_category	(NOLOCK) g ON e.part_category_id = g.part_category_id
	LEFT JOIN 
	(
		SELECT a.rfq_id , STRING_AGG(territory_classification_name,',') [Rfq Location]  
		FROM mp_rfq_preferences		(NOLOCK) a 
		JOIN mp_mst_territory_classification		(NOLOCK) b ON a.rfq_pref_manufacturing_location_id = b.territory_classification_id
		GROUP BY a.rfq_id
	) h ON a.rfq_id = h.rfq_id
	LEFT JOIN 
	(
		SELECT  DISTINCT 
			i.rfq_id
			, k.company_id					AS SupplierCompanyId
			, k.name						AS SupplierCompany
			, j.first_name + ' ' + j.last_name	AS Supplier
			, j.contact_id					AS SupplierId
			, l.rfq_part_id
			, l.rfq_part_quantity_id 
			, l.awarded_qty
			, l.per_unit_price
			, CONVERT(DATE,l.awarded_date) AS AwardDate
			, m.territory_classification_name AS [Supplier Location]
		FROM mp_rfq_quote_supplierquote (NOLOCK) i 
		JOIN mp_contacts	(NOLOCK) j ON i.contact_id = j.contact_id AND i.is_rfq_resubmitted = 0 AND i.is_quote_submitted = 1
		JOIN mp_companies	(NOLOCK) k ON j.company_id = k.company_id
		JOIN mp_rfq_quote_items (NOLOCK) l ON i.rfq_quote_SupplierQuote_id = l.rfq_quote_SupplierQuote_id AND l.is_awrded = 1
		JOIN mp_mst_territory_classification (NOLOCK) m ON k.Manufacturing_location_id = m.territory_classification_id
		--WHERE i.rfq_id = 1179980
	) i ON a.rfq_id = i.rfq_id AND e.rfq_part_id = i.rfq_part_id
	WHERE rfq_status_id IN (6,16,17,20,18) 
	--AND A.rfq_id = 1179980
	ORDER BY [RFQ #] DESC

	--select * from mp_rfq_parts where rfq_id = 1180124
	--select * FROM mp_rfq_quote_supplierquote where rfq_id = 1180124
	--select * FROM mp_rfq_quote_items WHERE rfq_quote_SupplierQuote_id IN (select rfq_quote_SupplierQuote_id FROM mp_rfq_quote_supplierquote where rfq_id = 1180124 AND is_rfq_resubmitted = 0)


END
GO
PRINT N'Creating Procedure [dbo].[proc_get_rpt_BuyersAwardWarning]...';


GO
-- EXEC proc_get_rpt_BuyerswithPartFiles @parStartDate = '2020-01-01', @parEndDate = '2020-12-31'
CREATE PROCEDURE [dbo].[proc_get_rpt_BuyersAwardWarning]
AS
BEGIN

	SET NOCOUNT ON

		SELECT 
			a.contact_id
			,d.email 
			, COUNT( DISTINCT a.rfq_id ) AS total_rfqs
			, COUNT( DISTINCT b.contact_id ) AS total_supplier_quoted
			, DATEDIFF(DAY, CONVERT(DATE,c.last_login_on) , GETUTCDATE()) days_last_login
			, CASE WHEN COUNT( DISTINCT a.rfq_id ) > 5 AND  DATEDIFF(DAY, CONVERT(DATE,c.last_login_on) , GETUTCDATE()) > 30 Then 'Yes' ELSE 'No' END show_banner
		FROM mp_rfq (NOLOCK) a
		JOIN mp_rfq_quote_SupplierQuote (NOLOCK) b ON a.rfq_id = b.rfq_id AND b.is_quote_submitted = 1 AND b.is_rfq_resubmitted = 0
		JOIN mp_contacts (NOLOCK) c ON a.contact_id = c.contact_id
		JOIN AspNetUsers (NOLOCK) d ON c.user_id = d.id
		WHERE
			a.rfq_status_id = 5
			AND DATEDIFF(DAY, CONVERT(DATE,a.award_date),CONVERT(DATE,GETUTCDATE())) >= 7
			AND CONVERT(DATE,a.rfq_created_on) > = '2020-08-01'
		GROUP BY a.contact_id,d.email , DATEDIFF(DAY, CONVERT(DATE,c.last_login_on) , GETUTCDATE())
		ORDER BY days_last_login
END
GO
PRINT N'Creating Procedure [dbo].[proc_get_rpt_QuoteGenerated]...';


GO
/*
    By Soel
	could I get a report document that I can enter start date / end date and it returns all suppliers who generated a quote in that period and the company name
	Example:
	XYZ Company -- 100
	ABC company --2

*/
 
---- exec [dbo].[proc_get_rpt_QuoteGenerated] '2022-12-01'  , '2023-04-30'
CREATE PROCEDURE [dbo].[proc_get_rpt_QuoteGenerated] 
(
	@StartDate DATE = null
	,@EndDate   DATE = null
)
AS
BEGIN

	SELECT c.company_id , d.name, COUNT(DISTINCT a.rfq_id) [GeneratedQuote]
	FROM mp_rfq (NOLOCK) a
	JOIN mp_rfq_quote_SupplierQuote(NOLOCK) b ON a.rfq_id = b.rfq_id
	JOIN mp_contacts(NOLOCK) c ON c.contact_id = b.contact_id
	JOIN mp_companies (NOLOCK) d ON d.company_id = c.company_id
	WHERE CAST(b.quote_date AS DATE) BETWEEN   ISNULL(@StartDate,b.quote_date)  AND  ISNULL(@EndDate  ,b.quote_date)
	AND b.is_quote_submitted = 1 AND b.is_rfq_resubmitted = 0
	AND C.IsTestAccount = 0
	--@StartDate  AND  @EndDate  
	GROUP BY c.company_id,d.name
	ORDER BY [GeneratedQuote] desc, c.company_id
END
GO
PRINT N'Creating Procedure [dbo].[proc_get_rpt_RfqStatusByClosedDate]...';


GO

--  EXEC proc_get_rpt_RfqStatusByClosedDate  @FromClosedDate =  '01/01/22' , @ToClosedDate = '01/31/22'
CREATE PROCEDURE [dbo].[proc_get_rpt_RfqStatusByClosedDate]
(
	@FromClosedDate DATE =  NULL
	,@ToClosedDate DATE = NULL
)
AS
BEGIN

	-- M2-4576  Buyer - RFQ Status Reports - DB 
	SET NOCOUNT ON
	
	IF @FromClosedDate IS NULL 
		SET @FromClosedDate = '2022-01-01'

	IF @ToClosedDate IS NULL 
		SET @ToClosedDate = '2022-01-31'

	SELECT 
		ISNULL(d.territory_classification_name, 'No Rfq Location')  AS [Rfq Location]
		, ISNULL(b.description, 'No Rfq Status')  AS [Rfq Status]
		, COUNT(DISTINCT a.rfq_id) AS [No of Rfq's]
	FROM mp_rfq (NOLOCK) a
	JOIN (SELECT DISTINCT rfq_id FROM mp_rfq_release_history (NOLOCK)) a1 ON a.rfq_id = a1.rfq_id
	LEFT JOIN mp_mst_rfq_buyerstatus (NOLOCK) b ON a.rfq_status_id = b.rfq_buyerstatus_id
	LEFT JOIN dbo.mp_rfq_preferences (NOLOCK) c ON a.rfq_id = c.rfq_id
	LEFT JOIN dbo.mp_mst_territory_classification (NOLOCK) d ON c.rfq_pref_manufacturing_location_id = d.territory_classification_id
	WHERE CAST(a.Quotes_needed_by AS DATE)  BETWEEN @FromClosedDate AND @ToClosedDate
	GROUP BY 
		ISNULL(d.territory_classification_name, 'No Rfq Location')
		,ISNULL(b.description, 'No Rfq Status')
	ORDER BY [Rfq Location] , [Rfq Status]

END
GO
PRINT N'Creating Procedure [dbo].[proc_get_rpt_RFQUnlockCount]...';


GO
/*
    By Eddie
  	Need a report, all the growth users and how many unlocks they had had.

*/
 
---- exec [dbo].[proc_get_rpt_RFQUnlockCount]  
CREATE PROCEDURE [dbo].[proc_get_rpt_RFQUnlockCount] 
AS
BEGIN

	SELECT  
			a.company_id [Company Id]
			, c.name     [Name]
			, b.subscription_start [Subscription Start]
			, b.subscription_end   [Subscription End]
				  --, datediff(dd,b.subscription_start ,b.subscription_end) noofdays
			, (SELECT count(1) FROM mpGrowthPackageUnlockRFQsInfo(NOLOCK) c WHERE c.CompanyId = a.company_id 
					AND UnlockDate BETWEEN b.subscription_start AND b.subscription_end AND c.IsDeleted = 0 ) UnlockRFQCount
			, b.status 
			, b.RequestType
		FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
		JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON a.id= b.customer_id
		JOIN mp_companies ( nolock) c on c.company_id = a.company_id
		WHERE a.gateway_id = 310 and a.company_id !=0
	--	 and b.status = 'active'
		ORDER BY a.company_id , b.id 
END
GO
PRINT N'Creating Procedure [dbo].[proc_get_rpt_SupplierPerformance_20220914]...';


GO

/*
EXEC [proc_get_rpt_SupplierPerformance_20220914] 

	@parRange	= 'Last 7 Days'
	,@parStartDate	 = '2022-01-01'
	,@parEndDate	 = '2022-02-01'


*/

CREATE PROCEDURE [dbo].proc_get_rpt_SupplierPerformance_20220914
(
	@parRange	VARCHAR(100) = NULL
	,@parStartDate	DATE = NULL
	,@parEndDate	DATE = NULL
)
AS
BEGIN
	-- M2-3411 Report - Supplier Performance Report
	SET NOCOUNT ON

	DECLARE @StartDate	DATETIME	
	DECLARE @EndDate	DATETIME	
	DECLARE @Duration	INT

	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_UserLogin
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_MostRecentQuoteDate
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_MostRecentAwardDate
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_Quotesgenerated
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_TotalAwards
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_RFQsViewed
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_RFQsliked
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_RFQsdisliked
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_RFQsmarkedforquoting
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_buyerssavedtocontacts
	

	IF (@parRange = 'No Selection') AND  (@parStartDate != '1900-01-01' ) AND  (@parEndDate != '1900-01-01' )
	BEGIN
		
		SET @StartDate = @parStartDate
		SET @EndDate =  @parEndDate

	END 
	ELSE IF (@parRange != '' )
	BEGIN

		IF @parRange = 'Last 7 Days'
		BEGIN
			SET @Duration =  7
		END

		IF @parRange = 'Last 15 Days'
		BEGIN
			SET @Duration =  15
		END

		IF @parRange = 'Last 1 Month'
		BEGIN
			SET @Duration =  30
		END

		IF @parRange = 'Last 3 Months'
		BEGIN
			SET @Duration =  90
		END

		IF @parRange = 'Last 6 Months'
		BEGIN
			SET @Duration =  180
		END

		IF @parRange = 'Last 9 Months'
		BEGIN
			SET @Duration =  270
		END

		IF @parRange = 'Last 1 Year'
		BEGIN
			SET @Duration =  365
		END


		SET @StartDate = DATEADD(DAY,-@Duration,GETUTCDATE())
		SET @EndDate =  GETUTCDATE()

	END

	--SELECT @parRange , @parStartDate ,@parEndDate ,@StartDate ,@EndDate

	-- list of paid manufacturers
	SELECT company_id  AS CompanyId	,b.value AS PaidStatus INTO #tmpRptSupplierPerformanceActiveSupplier
	FROM mp_registered_supplier (NOLOCK)  a 
	JOIN mp_system_parameters (NOLOCK) b ON a.account_type = b.id AND sys_key = '@ACCOUNT_TYPE'
	--WHERE company_id = 494545

	
	-- list of paid manufacturers	
	SELECT c.company_id , COUNT(1) AS login_count INTO #tmpRptSupplierPerformanceActiveSupplier_UserLogin
	FROM mp_user_logindetail (NOLOCK) f 
	JOIN mp_contacts	(NOLOCK) c ON c.contact_id = f.contact_id
	WHERE CONVERT(DATE,login_datetime) BETWEEN @StartDate AND @EndDate
	GROUP BY c.company_id

	SELECT contact_id , MAX(CONVERT(DATE,quote_date)) quote_date INTO #tmpRptSupplierPerformanceActiveSupplier_MostRecentQuoteDate
	FROM mp_rfq_quote_supplierquote (NOLOCK) 
	WHERE is_quote_submitted = 1
	GROUP BY contact_id

	SELECT c1.contact_id , MAX(CONVERT(DATE,awarded_date)) awarded_date INTO #tmpRptSupplierPerformanceActiveSupplier_MostRecentAwardDate
	FROM mp_rfq_quote_supplierquote (NOLOCK) c1 
	JOIN mp_rfq_quote_items (NOLOCK) d1 ON c1.rfq_quote_SupplierQuote_id = d1.rfq_quote_SupplierQuote_id 
	WHERE d1.status_id= 6 AND is_awrded = 1
	GROUP BY c1.contact_id

	SELECT b.company_id , COUNT(DISTINCT c1.rfq_id) quoted_rfq_count INTO #tmpRptSupplierPerformanceActiveSupplier_Quotesgenerated
	FROM mp_rfq_quote_supplierquote (NOLOCK) c1 
	JOIN mp_contacts (NOLOCK)   b ON c1.contact_id = b.contact_id
	WHERE is_quote_submitted = 1 AND c1.quote_date BETWEEN @StartDate AND @EndDate
	GROUP BY b.company_id

	SELECT b.company_id , COUNT(DISTINCT c1.rfq_id) awarded_rfq_count INTO #tmpRptSupplierPerformanceActiveSupplier_TotalAwards
	FROM mp_rfq_quote_supplierquote (NOLOCK) c1 
	JOIN mp_rfq_quote_items (NOLOCK) d1 ON c1.rfq_quote_SupplierQuote_id = d1.rfq_quote_SupplierQuote_id 
	JOIN mp_contacts (NOLOCK)   b ON c1.contact_id = b.contact_id
	WHERE d1.status_id= 6 AND is_awrded = 1 AND c1.quote_date BETWEEN @StartDate AND @EndDate
	GROUP BY b.company_id

	SELECT b.company_id , COUNT(DISTINCT rfq_id ) viewed_rfq_count INTO #tmpRptSupplierPerformanceActiveSupplier_RFQsViewed
	FROM mp_rfq_supplier_read (NOLOCK) a
	JOIN mp_contacts  (NOLOCK) b ON a.supplier_id = b.contact_id
	WHERE read_date BETWEEN @StartDate AND @EndDate
	GROUP BY b.company_id

	SELECT b.company_id , COUNT(DISTINCT rfq_id ) liked_rfq_count INTO #tmpRptSupplierPerformanceActiveSupplier_RFQsliked
	FROM mp_rfq_supplier_likes (NOLOCK) a
	JOIN mp_contacts  (NOLOCK) b ON a.contact_id = b.contact_id
	WHERE like_date BETWEEN @StartDate AND @EndDate
	AND is_rfq_like = 1
	GROUP BY b.company_id

	SELECT b.company_id , COUNT(DISTINCT rfq_id ) disliked_rfq_count INTO #tmpRptSupplierPerformanceActiveSupplier_RFQsdisliked
	FROM mp_rfq_supplier_likes (NOLOCK) a
	JOIN mp_contacts  (NOLOCK) b ON a.contact_id = b.contact_id
	WHERE like_date BETWEEN @StartDate AND @EndDate
	AND is_rfq_like = 0
	GROUP BY b.company_id

	SELECT b.company_id , COUNT(DISTINCT rfq_id )  marked_for_quoting_rfq_count  INTO #tmpRptSupplierPerformanceActiveSupplier_RFQsmarkedforquoting
	FROM mp_rfq_quote_suplierstatuses (NOLOCK) a
	JOIN mp_contacts (NOLOCK)   b ON a.contact_id = b.contact_id
	WHERE creation_date BETWEEN @StartDate AND @EndDate
	AND rfq_userStatus_id = 2 
	GROUP BY b.company_id

	SELECT b.company_id  , COUNT(DISTINCT bookdetails.company_id) buyers_saved_to_contacts_count INTO #tmpRptSupplierPerformanceActiveSupplier_buyerssavedtocontacts
	FROM mp_books book  
	JOIN mp_book_details bookdetails ON book.book_id=bookdetails.book_id
	JOIN mp_contacts (NOLOCK)   b ON book.contact_id = b.contact_id
	WHERE creation_date BETWEEN @StartDate AND @EndDate
	GROUP BY b.company_id

		
	--SELECT @StartDate , @EndDate 
	SELECT  
		ISNULL(e.PaidStatus,'Basic') AS [PaidStatus]
		,b.company_id									AS	[CompanyId]
		,(CASE WHEN LEN(b.name) > 30  THEN LEFT(b.name, 30) + '...' ELSE b.name END)		AS	[Company]
		,g.territory_classification_name AS [MFG Location]
		,(CASE WHEN LEN(d.first_name +' '+ d.last_name) > 20  THEN LEFT(d.first_name +' '+ d.last_name, 20) + '...' ELSE d.first_name +' '+ d.last_name END) 					AS	[Account Owner]
		,(CASE WHEN LEN(c.first_name +' '+ c.last_name) > 20  THEN LEFT(c.first_name +' '+ c.last_name, 20) + '...' ELSE c.first_name +' '+ c.last_name END) 					AS	[Customer Rep]
		,COUNT(DISTINCT a.contact_id)				AS  [No of Users]
		,MAX(CONVERT(DATE,a.last_login_on))			AS	[Most Recent Login]
		,MAX(quote_date)							AS	[Most Recent Quote Date]
		,MAX(awarded_date)							AS  [Most Recent Award Date]
		,ISNULL(login_count,0)						AS	[# of Logins]
		,ISNULL(quoted_rfq_count,0)					AS	[# of Quotes Generated]
		,ISNULL(awarded_rfq_count,0)				AS	[# of Total Awards]
		,ISNULL(viewed_rfq_count,0)					AS	[# of RFQs Viewed]
		,ISNULL(liked_rfq_count,0)					AS	[# of RFQs Liked]
		,ISNULL(disliked_rfq_count,0)				AS	[# of RFQs Disliked]
		,ISNULL(marked_for_quoting_rfq_count,0)		AS	[# of RFQs marked for quoting]
		,ISNULL(buyers_saved_to_contacts_count,0)	AS	[# of buyers saved to contacts]
		
		
	FROM 
	(
	
		SELECT company_id FROM  #tmpRptSupplierPerformanceActiveSupplier_Quotesgenerated
		UNION
		SELECT company_id FROM  #tmpRptSupplierPerformanceActiveSupplier_TotalAwards
		UNION
		SELECT company_id FROM  #tmpRptSupplierPerformanceActiveSupplier_RFQsViewed
		UNION
		SELECT company_id FROM  #tmpRptSupplierPerformanceActiveSupplier_RFQsliked
		UNION
		SELECT company_id FROM  #tmpRptSupplierPerformanceActiveSupplier_RFQsdisliked
		UNION
		SELECT company_id FROM  #tmpRptSupplierPerformanceActiveSupplier_RFQsmarkedforquoting
		UNION
		SELECT CompanyId FROM  #tmpRptSupplierPerformanceActiveSupplier
	
	) e1
	JOIN mp_companies		(NOLOCK) b ON b.company_id = e1.company_id
	JOIN mp_contacts		(NOLOCK) a ON a.company_id = b.company_id AND a.is_buyer = 0 AND a.IsTestAccount = 0
	LEFT JOIN #tmpRptSupplierPerformanceActiveSupplier e ON b.company_id = e.CompanyId
	LEFT JOIN mp_contacts	(NOLOCK) c ON b.assigned_customer_rep = c.contact_id
	LEFT JOIN mp_contacts	(NOLOCK) d ON b.assigned_sourcingadvisor = d.contact_id
	LEFT JOIN mp_mst_territory_classification (NOLOCK) g ON b.manufacturing_location_id	= g.territory_classification_id
	LEFT JOIN 
	(
		SELECT * FROM #tmpRptSupplierPerformanceActiveSupplier_UserLogin
	) UserLogin ON e1.company_id = UserLogin.company_id 
	LEFT JOIN
	(
		SELECT * FROM #tmpRptSupplierPerformanceActiveSupplier_MostRecentQuoteDate
	) [MostRecentQuoteDate] ON a.contact_id = [MostRecentQuoteDate].contact_id 
	LEFT JOIN 
	(
			SELECT * FROM #tmpRptSupplierPerformanceActiveSupplier_MostRecentAwardDate
	) [MostRecentAwardDate]  ON a.contact_id = [MostRecentAwardDate].contact_id 
	LEFT JOIN 
	(

		SELECT * FROM #tmpRptSupplierPerformanceActiveSupplier_Quotesgenerated
	)	[#ofQuotesgenerated]  ON e1.company_id = [#ofQuotesgenerated].company_id 
	LEFT JOIN
	(
		SELECT * FROM #tmpRptSupplierPerformanceActiveSupplier_TotalAwards
	) [#ofTotalAwards] ON e1.company_id = [#ofTotalAwards].company_id 
	LEFT JOIN
	(
		SELECT * FROM #tmpRptSupplierPerformanceActiveSupplier_RFQsViewed
	) [#ofRFQsViewed] ON e1.company_id = [#ofRFQsViewed].company_id
	LEFT JOIN
	(
		SELECT * FROM #tmpRptSupplierPerformanceActiveSupplier_RFQsliked
	) [#ofRFQsliked] ON e1.company_id = [#ofRFQsliked].company_id
	LEFT JOIN
	(
		SELECT * FROM #tmpRptSupplierPerformanceActiveSupplier_RFQsdisliked
	) [#ofRFQsdisliked] ON e1.company_id = [#ofRFQsdisliked].company_id
	LEFT JOIN
	(
		SELECT * FROM #tmpRptSupplierPerformanceActiveSupplier_RFQsmarkedforquoting
	) [#ofRFQsmarkedforquoting] ON e1.company_id = [#ofRFQsmarkedforquoting].company_id
	LEFT JOIN
	(
		SELECT * FROM #tmpRptSupplierPerformanceActiveSupplier_buyerssavedtocontacts
	) [#ofbuyerssavedtocontacts]  ON e1.company_id = [#ofbuyerssavedtocontacts].company_id
	WHERE  
	b.company_id <> 0
	AND a.IsTestAccount = 0
	GROUP BY 
		b.company_id
		,b.name			
		,c.first_name +' '+ c.last_name
		,d.first_name +' '+ d.last_name 
		,g.territory_classification_name
		,e.PaidStatus
		,ISNULL(login_count,0)
		,ISNULL(quoted_rfq_count,0)					
		,ISNULL(awarded_rfq_count,0)				
		,ISNULL(viewed_rfq_count,0)					
		,ISNULL(liked_rfq_count,0)					
		,ISNULL(disliked_rfq_count,0)				
		,ISNULL(marked_for_quoting_rfq_count,0)		
		,ISNULL(buyers_saved_to_contacts_count,0)	
	ORDER BY Company



	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_UserLogin
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_MostRecentQuoteDate
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_MostRecentAwardDate
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_Quotesgenerated
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_TotalAwards
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_RFQsViewed
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_RFQsliked
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_RFQsdisliked
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_RFQsmarkedforquoting
	DROP TABLE IF EXISTS #tmpRptSupplierPerformanceActiveSupplier_buyerssavedtocontacts
		 
END
GO
PRINT N'Creating Procedure [dbo].[proc_get_StripeSubscriptionCurrentStatus]...';


GO


/*
M2-5219 MixPanel - Complete new supplier events from API side

exec [dbo].[proc_get_StripeSubscriptionCurrentStatus]  'sub_1NkT3SGWEpBLxDeP8Z7bbJ7N' 

*/
CREATE   PROCEDURE [dbo].[proc_get_StripeSubscriptionCurrentStatus] 
(
	@StripeSubscriptionId VARCHAR(100)
)
AS
BEGIN

	;with cte as 
		(
			SELECT   max(b.subscription_start)  subscription_start ,max(b.subscription_end) subscription_end
			FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
			JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON a.id= b.customer_id
			WHERE b.subscription_id = @StripeSubscriptionId
		)  
		SELECT  TOP 1    
		CASE WHEN  c.account_type = 84 THEN 'Growth' 
			   WHEN  c.account_type = 313 THEN 'Starter'
			   ELSE NULL END AS [AccountType]
		, b.status AS [Status]
		FROM [dbo].[mp_gateway_subscription_customers] (NOLOCK) a
		JOIN [dbo].[mp_gateway_subscriptions] (NOLOCK) b ON a.id= b.customer_id
		JOIN cte on cte.subscription_start = b.subscription_start and cte.subscription_end = b.subscription_end
		JOIN mp_registered_supplier (nolock)c on c.company_id = a.company_id
		WHERE a.gateway_id = 310 
		AND  b.subscription_id = @StripeSubscriptionId
		ORDER BY b.ID DESC


END
GO
PRINT N'Creating Procedure [dbo].[proc_get_supplier_mycompanyrfqs_list_bk_hotfix]...';


GO

/*

declare @p22 dbo.tbltype_ListOfProcesses
--insert into @p22 values(2)


exec [proc_get_supplier_mycompanyrfqs_list] 
@RfqType=1
,@SupplierID=1337848
,@SupplierCompID=1768018
,@PageNumber=1
,@PageSize=300
,@SearchText=N''
,@orderby=N''
,@IsOrderByDesc=1
,@ProcessIDs=@p22
,@SelectedSupplierId = null

*/
Create procedure [dbo].[proc_get_supplier_mycompanyrfqs_list_bk_hotfix]
(
	@RfqType			int,	 
	@SupplierID			int,
	@SupplierCompID		int,
	@SearchText			varchar(150)	= null,	
	@ProcessIDs			as tbltype_ListOfProcesses			readonly,
	@PageNumber			int		= 1,
	@PageSize			int		= 24,
	@IsOrderByDesc		bit		='true',
	@OrderBy			varchar(100)	= null,
	@CurrentDate		datetime		= null ,
	@SelectedSupplierId   INT = NULL
)
as
begin

	set nocount on
	/*
		 =============================================
		 Create date:  Oct 14,2019
		 Description:  List of RFQ based on supplier location and capabilities
		 Modification:
		 Oct 14,2019 - M2-2196 M - My RFQ's page - Saved Search module - Initial State : DB
		 Apr 06,2020 - M2-2739 Stripe - Capabilities selection for gold & platinum subscription - DB
		 =================================================================
	
		/1	=> MyRFQ's => All Tab => AllRFQ's
		/4	=> MyRFQ's => All Tab => Quoted RFQ's
		/5	=> MyRFQ's => All Tab => Decline Quote's
		/6	=> MyRFQ's => All Tab => Awarded Quote's
		/7	=> MyRFQ's => All Tab => Mark for Quoting
		
		
		/51	=> MyRFQ's => Liked Tab => AllRFQ's
		/54	=> MyRFQ's => Liked Tab => Quoted RFQ's
		/55	=> MyRFQ's => Liked Tab => Decline Quote's
		/56	=> MyRFQ's => Liked Tab => Awarded Quote's
		/57	=> MyRFQ's => Liked Tab => Mark for Quoting 

		/101	=> MyRFQ's => DisLiked Tab => AllRFQ's
		/104	=> MyRFQ's => DisLiked Tab => Quoted RFQ's
		/105	=> MyRFQ's => DisLiked Tab => Decline Quote's
		/106	=> MyRFQ's => DisLiked Tab => Awarded Quote's
		/107	=> MyRFQ's => DisLiked Tab => Mark for Quoting
	
	
	*/
	
	declare @is_registered_supplier		bit = 0 
	declare @is_stripe_supplier			bit = 0 
	declare @manufacturing_location_id	smallint  
	declare @company_capabilities		int  = 0
	declare @sortorder					varchar(10) 
	declare @inputdate					varchar(8) 
	declare @rfqlocation				int
	declare @is_premium_supplier		int
	declare @where_query				nvarchar(max)
	declare @extra_field				nvarchar(max)
	declare @latitude					float=null
	declare @longitude					float=null
	declare @proximities_value			varchar(50)
	declare @processids1				as tbltype_ListOfProcesses 
		
	declare @blacklisted_rfqs table (rfq_id int)
	declare @sql_query_rfq_list_based_on_processes nvarchar(max)
	/* May 4, 2020 As discussed with Eddie & Beau Martin , For supplier after taking RFQ capabilities, we need to hide buyer info & restrict supplier to download part files for profile capabilities RFQ’s as we do for basic supplier.*/
	declare @IsSubscriptionSupplier		bit = 0
	/**/


	drop table if exists #rfq_list
	drop table if exists #rfq_list_for_parts_search
	drop table if exists #rfqlocation  -- /*  M2-2087 Clone up to 3 RFQ's for 3 regions - API */
	drop table if exists #rfq_likes
	drop table if exists #filtered_rfq_list
	drop table if exists #geocode

	create table #rfq_list (rfq_id int)
	create table #rfq_list_for_parts_search (rfq_id int)
	create table #rfqlocation (rfq_location int) -- /*  M2-2087 Clone up to 3 RFQ's for 3 regions - API */
	create table #filtered_rfq_list (rfq_id int) -- /*  Oct 14,2019 - M2-2196 M - My RFQ's page - Saved Search module - Initial State : DB */

	/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
	CREATE TABLE #tmp_mycompany_suppliers (SupplierId INT)
	/**/

	/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
	IF @SelectedSupplierId IS NULL
	BEGIN
		INSERT INTO #tmp_mycompany_suppliers (SupplierId)
		SELECT contact_id from mp_contacts where company_id = @SupplierCompID
	END
	ELSE
	BEGIN
		INSERT INTO #tmp_mycompany_suppliers (SupplierId) SELECT @SelectedSupplierId
	END
	/**/

	if @currentdate is null
	begin
		set @inputdate = convert(varchar(8),format(getutcdate(),'yyyyMMdd'))
		set @currentdate = getutcdate()
	end
	else
	begin
		set @inputdate = convert(varchar(8),format(@currentdate,'yyyyMMdd'))
	end

	set @is_registered_supplier = (select is_registered from mp_registered_supplier (nolock)  where company_id = @SupplierCompID)
	set @is_premium_supplier = isnull((select account_type from mp_registered_supplier (nolock)  where company_id = @SupplierCompID),83)
	set @manufacturing_location_id  = (select manufacturing_location_id from mp_companies (nolock) where company_id = @SupplierCompID)
	set @company_capabilities = 
	(
		select count(1) from
		(
			select part_category_id from mp_company_processes  (nolock) where  company_id = @SupplierCompID
			/* M2-2739 */
			union
			select part_category_id from  mp_gateway_subscription_company_processes (nolock)  where  company_id = @SupplierCompID
			/**/
		) a
	)

	SET @IsSubscriptionSupplier =
		(
			CASE	
				WHEN (SELECT COUNT(1) FROM mp_gateway_subscription_company_processes (NOLOCK)  WHERE  company_id =  @SupplierCompID AND is_active = 1)> 0 THEN CAST('true' AS BIT) 
				ELSE CAST('false' AS BIT) 
			END 
		)

	set @is_stripe_supplier =
							(case	when (select count(1) from mp_gateway_subscription_company_processes (nolock)  where  company_id =  @SupplierCompID and is_active = 1)> 0 then cast('true' as bit) else cast('false' as bit) end )

	

	/*  M2-2087 Clone up to 3 RFQ's for 3 regions - API */
	if @manufacturing_location_id = 4 
		insert into #rfqlocation values (7), (4)

	if @manufacturing_location_id = 5
		insert into #rfqlocation values (7), (5)

	if @manufacturing_location_id not in (4,5)
		insert into #rfqlocation values (@manufacturing_location_id)
	/**/
	

    insert into @blacklisted_rfqs (rfq_id)
    select distinct c.rfq_id 
	from mp_book_details					a (nolock)
    join mp_books							b (nolock) on a.book_id = b.book_id 
    join mp_rfq								c (nolock) on b.contact_id = c.contact_id
	left join mp_rfq_quote_supplierquote	f (nolock) on c.rfq_id = f.rfq_id and f.contact_id   in
				/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
				(
					select supplierid from #tmp_mycompany_suppliers
				)
				/**/
	left join mp_rfq_quote_items			e (nolock) on f.rfq_quote_SupplierQuote_id= e.rfq_quote_SupplierQuote_id
    where bk_type= 5 and a.company_id = @SupplierCompID and  ((f.is_quote_submitted = 0 or f.is_quote_submitted is null)and  isnull(e.is_awrded,0) = 0)
	union  -- exclude rfq's for black listed buyer which are awarded & quoted 
	select distinct c.rfq_id  
	from mp_book_details					a (nolock) 
    join mp_books							b (nolock) on a.book_id = b.book_id  and b.contact_id   in
				/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
				(
					select supplierid from #tmp_mycompany_suppliers
				)
				/**/
	join mp_contacts						d (nolock) on a.company_id =  d.company_id
	join mp_rfq								c (nolock) on d.contact_id = c.contact_id
	left join mp_rfq_quote_supplierquote	f (nolock) on c.rfq_id = f.rfq_id and f.contact_id   in
				/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
				(
					select supplierid from #tmp_mycompany_suppliers
				)
				/**/
	left join mp_rfq_quote_items			e (nolock) on f.rfq_quote_SupplierQuote_id= e.rfq_quote_SupplierQuote_id
    where bk_type= 5 and  ((f.is_quote_submitted = 0 or f.is_quote_submitted is null)and  isnull(e.is_awrded,0) = 0)

	if (@RfqType in (1,14,18)) and (@OrderBy is null or @OrderBy = '' )
		set @OrderBy  = 'release_date'
	else if (@RfqType in (3)) and (@OrderBy is null or @OrderBy = '' )
		set @OrderBy  = ''
	else if (@OrderBy is null or @OrderBy = '' )
		set @OrderBy  = 'quoteby'

	select rfq_id ,is_rfq_like into #rfq_likes from  mp_rfq_supplier_likes a	(nolock) where contact_id  in
	/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
	(
		select supplierid from #tmp_mycompany_suppliers
	)
	/**/

	/*  Oct 14,2019 - M2-2196 M - My RFQ's page - Saved Search module - Initial State : DB */
	set @sql_query_rfq_list_based_on_processes=			
	'
	insert into #rfq_list (rfq_id)
	select distinct a.rfq_id 
	from mp_rfq			a (nolock) 
	join mp_rfq_parts	b (nolock) on a.rfq_id = b.rfq_id 
	join mp_parts		c (nolock) on b.part_id  = c.part_id '
	+
	case 
		when @RfqType in (1,51,101) then
			' and a.rfq_status_id = 3
			and format(a.quotes_needed_by,''yyyyMMdd'') >= '''+@inputdate+''' 
			join mp_rfq_preferences		mrp (nolock) on a.rfq_id = mrp.rfq_id and mrp.rfq_pref_manufacturing_location_id in (select * from #rfqlocation)  
			'	
		when @RfqType in (4,54,104) then
			' and a.rfq_status_id in  (3 , 5, 6 ) 
			join mp_rfq_quote_SupplierQuote	mrqsq	(nolock) on mrqsq.rfq_id = a.rfq_id and mrqsq.contact_id   in
				/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
				(
					select supplierid from #tmp_mycompany_suppliers
				)
				/**/  '
		when @RfqType in (5,55,105) then
			' and a.rfq_status_id in  (3 , 5, 6 ) 
			  join mp_rfq_quote_SupplierQuote	mrqsq	(nolock) on mrqsq.rfq_id = a.rfq_id and mrqsq.contact_id   in
				/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
				(
					select supplierid from #tmp_mycompany_suppliers
				)
				/**/  '
		when @RfqType in (6,56,106) then
			'  
			  join mp_rfq_quote_SupplierQuote	mrqsq	(nolock) on mrqsq.rfq_id = a.rfq_id and mrqsq.contact_id   in
				/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
				(
					select supplierid from #tmp_mycompany_suppliers
				)
				/**/  '
		when @RfqType in (7,57,107) then
			'  
			  join mp_rfq_quote_suplierstatuses	mrqss	(nolock) on a.rfq_id = mrqss.rfq_id and mrqss.contact_id  in
				/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
				(
					select supplierid from #tmp_mycompany_suppliers
				)
				/**/   and rfq_userStatus_id in (1, 2)
			  '
		else ' '
	end
	+
	'
	join
	(
		select distinct c.part_category_id 
		from 
		mp_mst_part_category b  (nolock)
		join mp_mst_part_category c  (nolock) on b.parent_part_category_id = c.parent_part_category_id 
		'
		+
		case 
			when @company_capabilities > 0  and  @RfqType in ( 1,6,7,51,101) then 
				' join 
				  (
						select company_id,part_category_id from  mp_company_processes a	(nolock)   where company_id = '+ convert(varchar(50),@SupplierCompID)+'
						/* M2-2739 */
						union
						select company_id,part_category_id from  mp_gateway_subscription_company_processes a (nolock)   where company_id = '+ convert(varchar(50),@SupplierCompID)+'
						/**/
				  ) a on a.part_category_id = b.part_category_id '
			else ' '
		end
		+
		'
		where  c.status_id = 2
		and 
		(
			(
				c.part_category_id in (select processId from @processids1)
			)
			OR 
			(
				(select count(processId) from  @processids1 ) = 0)
			)				
	) d on b.part_category_id = d.part_category_id
	'

	--select @sql_query_rfq_list_based_on_processes
	--select * from #rfq_list

	exec sp_executesql  @sql_query_rfq_list_based_on_processes 
	,N'@processids1  tbltype_ListOfProcesses readonly'
	,@processids1  = @Processids	
	


	/* Oct 14,2019 - M2-2196 M - My RFQ's page - Saved Search module - Initial State : DB */
	set @sql_query_rfq_list_based_on_processes=			
	'
	insert into #filtered_rfq_list (rfq_id)
	select distinct a.rfq_id 
	from mp_rfq			a	(nolock) 
	join mp_rfq_parts	b	(nolock) on a.rfq_id = b.rfq_id 
	join mp_parts		c	(nolock) on b.part_id  = c.part_id 
	join mp_contacts	mc	(nolock) on a.contact_id = mc.contact_id 
	join mp_companies	mcom	(nolock) on mc.company_id = mcom.company_id 
	'
	+
	case 
		when @RfqType in (1,51,101) then
			' and a.rfq_status_id = 3
			 and format(a.quotes_needed_by,''yyyyMMdd'') >= '''+@inputdate+''' 
			 join mp_rfq_preferences		mrp (nolock) on a.rfq_id = mrp.rfq_id and mrp.rfq_pref_manufacturing_location_id in (select * from #rfqlocation)  
			'	
		when @RfqType in (4,54,104) then
			' and a.rfq_status_id in  (3 , 5, 6 ) 
			join mp_rfq_quote_SupplierQuote	mrqsq	(nolock) on mrqsq.rfq_id = a.rfq_id and mrqsq.contact_id   in
				/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
				(
					select supplierid from #tmp_mycompany_suppliers
				)
				/**/ '
		when @RfqType in (5,54,104) then
			' and a.rfq_status_id in  (3 , 5, 6 ) 
			join mp_rfq_quote_SupplierQuote	mrqsq	(nolock) on mrqsq.rfq_id = a.rfq_id and mrqsq.contact_id   in
				/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
				(
					select supplierid from #tmp_mycompany_suppliers
				)
				/**/ '
		when @RfqType in (6,56,106) then
			' 
			  join mp_rfq_quote_SupplierQuote	mrqsq	(nolock) on mrqsq.rfq_id = a.rfq_id and mrqsq.contact_id   in
				/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
				(
					select supplierid from #tmp_mycompany_suppliers
				)
				/**/  '
		when @RfqType in (7,57,107) then
			'  
			  join mp_rfq_quote_suplierstatuses	mrqss	(nolock) on a.rfq_id = mrqss.rfq_id and mrqss.contact_id  in
				/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
				(
					select supplierid from #tmp_mycompany_suppliers
				)
				/**/   and rfq_userStatus_id in (1, 2)
			  '
		else ''
	end
	+
	'
	 left join vw_address		vwa (nolock) on mc.address_id = vwa.address_Id	
	'
	

	--select count(1) from @ProcessIDs
	
	set @where_query = 
	case when (select count(1) from @ProcessIDs) > 0 then ' a.rfq_id in (select * from  #rfq_list ) ' else '' end
	
	--select @where_query as where_query

	if left(@where_query,5) = ' and '
		set @where_query = substring(@where_query , 6, len(@where_query))
		
	set  @sql_query_rfq_list_based_on_processes = @sql_query_rfq_list_based_on_processes + case when len(@where_query) > 0 then ' where ' else '' end + @where_query 
	
	--select @sql_query_rfq_list_based_on_processes, @extra_field , @where_query

	exec sp_executesql  @sql_query_rfq_list_based_on_processes 

	
	--select @sql_query_rfq_list_based_on_processes
	--select * from #filtered_rfq_list order by rfq_id desc
	--select supplierid from #tmp_mycompany_suppliers



	/* M2-1924 M - In the application the search needs to be inclusive - DB */
	if len(@SearchText) > 0
	begin
		insert into #rfq_list_for_parts_search (rfq_id)
		select distinct a.rfq_id 
		from mp_rfq	(nolock) a 
		where 
			(a.rfq_name like '%'+@SearchText+'%')	
			OR	
			(a.rfq_id like '%'+@SearchText+'%')		
			OR
			(@SearchText is null)	
	end
	/**/	



	/* Start - Oct 14,2019 - M2-2196 M - My RFQ's page - Saved Search module - Initial State : DB */
	/* MyRFQ's => All Tab */
		--=> MyRFQ's => All Tab => AllRFQ's  (1)
		--=> MyRFQ's => Liked Tab => AllRFQ's  (51)
		--=> MyRFQ's => DisLiked Tab => AllRFQ's  (101) 
		if (@RfqType in (1,51,101) )	
		begin


			select myrfqs.*  , rfq_release.release_date as ReleaseDate , 	count(1) over () RfqCount    from 
			 (
				select 
					distinct 
					b.rfq_id as RfqId  
					, b.rfq_name as RfqName 
					, convert(varchar(100),floor(c.min_part_quantity)) as PartQty 
					, c.min_part_quantity_unit as PartQtyUnit  
					, j.value as PostProductionProcessName 
					, k.material_name_en  as PartsMaterialName  
					, case when category.discipline_name = l.discipline_name then l.discipline_name else category.discipline_name +' / '+ l.discipline_name end as PartCategoryName
					, b.contact_id as BuyerContactId  
					, b.quotes_needed_by as QuotesNeededBy
					, a.is_rfq_like IsRfqLike  
					, o.no_of_stars AS NoOfStars 
					, coalesce(p.file_name,'') as RfqThumbnail 	 
					, b.special_instruction_to_manufacturer as SpecialInstructions 
					, m.company_id AS BuyerCompanyId	
					, vw_address.state			as State 
					, vw_address.country_name	as Country 	
					, mcom.name as CompanyName 
					, (select top 1 file_name from mp_special_files (nolock) where  mcom.company_id = comp_id and filetype_id = 6 ) AS CompanyLogoPath 
					, c.rfq_part_id as RfqPartId 
					, c.is_rfq_part_default
					, (select count(1) from mp_rfq_parts c11 (nolock) where b.rfq_id = c11.rfq_id )	as	 RfqPartCount 
					/* M2-2042 M - My RFQs - add # of Quotes to the tiles - DB */
					, 
					  case 
						 /* M2-2096 M - Do not display number of quotes for Asia manufacturers- DB */
							/* Eddie requested (Jan 21,2020), to remove territory condition and show no of quotes for all platinum users */
						--when mrp.rfq_pref_manufacturing_location_id  = 3 then 0
							/**/
						/**/
						/*  M2-2142 Vision - Add the number of quotes to the Platinum package - DB */
						when @is_premium_supplier in (83,84,85) then 0
						/**/
						else
							(
								select count(1) from mp_rfq_quote_supplierquote (nolock) 
								where b.rfq_id = rfq_id and is_quote_submitted = 1 and is_rfq_resubmitted = 0
							)
					  end as NoOfQuotes 
					/**/
					,floor(c.min_part_quantity) as PartQty1
					/* May 4, 2020 As discussed with Eddie & Beau Martin , For supplier after taking RFQ capabilities, we need to hide buyer info & restrict supplier to download part files for profile capabilities RFQ’s as we do for basic supplier. */
					,@IsSubscriptionSupplier AS IsSubscriptionSupplier
					,(CASE WHEN s.MatchedPartCount > 0 THEN CAST('true' AS BIT)	ELSE CAST('false' AS BIT) END ) As IsAllowQuoting
					/**/

				/**/
				/* M2-3613 Vision - Action Tracker - Add Directory RFQs -DB */
				, CASE WHEN b.IsMfgCommunityRfq = 1 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END IsMfgCommunityRfq
				/**/				from
				mp_rfq_supplier		mrs				(nolock) 
				join mp_rfq b						(nolock) on mrs.rfq_id = b.rfq_id 
					and rfq_status_id = 3 
					and format(b.quotes_needed_by,'yyyyMMdd') >= format(@currentdate,'yyyyMMdd') 
				join mp_rfq_preferences  mrp		(nolock) on b.rfq_id = mrp.rfq_id 
				join mp_rfq_parts c					(nolock) on b.rfq_id = c.rfq_id -- and c.is_rfq_part_default =  1
				join mp_parts d						(nolock) on c.part_id = d.part_id
				left join mp_system_parameters j	(nolock) on c.post_production_process_id = j.id and j.sys_key = '@PostProdProcesses' 
				left join mp_mst_materials	k		(nolock) on c.material_id = k.material_id 
				left join mp_mst_part_category l	(nolock) on c.part_category_id = l.part_category_id
				/* M2-3202 Buyer and M - Change the tiles and rows to include parent category */
				left join mp_mst_part_category category (nolock) on l.parent_part_category_id=category.part_category_id
				/**/
				join mp_contacts m					(nolock) on b.contact_id = m.contact_id
				join mp_companies mcom				(nolock) on m.company_id = mcom.company_id
				left join 
				(
					select distinct m1.company_id, o1.no_of_stars 
					from
					mp_rfq b1 (nolock)
					join mp_contacts m1  (nolock) on b1.contact_id = m1.contact_id  
					join mp_star_rating o1  (nolock) on o1.company_id = m1.company_id
				) o	on o.company_id = m.company_id
				left join mp_special_files p		(nolock) on p.file_id = b.file_id
				left join vw_address				(nolock) on m.address_id = vw_address.address_id
				left join #rfq_likes			a	(nolock) on a.rfq_id = b.rfq_id  
				/* M2-1666 Supplier - Process filters need to search through all the RFQ Part's processes */
				left join #rfq_list q on b.rfq_id =  q.rfq_id
				/**/
				/* M2-1924 M - In the application the search needs to be inclusive - DB */
				left join #rfq_list_for_parts_search r on  b.rfq_id =  r.rfq_id
				/**/
				left join 
				(
					SELECT 
						a.rfq_id,
						COUNT(c.part_category_id) MatchedPartCount
					FROM mp_rfq					(NOLOCK) a
					LEFT JOIN mp_rfq_parts		(NOLOCK) b ON a.rfq_id = b.rfq_id AND b.status_id  = 2
					LEFT JOIN mp_gateway_subscription_company_processes  (NOLOCK) c ON b.part_category_id = c.part_category_id AND c.company_id = @SupplierCompID  AND c.is_active = 1
 					WHERE  
						a.rfq_id IN (select * from #filtered_rfq_list)
					GROUP BY a.rfq_id
				) s on b.rfq_id = s.rfq_id
				where 
				( 
					 (
						mrs.company_id = -1 
						and mrp.rfq_pref_manufacturing_location_id in 
						/*  M2-2087 Clone up to 3 RFQ's for 3 regions - API */
						(select * from #rfqlocation)
						/**/
						and rfq_status_id = 3  
						/* M2-1666 Supplier - Process filters need to search through all the RFQ Part's processes */
						and b.rfq_id = case when (select count(1) from #rfq_list)  > 0 then  q.rfq_id  else b.rfq_id end
						/**/
						/* M2-1924 M - In the application the search needs to be inclusive - DB */
						and b.rfq_id = case when len(@SearchText) > 0 then  r.rfq_id  else b.rfq_id end
						/**/
					 )
			 
				)
				and b.rfq_id not in  (select distinct rfq_id from mp_rfq_quote_SupplierQuote (nolock) where contact_id   in
				/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
				(
					select supplierid from #tmp_mycompany_suppliers
				)
				/**/  )
				and b.rfq_id not in  (select rfq_id from @blacklisted_rfqs) 
				--and (a.is_rfq_like != 0 or a.is_rfq_like is null)
				and c.is_rfq_part_default =  1 -- M2-1666 Supplier - Process filters need to search through all the RFQ Part's processes
				and b.rfq_id in (select * from #filtered_rfq_list) -- Oct 14,2019 - M2-2196 M - My RFQ's page - Saved Search module - Initial State : DB
				and b.rfq_id = case when @RfqType in (51,101) then a.rfq_id else  b.rfq_id end 
				and 
				(
					a.is_rfq_like = case when @RfqType in (1,51) then 1 when @RfqType = 101 then 0  end 
					or
					isnull(a.is_rfq_like,1) = (case when @RfqType = 1 then 1 end)
				)
			) myrfqs
			 left join (select rfq_id , max(status_date) release_date from mp_rfq_release_history (nolock) group by rfq_id ) rfq_release on myrfqs.RFQId = rfq_release.rfq_id
			order by 
				case  when @IsOrderByDesc =  1 and @OrderBy = 'quantity' then   PartQty1 end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'material' then   partsMaterialName end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'process' then   partCategoryName end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'postprocess' then   postProductionProcessName end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'quoteby'then   QuotesNeededBy end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'release_date' then   release_date end desc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'quantity' then   PartQty1 end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'material' then   partsMaterialName end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'process' then   partCategoryName end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'postprocess' then   postProductionProcessName end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'quoteby'then   QuotesNeededBy end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'release_date' then   release_date end asc   
			
			offset @pagesize * (@pagenumber - 1) rows
			fetch next @pagesize rows only
		
		end	
		--=> MyRFQ's => All Tab => Quoted RFQ's (4)
		--=> MyRFQ's => Liked Tab => Quoted RFQ's  (54)
		--=> MyRFQ's => DisLiked Tab => Quoted RFQ's  (104) 
		else if (@RfqType  in (4,54,104))		 
		begin	
	
			SELECT QuotedRFQ.* , rfq_release.release_date as ReleaseDate, 	count(1) over () RfqCount  FROM 
			(		 
			SELECT
				distinct 
					b.rfq_id as RfqId  
					, b.rfq_name as RfqName 
					, convert(varchar(100),floor(c.min_part_quantity)) as PartQty 
					, c.min_part_quantity_unit as PartQtyUnit  
					, j.value as PostProductionProcessName 
					, k.material_name_en  as PartsMaterialName  
					, case when category.discipline_name = l.discipline_name then l.discipline_name else category.discipline_name +' / '+ l.discipline_name end as PartCategoryName
					, b.contact_id as BuyerContactId  
					, b.quotes_needed_by as QuotesNeededBy
					, a.is_rfq_like IsRfqLike  
					, o.no_of_stars AS NoOfStars 
					, coalesce(p.file_name,'') as RfqThumbnail 	 
					, b.special_instruction_to_manufacturer as SpecialInstructions 
					, m.company_id AS BuyerCompanyId	
					, vw_address.state			as State 
					, vw_address.country_name	as Country 	
					, mcom.name as CompanyName 
					, (select top 1 file_name from mp_special_files (nolock) where  mcom.company_id = comp_id and filetype_id = 6 ) AS CompanyLogoPath 
					, c.rfq_part_id as RfqPartId 
					, c.is_rfq_part_default
					, (select count(1) from mp_rfq_parts c11 (nolock) where b.rfq_id = c11.rfq_id )	as	 RfqPartCount 
					/* M2-2042 M - My RFQs - add # of Quotes to the tiles - DB */
					, 
					  case 
						 /* M2-2096 M - Do not display number of quotes for Asia manufacturers- DB */
							/* Eddie requested (Jan 21,2020), to remove territory condition and show no of quotes for all platinum users */
						--when mrp.rfq_pref_manufacturing_location_id  = 3 then 0
							/**/
						/**/
						/*  M2-2142 Vision - Add the number of quotes to the Platinum package - DB */
						when @is_premium_supplier in (83,84,85) then 0
						/**/
						else
							(
								select count(1) from mp_rfq_quote_supplierquote (nolock) 
								where b.rfq_id = rfq_id and is_quote_submitted = 1 and is_rfq_resubmitted = 0
							)
					  end as NoOfQuotes 
					/**/
					/* May 4, 2020 As discussed with Eddie & Beau Martin , For supplier after taking RFQ capabilities, we need to hide buyer info & restrict supplier to download part files for profile capabilities RFQ’s as we do for basic supplier. */
					,@IsSubscriptionSupplier AS IsSubscriptionSupplier
					,(CASE WHEN s.MatchedPartCount > 0 THEN CAST('true' AS BIT)	ELSE CAST('false' AS BIT) END ) As IsAllowQuoting
					/**/

				/**/
				/* M2-3613 Vision - Action Tracker - Add Directory RFQs -DB */
				, CASE WHEN b.IsMfgCommunityRfq = 1 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END IsMfgCommunityRfq
				/**/			
				FROM 
				mp_rfq_quote_SupplierQuote	mrqsq	(nolock) 
				join mp_rfq b						(nolock) on mrqsq.rfq_id = b.rfq_id 
					and rfq_status_id in  (3 , 5, 6 )
					and  is_rfq_resubmitted = 0
					and  mrqsq.is_quote_submitted = 1
					and mrqsq.contact_id   in
					/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
					(
						select supplierid from #tmp_mycompany_suppliers
					)
					/**/
				join mp_rfq_preferences  mrp		(nolock) on b.rfq_id = mrp.rfq_id 
				join mp_rfq_parts c					(nolock) on b.rfq_id = c.rfq_id --and c.is_rfq_part_default =  1
				join mp_parts d						(nolock) on c.part_id = d.part_id
				left join mp_system_parameters j	(nolock) on c.post_production_process_id = j.id and j.sys_key = '@PostProdProcesses' 
				left join mp_mst_materials	k		(nolock) on c.material_id = k.material_id 
				left join mp_mst_part_category l	(nolock) on c.part_category_id = l.part_category_id
				/* M2-3202 Buyer and M - Change the tiles and rows to include parent category */
				left join mp_mst_part_category category (nolock) on l.parent_part_category_id=category.part_category_id
				/**/
				join mp_contacts m					(nolock) on b.contact_id = m.contact_id
				join mp_companies mcom				(nolock) on m.company_id = mcom.company_id
				left join 
				(
					select distinct m1.company_id, o1.no_of_stars 
					from
					mp_rfq b1 (nolock)
					join mp_contacts m1  (nolock) on b1.contact_id = m1.contact_id  
					join mp_star_rating o1  (nolock) on o1.company_id = m1.company_id
				) o	on o.company_id = m.company_id
				left join mp_special_files p		(nolock) on p.file_id = b.file_id
				left join vw_address				(nolock) on m.address_id = vw_address.address_id
				left join #rfq_likes a	(nolock) on a.rfq_id = b.rfq_id 
				/* M2-1666 Supplier - Process filters need to search through all the RFQ Part's processes */
				left join #rfq_list q on b.rfq_id =  q.rfq_id
				/**/
				/* M2-1924 M - In the application the search needs to be inclusive - DB */
				left join #rfq_list_for_parts_search r on  b.rfq_id =  r.rfq_id
				/**/
				left join 
				(
					SELECT 
						a.rfq_id,
						COUNT(c.part_category_id) MatchedPartCount
					FROM mp_rfq					(NOLOCK) a
					LEFT JOIN mp_rfq_parts		(NOLOCK) b ON a.rfq_id = b.rfq_id AND b.status_id  = 2
					LEFT JOIN mp_gateway_subscription_company_processes  (NOLOCK) c ON b.part_category_id = c.part_category_id AND c.company_id = @SupplierCompID  AND c.is_active = 1
 					WHERE  
						a.rfq_id IN (select * from #filtered_rfq_list)
					GROUP BY a.rfq_id
				) s on b.rfq_id = s.rfq_id			
			WHERE 

				b.rfq_id not in  (select rfq_id from @blacklisted_rfqs)
				 /* M2-1666 Supplier - Process filters need to search through all the RFQ Part's processes */
				 and b.rfq_id = case when (select count(processId) from @Processids) > 0 then  q.rfq_id  else b.rfq_id end
				 /**/
				/* M2-1924 M - In the application the search needs to be inclusive - DB */
				and b.rfq_id = case when len(@SearchText) > 0 then  r.rfq_id  else b.rfq_id end
				/**/
				and b.rfq_id not in 
				(

					select distinct a.rfq_id  from mp_rfq_quote_SupplierQuote	a	(nolock) 
					join mp_rfq_quote_items (nolock)  b on a.rfq_quote_SupplierQuote_id = b.rfq_quote_SupplierQuote_id and b.is_awrded = 1 
					and a.contact_id   in
					/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
					(
						select supplierid from #tmp_mycompany_suppliers
					)
					/**/
					and  is_rfq_resubmitted = 0

				)
				and c.is_rfq_part_default =  1
				and b.rfq_id in (select * from #filtered_rfq_list) -- Oct 14,2019 - M2-2196 M - My RFQ's page - Saved Search module - Initial State : DB
				and 
				(
					a.is_rfq_like = case when @RfqType in (4,54) then 1 when @RfqType = 104 then 0  end 
					or
					isnull(a.is_rfq_like,1) = (case when @RfqType = 4 then 1 end)
					or
					isnull(a.is_rfq_like,1) = (case when @RfqType = 4 then 0 end)
				)
			) AS QuotedRFQ
				left join (select rfq_id , max(status_date) release_date from mp_rfq_release_history (nolock) group by rfq_id ) rfq_release on QuotedRFQ.RFQId = rfq_release.rfq_id
			order by 
				case  when @IsOrderByDesc =  1 and @OrderBy = 'quantity' then   partQty end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'material' then   partsMaterialName end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'process' then   partCategoryName end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'postprocess' then   postProductionProcessName end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'quoteby'then   QuotesNeededBy end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'release_date' then   release_date end desc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'quantity' then   partQty end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'material' then   partsMaterialName end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'process' then   partCategoryName end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'postprocess' then   postProductionProcessName end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'quoteby'then   QuotesNeededBy end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'release_date' then   release_date end asc  
			offset @pagesize * (@pagenumber - 1) rows
			fetch next @pagesize rows only
		end	 
		--=> MyRFQ's => All Tab => Declined Quotes  (5)
		--=> MyRFQ's => Liked Tab => Declined Quotes   (55)
		--=> MyRFQ's => DisLiked Tab => Declined Quotes   (105) 
		else if (@RfqType  in (5,55,105))	
		begin	
			SELECT QuotedRFQ.* , rfq_release.release_date as ReleaseDate, 	count(1) over () RfqCount  FROM 
			(		 
			SELECT
				distinct 
					b.rfq_id as RfqId  
					, b.rfq_name as RfqName 
					, convert(varchar(100),floor(c.min_part_quantity)) as PartQty 
					, c.min_part_quantity_unit as PartQtyUnit  
					, j.value as PostProductionProcessName 
					, k.material_name_en  as PartsMaterialName  
					, case when category.discipline_name = l.discipline_name then l.discipline_name else category.discipline_name +' / '+ l.discipline_name end as PartCategoryName
					, b.contact_id as BuyerContactId  
					, b.quotes_needed_by as QuotesNeededBy
					, a.is_rfq_like IsRfqLike  
					, o.no_of_stars AS NoOfStars 
					, coalesce(p.file_name,'') as RfqThumbnail 	 
					, b.special_instruction_to_manufacturer as SpecialInstructions 
					, m.company_id AS BuyerCompanyId	
					, vw_address.state			as State 
					, vw_address.country_name	as Country 	
					, mcom.name as CompanyName 
					, (select top 1 file_name from mp_special_files (nolock) where  mcom.company_id = comp_id and filetype_id = 6 ) AS CompanyLogoPath 
					, c.rfq_part_id as RfqPartId 
					, c.is_rfq_part_default
					, (select count(1) from mp_rfq_parts c11 (nolock) where b.rfq_id = c11.rfq_id )	as	 RfqPartCount 
					/* M2-2042 M - My RFQs - add # of Quotes to the tiles - DB */
					, 
					  case 
						 /* M2-2096 M - Do not display number of quotes for Asia manufacturers- DB */
							/* Eddie requested (Jan 21,2020), to remove territory condition and show no of quotes for all platinum users */
						--when mrp.rfq_pref_manufacturing_location_id  = 3 then 0
							/**/
						/**/
						/*  M2-2142 Vision - Add the number of quotes to the Platinum package - DB */
						when @is_premium_supplier in (83,84,85) then 0
						/**/
						else
							(
								select count(1) from mp_rfq_quote_supplierquote (nolock) 
								where b.rfq_id = rfq_id and is_quote_submitted = 1 and is_rfq_resubmitted = 0
							)
					  end as NoOfQuotes 
					/**/
					/* May 4, 2020 As discussed with Eddie & Beau Martin , For supplier after taking RFQ capabilities, we need to hide buyer info & restrict supplier to download part files for profile capabilities RFQ’s as we do for basic supplier. */
					,@IsSubscriptionSupplier AS IsSubscriptionSupplier
					,(CASE WHEN s.MatchedPartCount > 0 THEN CAST('true' AS BIT)	ELSE CAST('false' AS BIT) END ) As IsAllowQuoting
					/**/
				/* M2-3613 Vision - Action Tracker - Add Directory RFQs -DB */
				, CASE WHEN b.IsMfgCommunityRfq = 1 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END IsMfgCommunityRfq
				/**/			
			FROM 
				mp_rfq_quote_SupplierQuote	mrqsq	(nolock) 
				join mp_rfq b						(nolock) on mrqsq.rfq_id = b.rfq_id 
					and rfq_status_id in  (3 , 5, 6 )
					/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
					and  (mrqsq.is_rfq_resubmitted = 0 OR mrqsq.is_quote_declined = 1 ) 
					and  mrqsq.is_quote_submitted = 1
					and mrqsq.contact_id   in
					
					(
						select supplierid from #tmp_mycompany_suppliers
					)
					/**/
				join mp_rfq_preferences  mrp		(nolock) on b.rfq_id = mrp.rfq_id 
				join mp_rfq_parts c					(nolock) on b.rfq_id = c.rfq_id --and c.is_rfq_part_default =  1
				join mp_parts d						(nolock) on c.part_id = d.part_id
				left join mp_system_parameters j	(nolock) on c.post_production_process_id = j.id and j.sys_key = '@PostProdProcesses' 
				left join mp_mst_materials	k		(nolock) on c.material_id = k.material_id 
				left join mp_mst_part_category l	(nolock) on c.part_category_id = l.part_category_id
				/* M2-3202 Buyer and M - Change the tiles and rows to include parent category */
				left join mp_mst_part_category category (nolock) on l.parent_part_category_id=category.part_category_id
				/**/
				join mp_contacts m					(nolock) on b.contact_id = m.contact_id
				join mp_companies mcom				(nolock) on m.company_id = mcom.company_id
				left join 
				(
					select distinct m1.company_id, o1.no_of_stars 
					from
					mp_rfq b1 (nolock)
					join mp_contacts m1  (nolock) on b1.contact_id = m1.contact_id  
					join mp_star_rating o1  (nolock) on o1.company_id = m1.company_id
				) o	on o.company_id = m.company_id
				left join mp_special_files p		(nolock) on p.file_id = b.file_id
				left join vw_address				(nolock) on m.address_id = vw_address.address_id
				left join #rfq_likes a	(nolock) on a.rfq_id = b.rfq_id 
				/* M2-1666 Supplier - Process filters need to search through all the RFQ Part's processes */
				left join #rfq_list q on b.rfq_id =  q.rfq_id
				/**/
				/* M2-1924 M - In the application the search needs to be inclusive - DB */
				left join #rfq_list_for_parts_search r on  b.rfq_id =  r.rfq_id
				/**/
				left join 
				(
					SELECT 
						a.rfq_id,
						COUNT(c.part_category_id) MatchedPartCount
					FROM mp_rfq					(NOLOCK) a
					LEFT JOIN mp_rfq_parts		(NOLOCK) b ON a.rfq_id = b.rfq_id AND b.status_id  = 2
					LEFT JOIN mp_gateway_subscription_company_processes  (NOLOCK) c ON b.part_category_id = c.part_category_id AND c.company_id = @SupplierCompID  AND c.is_active = 1
 					WHERE  
						a.rfq_id IN (select * from #filtered_rfq_list)
					GROUP BY a.rfq_id
				) s on b.rfq_id = s.rfq_id			
			WHERE 

				b.rfq_id not in  (select rfq_id from @blacklisted_rfqs)
				 /* M2-1666 Supplier - Process filters need to search through all the RFQ Part's processes */
				 and b.rfq_id = case when (select count(processId) from @Processids) > 0 then  q.rfq_id  else b.rfq_id end
				 /**/
				/* M2-1924 M - In the application the search needs to be inclusive - DB */
				and b.rfq_id = case when len(@SearchText) > 0 then  r.rfq_id  else b.rfq_id end
				/**/
				and c.is_rfq_part_default =  1
				and b.rfq_id in (select * from #filtered_rfq_list) -- Oct 14,2019 - M2-2196 M - My RFQ's page - Saved Search module - Initial State : DB
				and 
				(
					a.is_rfq_like = case when @RfqType in (5,55) then 1 when @RfqType = 104 then 0  end 
					or
					isnull(a.is_rfq_like,1) = (case when @RfqType = 5 then 1 end)
					or
					isnull(a.is_rfq_like,1) = (case when @RfqType = 5 then 0 end)
				)
			) AS QuotedRFQ
				left join (select rfq_id , max(status_date) release_date from mp_rfq_release_history (nolock) group by rfq_id ) rfq_release on QuotedRFQ.RFQId = rfq_release.rfq_id
			order by 
				case  when @IsOrderByDesc =  1 and @OrderBy = 'quantity' then   partQty end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'material' then   partsMaterialName end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'process' then   partCategoryName end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'postprocess' then   postProductionProcessName end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'quoteby'then   QuotesNeededBy end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'release_date' then   release_date end desc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'quantity' then   partQty end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'material' then   partsMaterialName end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'process' then   partCategoryName end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'postprocess' then   postProductionProcessName end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'quoteby'then   QuotesNeededBy end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'release_date' then   release_date end asc  
			offset @pagesize * (@pagenumber - 1) rows
			fetch next @pagesize rows only

		end
		--=> MyRFQ's => All Tab => Awarded Quotes (6)
		--=> MyRFQ's => Liked Tab => Awarded Quotes  (56)
		--=> MyRFQ's => DisLiked Tab => Awarded Quotes  (106) 
		else if (@RfqType  in (6,56,106))		 
		begin	
	
			SELECT QuotedRFQ.* , rfq_release.release_date as ReleaseDate, 	count(1) over () RfqCount  FROM 
			(		 
			SELECT
				distinct 
					b.rfq_id as RfqId  
					, b.rfq_name as RfqName 
					, convert(varchar(100),floor(c.min_part_quantity)) as PartQty 
					, c.min_part_quantity_unit as PartQtyUnit  
					, j.value as PostProductionProcessName 
					, k.material_name_en  as PartsMaterialName  
					, case when category.discipline_name = l.discipline_name then l.discipline_name else category.discipline_name +' / '+ l.discipline_name end as PartCategoryName
					, b.contact_id as BuyerContactId  
					, b.quotes_needed_by as QuotesNeededBy
					, a.is_rfq_like IsRfqLike  
					, o.no_of_stars AS NoOfStars 
					, coalesce(p.file_name,'') as RfqThumbnail 	 
					, b.special_instruction_to_manufacturer as SpecialInstructions 
					, m.company_id AS BuyerCompanyId	
					, vw_address.state			as State 
					, vw_address.country_name	as Country 	
					, mcom.name as CompanyName 
					, (select top 1 file_name from mp_special_files (nolock) where  mcom.company_id = comp_id and filetype_id = 6 ) AS CompanyLogoPath 
					, c.rfq_part_id as RfqPartId 
					, c.is_rfq_part_default
					, (select count(1) from mp_rfq_parts c11 (nolock) where b.rfq_id = c11.rfq_id )	as	 RfqPartCount 
					/* M2-2042 M - My RFQs - add # of Quotes to the tiles - DB */
					, 
					  case 
						 /* M2-2096 M - Do not display number of quotes for Asia manufacturers- DB */
							/* Eddie requested (Jan 21,2020), to remove territory condition and show no of quotes for all platinum users */
						--when mrp.rfq_pref_manufacturing_location_id  = 3 then 0
							/**/
						/**/
						/*  M2-2142 Vision - Add the number of quotes to the Platinum package - DB */
						when @is_premium_supplier in (83,84,85) then 0
						/**/
						else
							(
								select count(1) from mp_rfq_quote_supplierquote (nolock) 
								where b.rfq_id = rfq_id and is_quote_submitted = 1 and is_rfq_resubmitted = 0
							)
					  end as NoOfQuotes 
					/**/
					/* May 4, 2020 As discussed with Eddie & Beau Martin , For supplier after taking RFQ capabilities, we need to hide buyer info & restrict supplier to download part files for profile capabilities RFQ’s as we do for basic supplier. */
					,@IsSubscriptionSupplier AS IsSubscriptionSupplier
					,(CASE WHEN s.MatchedPartCount > 0 THEN CAST('true' AS BIT)	ELSE CAST('false' AS BIT) END ) As IsAllowQuoting
					/**/
				/* M2-3613 Vision - Action Tracker - Add Directory RFQs -DB */
				, CASE WHEN b.IsMfgCommunityRfq = 1 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END IsMfgCommunityRfq
				/**/			
			FROM 
				mp_rfq_quote_SupplierQuote	mrqsq	(nolock) 
				join mp_rfq b						(nolock) on mrqsq.rfq_id = b.rfq_id 
					--and rfq_status_id in  (3 , 5, 6 )
					--and  is_rfq_resubmitted = 0
					--and  mrqsq.is_quote_submitted = 1
					and mrqsq.contact_id   in
					/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
					(
						select supplierid from #tmp_mycompany_suppliers
					)
					/**/
				join mp_rfq_preferences  mrp		(nolock) on b.rfq_id = mrp.rfq_id 
				join mp_rfq_parts c					(nolock) on b.rfq_id = c.rfq_id --and c.is_rfq_part_default =  1
				join mp_parts d						(nolock) on c.part_id = d.part_id
				left join mp_system_parameters j	(nolock) on c.post_production_process_id = j.id and j.sys_key = '@PostProdProcesses' 
				left join mp_mst_materials	k		(nolock) on c.material_id = k.material_id 
				left join mp_mst_part_category l	(nolock) on c.part_category_id = l.part_category_id
				/* M2-3202 Buyer and M - Change the tiles and rows to include parent category */
				left join mp_mst_part_category category (nolock) on l.parent_part_category_id=category.part_category_id
				/**/
				join mp_contacts m					(nolock) on b.contact_id = m.contact_id
				join mp_companies mcom				(nolock) on m.company_id = mcom.company_id
				left join 
				(
					select distinct m1.company_id, o1.no_of_stars 
					from
					mp_rfq b1 (nolock)
					join mp_contacts m1  (nolock) on b1.contact_id = m1.contact_id  
					join mp_star_rating o1  (nolock) on o1.company_id = m1.company_id
				) o	on o.company_id = m.company_id
				left join mp_special_files p		(nolock) on p.file_id = b.file_id
				left join vw_address				(nolock) on m.address_id = vw_address.address_id
				left join #rfq_likes a	(nolock) on a.rfq_id = b.rfq_id 
				/* M2-1666 Supplier - Process filters need to search through all the RFQ Part's processes */
				left join #rfq_list q on b.rfq_id =  q.rfq_id
				/**/
				/* M2-1924 M - In the application the search needs to be inclusive - DB */
				left join #rfq_list_for_parts_search r on  b.rfq_id =  r.rfq_id
				/**/
				left join 
				(
					SELECT 
						a.rfq_id,
						COUNT(c.part_category_id) MatchedPartCount
					FROM mp_rfq					(NOLOCK) a
					LEFT JOIN mp_rfq_parts		(NOLOCK) b ON a.rfq_id = b.rfq_id AND b.status_id  = 2
					LEFT JOIN mp_gateway_subscription_company_processes  (NOLOCK) c ON b.part_category_id = c.part_category_id AND c.company_id = @SupplierCompID  AND c.is_active = 1
 					WHERE  
						a.rfq_id IN (select * from #filtered_rfq_list)
					GROUP BY a.rfq_id
				) s on b.rfq_id = s.rfq_id			
			WHERE 

				b.rfq_id not in  (select rfq_id from @blacklisted_rfqs)
				 /* M2-1666 Supplier - Process filters need to search through all the RFQ Part's processes */
				 and b.rfq_id = case when (select count(processId) from @Processids) > 0 then  q.rfq_id  else b.rfq_id end
				 /**/
				/* M2-1924 M - In the application the search needs to be inclusive - DB */
				and b.rfq_id = case when len(@SearchText) > 0 then  r.rfq_id  else b.rfq_id end
				/**/
				and b.rfq_id in 
				(

					select  distinct b.rfq_id from 
					mp_rfq_quote_items a		(nolock)  
					join mp_rfq_quote_SupplierQuote b  (nolock) on a.rfq_quote_SupplierQuote_id = b.rfq_quote_SupplierQuote_id 
					and b.contact_id   in
					/* M2-2852 M - Add My Company RFQs to the left menu and new page - DB */
					(
						select supplierid from #tmp_mycompany_suppliers
					)
					/**/	and a.is_awrded=1	
					and is_rfq_resubmitted = 0	
				
				

				)
				and c.is_rfq_part_default =  1
				and b.rfq_id in (select * from #filtered_rfq_list) -- Oct 14,2019 - M2-2196 M - My RFQ's page - Saved Search module - Initial State : DB
				and 
				(
					a.is_rfq_like = case when @RfqType in (6,56) then 1 when @RfqType = 106 then 0  end 
					or
					isnull(a.is_rfq_like,1) = (case when @RfqType = 6 then 1 end)
					or
					isnull(a.is_rfq_like,1) = (case when @RfqType = 6 then 0 end)
				)
			) AS QuotedRFQ
				left join (select rfq_id , max(status_date) release_date from mp_rfq_release_history (nolock) group by rfq_id ) rfq_release on QuotedRFQ.RFQId = rfq_release.rfq_id
			order by 
				case  when @IsOrderByDesc =  1 and @OrderBy = 'quantity' then   partQty end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'material' then   partsMaterialName end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'process' then   partCategoryName end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'postprocess' then   postProductionProcessName end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'quoteby'then   QuotesNeededBy end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'release_date' then   release_date end desc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'quantity' then   partQty end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'material' then   partsMaterialName end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'process' then   partCategoryName end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'postprocess' then   postProductionProcessName end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'quoteby'then   QuotesNeededBy end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'release_date' then   release_date end asc  
			offset @pagesize * (@pagenumber - 1) rows
			fetch next @pagesize rows only
		end	 
		--=> MyRFQ's => All Tab =>  Mark for Quoting  (7)
		--=> MyRFQ's => Liked Tab =>  Mark for Quoting  (57)
		--=> MyRFQ's => DisLiked Tab =>  Mark for Quoting  (107) 
		if (@RfqType in (7,57,107) )	
		begin
			select mymarkforquotingrfqs.*  , rfq_release.release_date as ReleaseDate , 	count(1) over () RfqCount    from 
			 (
				select 
					distinct 
					b.rfq_id as RfqId  
					, b.rfq_name as RfqName 
					, convert(varchar(100),floor(c.min_part_quantity)) as PartQty 
					, c.min_part_quantity_unit as PartQtyUnit  
					, j.value as PostProductionProcessName 
					, k.material_name_en  as PartsMaterialName  
					, case when category.discipline_name = l.discipline_name then l.discipline_name else category.discipline_name +' / '+ l.discipline_name end as PartCategoryName
					, b.contact_id as BuyerContactId  
					, b.quotes_needed_by as QuotesNeededBy
					, a.is_rfq_like IsRfqLike  
					, o.no_of_stars AS NoOfStars 
					, coalesce(p.file_name,'') as RfqThumbnail 	 
					, b.special_instruction_to_manufacturer as SpecialInstructions 
					, m.company_id AS BuyerCompanyId	
					, vw_address.state			as State 
					, vw_address.country_name	as Country 	
					, mcom.name as CompanyName 
					, (select top 1 file_name from mp_special_files (nolock) where  mcom.company_id = comp_id and filetype_id = 6 ) AS CompanyLogoPath 
					, c.rfq_part_id as RfqPartId 
					, c.is_rfq_part_default
					, (select count(1) from mp_rfq_parts c11 (nolock) where b.rfq_id = c11.rfq_id )	as	 RfqPartCount 
					/* M2-2042 M - My RFQs - add # of Quotes to the tiles - DB */
					, 
					  case 
						 /* M2-2096 M - Do not display number of quotes for Asia manufacturers- DB */
							/* Eddie requested (Jan 21,2020), to remove territory condition and show no of quotes for all platinum users */
						--when mrp.rfq_pref_manufacturing_location_id  = 3 then 0
							/**/
						/**/
						/*  M2-2142 Vision - Add the number of quotes to the Platinum package - DB */
						when @is_premium_supplier in (83,84,85) then 0
						/**/
						else
							(
								select count(1) from mp_rfq_quote_supplierquote (nolock) 
								where b.rfq_id = rfq_id and is_quote_submitted = 1 and is_rfq_resubmitted = 0
							)
					  end as NoOfQuotes 
					/**/
					,floor(c.min_part_quantity) as PartQty1
					/* May 4, 2020 As discussed with Eddie & Beau Martin , For supplier after taking RFQ capabilities, we need to hide buyer info & restrict supplier to download part files for profile capabilities RFQ’s as we do for basic supplier. */
					,@IsSubscriptionSupplier AS IsSubscriptionSupplier
					,(CASE WHEN s.MatchedPartCount > 0 THEN CAST('true' AS BIT)	ELSE CAST('false' AS BIT) END ) As IsAllowQuoting
					/**/
				/* M2-3613 Vision - Action Tracker - Add Directory RFQs -DB */
				, CASE WHEN b.IsMfgCommunityRfq = 1 THEN CAST('true' AS BIT) ELSE CAST('false' AS BIT) END IsMfgCommunityRfq
				/**/			
				from
				mp_rfq_supplier		mrs				(nolock) 
				join mp_rfq b						(nolock) on mrs.rfq_id = b.rfq_id 
					and rfq_status_id = 3 
				join mp_rfq_preferences  mrp		(nolock) on b.rfq_id = mrp.rfq_id 
				join mp_rfq_parts c					(nolock) on b.rfq_id = c.rfq_id -- and c.is_rfq_part_default =  1
				join mp_parts d						(nolock) on c.part_id = d.part_id
				left join mp_system_parameters j	(nolock) on c.post_production_process_id = j.id and j.sys_key = '@PostProdProcesses' 
				left join mp_mst_materials	k		(nolock) on c.material_id = k.material_id 
				left join mp_mst_part_category l	(nolock) on c.part_category_id = l.part_category_id
				/* M2-3202 Buyer and M - Change the tiles and rows to include parent category */
				left join mp_mst_part_category category (nolock) on l.parent_part_category_id=category.part_category_id
				/**/
				join mp_contacts m					(nolock) on b.contact_id = m.contact_id
				join mp_companies mcom				(nolock) on m.company_id = mcom.company_id
				left join 
				(
					select distinct m1.company_id, o1.no_of_stars 
					from
					mp_rfq b1 (nolock)
					join mp_contacts m1  (nolock) on b1.contact_id = m1.contact_id  
					join mp_star_rating o1  (nolock) on o1.company_id = m1.company_id
				) o	on o.company_id = m.company_id
				left join mp_special_files p		(nolock) on p.file_id = b.file_id
				left join vw_address				(nolock) on m.address_id = vw_address.address_id
				left join #rfq_likes			a	(nolock) on a.rfq_id = b.rfq_id  
				/* M2-1666 Supplier - Process filters need to search through all the RFQ Part's processes */
				left join #rfq_list q on b.rfq_id =  q.rfq_id
				/**/
				/* M2-1924 M - In the application the search needs to be inclusive - DB */
				left join #rfq_list_for_parts_search r on  b.rfq_id =  r.rfq_id
				/**/
				left join 
				(
					SELECT 
						a.rfq_id,
						COUNT(c.part_category_id) MatchedPartCount
					FROM mp_rfq					(NOLOCK) a
					LEFT JOIN mp_rfq_parts		(NOLOCK) b ON a.rfq_id = b.rfq_id AND b.status_id  = 2
					LEFT JOIN mp_gateway_subscription_company_processes  (NOLOCK) c ON b.part_category_id = c.part_category_id AND c.company_id = @SupplierCompID  AND c.is_active = 1
 					WHERE  
						a.rfq_id IN (select * from #filtered_rfq_list)
					GROUP BY a.rfq_id
				) s on b.rfq_id = s.rfq_id
				where 
				b.rfq_id not in  (select rfq_id from @blacklisted_rfqs)
				 /* M2-1666 Supplier - Process filters need to search through all the RFQ Part's processes */
				 and b.rfq_id = case when (select count(processId) from @Processids) > 0 then  q.rfq_id  else b.rfq_id end
				 /**/
				/* M2-1924 M - In the application the search needs to be inclusive - DB */
				and b.rfq_id = case when len(@SearchText) > 0 then  r.rfq_id  else b.rfq_id end
				/**/
				and c.is_rfq_part_default =  1
				and b.rfq_id in (select * from #filtered_rfq_list) -- Oct 14,2019 - M2-2196 M - My RFQ's page - Saved Search module - Initial State : DB
				and 
				(
					a.is_rfq_like = case when @RfqType in (7,57) then 1 when @RfqType = 107 then 0  end 
					or
					isnull(a.is_rfq_like,1) = (case when @RfqType = 7 then 1 end)
					or
					isnull(a.is_rfq_like,1) = (case when @RfqType = 7 then 0 end)
				)
			) mymarkforquotingrfqs
			 left join (select rfq_id , max(status_date) release_date from mp_rfq_release_history (nolock) group by rfq_id ) rfq_release on mymarkforquotingrfqs.RFQId = rfq_release.rfq_id
			order by 
				case  when @IsOrderByDesc =  1 and @OrderBy = 'quantity' then   PartQty1 end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'material' then   partsMaterialName end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'process' then   partCategoryName end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'postprocess' then   postProductionProcessName end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'quoteby'then   QuotesNeededBy end desc   
				,case  when @IsOrderByDesc =  1 and @OrderBy = 'release_date' then   release_date end desc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'quantity' then   PartQty1 end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'material' then   partsMaterialName end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'process' then   partCategoryName end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'postprocess' then   postProductionProcessName end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'quoteby'then   QuotesNeededBy end asc   
				,case  when @IsOrderByDesc =  0 and @OrderBy = 'release_date' then   release_date end asc   
			
			offset @pagesize * (@pagenumber - 1) rows
			fetch next @pagesize rows only
		
		end	
	/**/


	
	
	
	/* End - Oct 14,2019 - M2-2196 M - My RFQ's page - Saved Search module - Initial State : DB */
end
GO
PRINT N'Creating Procedure [dbo].[proc_set_DataSync_Create_MarketplaceToHubSpot_CompanyContact_RK]...';


GO


/*  
EXEC dbo.proc_set_DataSync_Create_MarketplaceToHubSpot_CompanyContact_RK @ContactId = 0 ,@CompanyId =  0 
*/
CREATE PROCEDURE [dbo].[proc_set_DataSync_Create_MarketplaceToHubSpot_CompanyContact_RK]
(
	@ContactId	INT = 0,
	@CompanyId	INT = 0
)
AS
BEGIN
	/* 
		M2-4233 DB - HubSpot - Create Sync Contacts module API Scheduler & Immediate Syncs.
		M2-4235 DB - HubSpot - Create Sync Buyer Companies (Custom) module API Scheduler & Immediate Syncs.
		M2-4234 DB - HubSpot - Create Sync Companies (Default) module API Scheduler & Immediate Syncs.
	
	*/

	--SET NOCOUNT ON 

	DECLARE @SyncedDate AS DATETIME =  GETUTCDATE()
	DECLARE @SyncedDateIST AS DATETIME =  CONVERT(DATETIME,SWITCHOFFSET(@SyncedDate, '+05:30'))
	DECLARE @IsVisionAccountBuyer AS BIT
	DECLARE @PublicProfileURL VARCHAR(1000) 

	IF DB_NAME() = 'mp2020_dev'
	BEGIN
		SET @PublicProfileURL = 'https://dev.mfg.com/manufacturer/'
	END
	ELSE IF DB_NAME() = 'mp2020_uat'
	BEGIN
		SET @PublicProfileURL = 'https://staging.mfg.com/manufacturer/'		
	END
	ELSE IF DB_NAME() = 'mp2020_prod'
	BEGIN
		SET @PublicProfileURL = 'https://mfg.com/manufacturer/'
	END


	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesType
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline1
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesIndustries
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo2
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsAddress
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompanyCommunications
	

	CREATE TABLE #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies (company_id INT NULL)
	CREATE TABLE #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts (contact_id INT NULL)

	--BEGIN TRANSACTION
	BEGIN TRY
		-- companies & contacts data already generated marked as processed
		--UPDATE ds SET ds.IsProcessed = 1 , ds.ProcessedDate = @SyncedDate , ds.ProcessedDateIST = @SyncedDateIST
		--FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs ds (NOLOCK) 
		--WHERE CONVERT(DATE,ds.[SyncedDate]) = CONVERT(DATE,@SyncedDate) AND [SyncType] = 'Scheduler - 30 Minutes'
		
		UPDATE ds SET ds.IsProcessed = 1 , ds.ProcessedDate = @SyncedDate , ds.ProcessedDateIST = @SyncedDateIST
		FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs ds (NOLOCK) 
		WHERE [SyncType] = 'Scheduler - 30 Minutes' AND ds.IsProcessed IS NULL

		-- Scheduler sync : checking companies and contact in every 30 minutes which are not sync from Marketplace to HubSpot
		IF @ContactId = 0  AND @CompanyId = 0
		BEGIN
		
			-- List of companies which are not sync from Marketplace to HubSpot
			INSERT INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies (company_id)
			SELECT a.company_id 
			FROM mp_companies (NOLOCK) a
			WHERE NOT EXISTS 
			(
				SELECT 1 FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs ds (NOLOCK) 
				WHERE a.company_id = ds.[Vision Account Id] AND ds.[Vision Contact Id] IS NULL AND ds.IsProcessed = 1
				AND [SyncType] = 'Scheduler - 30 Minutes'
			)
			AND a.company_id <> 0 
			AND a.company_id in(
					--				  select 
					--b.company_id 
					--  from  aspnetusers (nolock) a  
					--join mp_contacts (nolock) b on a.id = b.user_id  
					--join mp_companies (nolock) c on c.company_id = b.company_id  ---1770358
					--   WHERE  convert(varchar, c.created_date, 108)    between '23:31:00.000' and  '23:59:59.000' 
					--   and   not exists (select * from DataSync_MarketplaceHubSpot.dbo.hubspotcontacts (nolock) z where z.email=a.email)
					
				----- inserted below records on 18-May
				  select  distinct   
					 c.company_id 
				  from  aspnetusers (nolock) a  
				join mp_contacts (nolock) b on a.id = b.user_id  and b.IsTestAccount = 0
				join mp_companies (nolock) c on c.company_id = b.company_id   
				join mpContactsTrackingInfo(nolock) d on d.email = a.email
				where  
				  not exists   
				( 
					select  email from DataSync_MarketplaceHubSpot..HubSpotContacts(nolock) where 
					  email = a.email
				)  

			)
			--AND CONVERT(DATE,created_date) = CONVERT(DATE,GETUTCDATE())

			

			-- List of contacts which are not sync from Marketplace to HubSpot
			INSERT INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts (contact_id)
			SELECT a.contact_id 
			FROM mp_contacts (NOLOCK) a
			WHERE NOT EXISTS 
			(
				SELECT 1 FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs ds (NOLOCK) 
				WHERE a.contact_id = ds.[Vision Contact Id] AND ds.[Vision Account Id] IS NULL AND ds.IsProcessed = 1
				AND [SyncType] = 'Scheduler - 30 Minutes'
			)
			AND a.company_id <> 0 AND a.contact_id <> 0 
			AND a.contact_id in (
					--	select 
					--b.contact_id 
					--  from  aspnetusers (nolock) a  
					--join mp_contacts (nolock) b on a.id = b.user_id  
					--join mp_companies (nolock) c on c.company_id = b.company_id  ---1770358
					--   WHERE  convert(varchar, c.created_date, 108)    between '23:31:00.000' and  '23:59:59.000' 
					--   and   not exists (select * from DataSync_MarketplaceHubSpot.dbo.hubspotcontacts (nolock) z where z.email=a.email)

					----- inserted below records on 18-May
					 select  distinct   
						 b.contact_id 
					  from  aspnetusers (nolock) a  
					join mp_contacts (nolock) b on a.id = b.user_id  and b.IsTestAccount = 0
					join mp_companies (nolock) c on c.company_id = b.company_id   
					join mpContactsTrackingInfo(nolock) d on d.email = a.email
					where  
					  not exists   
					( 
						select  email from DataSync_MarketplaceHubSpot..HubSpotContacts(nolock) where 
						  email = a.email
					)  


			)

			--AND CONVERT(DATE,a.created_on) = CONVERT(DATE,GETUTCDATE())

		--	select * from #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies
		--select * from #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts
		--return

			INSERT INTO DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			([Vision Account Id], [Vision Contact Id], [SyncType], [IsSynced], [SyncedDate], [SyncedDateIST])
			SELECT company_id, NULL, 'Scheduler - 30 Minutes', 1, @SyncedDate, @SyncedDateIST FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies
			UNION
			SELECT NULL, contact_id, 'Scheduler - 30 Minutes', 1, @SyncedDate, @SyncedDateIST FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts

			--SELECT * FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs WHERE [IsProcessed] IS NULL

		END
		ELSE IF @ContactId > 0  AND @CompanyId > 0
		BEGIN

			-- List of companies which are not sync from Marketplace to HubSpot
			INSERT INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies (company_id)
			SELECT a.company_id 
			FROM mp_companies (NOLOCK) a
			WHERE NOT EXISTS (SELECT * FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs (NOLOCK) WHERE [Vision Account Id] = a.company_id)
			AND a.company_id <> 0 AND a.company_id = @CompanyId

			-- List of contacts which are not sync from Marketplace to HubSpot
			INSERT INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts (contact_id)
			SELECT a.contact_id 
			FROM mp_contacts (NOLOCK) a
			WHERE NOT EXISTS (SELECT * FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs (NOLOCK) WHERE [Vision Contact Id] = a.contact_id)
			AND a.company_id <> 0 AND a.contact_id <> 0 AND a.contact_id = @ContactId

			INSERT INTO DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			([Vision Account Id], [Vision Contact Id], [SyncType], [IsSynced], [SyncedDate], [SyncedDateIST])
			SELECT company_id, NULL, 'Immediate', 1, @SyncedDate, @SyncedDateIST FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies
			UNION
			SELECT NULL, contact_id, 'Immediate', 1, @SyncedDate, @SyncedDateIST FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts

			--SELECT * FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs WHERE [IsProcessed] IS NULL

		END
	

		-- companies details
		SELECT 
			a.company_id, a.name , a.cage_code , a.duns_number , a.assigned_customer_rep , a.assigned_sourcingadvisor , a.manufacturing_location_id
			, a.is_hide_directory_profile , a.employee_count_range_id , a.created_date
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo
		FROM mp_companies  a (NOLOCK)
		WHERE EXISTS 
		(
			SELECT 1
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND a.company_id = [Vision Account Id] 
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)
		ORDER BY a.created_date DESC 

		-- companies status buyer or supplier company
		SELECT DISTINCT a.company_id , a.is_buyer INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesType
		FROM mp_contacts a (NOLOCK)
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)

		-- companies address details 
		SELECT 
			a.company_id 
			,b.address1 AS [Company Street Address]
			,b.address2 AS [Company Street Address 2]
			,b.address4 AS [Company City] 
			,c.region_name AS [Company State]
			,b.address3 AS [Company Postal Code]
			,d.country_name AS [Company Country]
			,d.iso_code AS [Company Country Code]
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress
		FROM  
		(
				SELECT 
					company_id , contact_id ,address_id
					, ROW_NUMBER() OVER(PARTITION BY company_id ORDER BY company_id , is_admin DESC, contact_id ) rn 
				FROM [mp_contacts] (NOLOCK)
			
		) a
		JOIN mp_addresses			b (NOLOCK) ON a.address_id = b.address_id AND a.rn = 1 
		LEFT JOIN mp_mst_region		c (NOLOCK) ON b.region_id = c.region_id AND b.region_id <> 0
		LEFT JOIN mp_mst_country	d (NOLOCK) ON b.country_id = d.country_id AND b.country_id <> 0
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		) 

		-- companies phone numbers
		SELECT company_id , communication_value , ROW_NUMBER() OVER (PARTITION BY company_id ORDER BY company_id , contact_id ) Rn 
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompanyCommunications
		FROM mp_communication_details a (NOLOCK) 
		WHERE communication_type_id = 1 AND company_id IS NOT NULL AND company_id > 0 
		AND EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)

		-- companies disciplines 0
		SELECT DISTINCT a.company_id, b.discipline_name  AS part_category_id INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
		FROM 
		mp_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 0
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)
		UNION
		SELECT DISTINCT a.company_id, c.discipline_name  AS part_category_id
		FROM 
		mp_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 1
		JOIN mp_mst_part_category(NOLOCK) c ON b.parent_part_category_id = c.part_category_id 
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)

		-- companies disciplines 1
		SELECT DISTINCT a.company_id, b.discipline_name  AS part_category_id 
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline1
		FROM 
		mp_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 1
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)
	
		-- companies quoting disciplines 0
		SELECT DISTINCT a.company_id, b.discipline_name  AS part_category_id INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline0
		FROM 
		mp_gateway_subscription_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 0
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)
		UNION
		SELECT DISTINCT a.company_id, c.discipline_name  AS part_category_id
		FROM 
		mp_gateway_subscription_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 1
		JOIN mp_mst_part_category(NOLOCK) c ON b.parent_part_category_id = c.part_category_id 
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)

		-- companies quoting disciplines 1
		SELECT DISTINCT a.company_id, b.discipline_name  AS part_category_id 	INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline1
		FROM 
		mp_gateway_subscription_company_processes(NOLOCK) a
		JOIN mp_mst_part_category(NOLOCK) b ON a.part_category_id = b.part_category_id AND b.LEVEL = 1
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)
	
		-- companies industries
		SELECT company_id, CASE WHEN a.is_buyer = 0 THEN supplier_type_name_en WHEN a.is_buyer = 1 THEN IndustryBranches_name_EN  ELSE NULL END industries
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesIndustries
		FROM mp_company_supplier_types (NOLOCK)  a
		LEFT JOIN mp_mst_supplier_type (NOLOCK) b ON a.supplier_type_id = b.supplier_type_id AND a.is_buyer = 0
		LEFT JOIN mp_mst_industrybranches (NOLOCK) c ON a.supplier_type_id = c.IndustryBranches_id AND a.is_buyer = 1
		WHERE EXISTS 
		(
			SELECT *
			FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs 
			WHERE 
				[IsProcessed] IS NULL 
				AND [Vision Contact Id] IS NULL
				AND [Vision Account Id] = a.company_id
				AND [SyncType] = 'Scheduler - 30 Minutes'
		)

		INSERT INTO DataSync_MarketplaceHubSpot.dbo.HubSpotCompanies
		(
		[Vision Account Id], [HubSpot Account Id], [IsBuyerAccount], [Account Paid Status], [Buyer Company City], [Buyer Company Country],  
		[Buyer Company Phone], [Buyer Company Postal Code], [Buyer Company State], [Buyer Company Street Address], [Buyer Company Street Address 2], [Cage Code], [City], 
		[Company Name], [Company Owner Id], [Country/Region], [Create Date], [Customer Service Rep Id], [Discipline Level 0], [Discipline Level 1], [Duns Number], 
		[Facebook Company Page], [Google Plus Page], [Hide Directory Profile], [Industry], [LinkedIn Company Page] ,[Number of Employees], [Phone Number], 
		[Postal Code], [Public Profile URL], 
		[RFQ Access Capabilities 0], [RFQ Access Capabilities 1], [State/Region], [Street Address], [Street Address 2], [Manufacturing Location], [Twitter Handle], 
		[IsSynced], [SyncedDate], [SyncedDateIST]
		)
		SELECT 
			[Vision Account Id]
			,	NULL AS [HubSpot Account Id]
			,   b.is_buyer AS  [IsBuyerAccount]
			,	CASE 
					WHEN b.is_buyer = 1 THEN ''
					WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 84 THEN 'Growth'
					WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 85 THEN 'Gold'
					WHEN (SELECT TOP 1 account_type FROM mp_registered_supplier (NOLOCK) a1 WHERE a.[Vision Account Id] = a1.company_id) = 86 THEN 'Platinum'
					ELSE 'Basic'
				END [Account Paid Status]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company City] ELSE '' END [Buyer Company City]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Country] ELSE '' END [Buyer Company Country]
			, CASE WHEN b.is_buyer = 1 THEN k.communication_value ELSE '' END AS [Buyer Company Phone]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Postal Code] ELSE '' END [Buyer Company Postal Code]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company State] ELSE '' END [Buyer Company State]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Street Address] ELSE '' END [Buyer Company Street Address]
			, CASE WHEN b.is_buyer = 1 THEN c.[Company Street Address 2] ELSE '' END [Buyer Company Address 2]
			, d.cage_code AS [Cage Code]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company City] ELSE '' END [City]
			, d.name AS [Company Name]
			, d.assigned_sourcingadvisor AS [Company Owner Id]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Country] ELSE '' END [Country]
			, d.created_date AS [Create Date]
			, d.assigned_customer_rep AS  [Customer Service Rep Id]
			, CASE WHEN b.is_buyer = 0 THEN e.disciplines0  END   AS [Discipline Level 0]
			, CASE WHEN b.is_buyer = 0 THEN f.disciplines1  END   AS [Discipline Level 1]
			, d.duns_number AS [Duns Number] 
			, NULL AS [Facebook Company Page]
			, NULL AS [Google Plus Page]
			, CASE WHEN b.is_buyer = 0 THEN ISNULL(d.is_hide_directory_profile, CAST('false' AS BIT))  END AS [Hide Directory Profile]
			, g.industries AS [Industry]
			, NULL AS [LinkedIn Company Page]
			, d.employee_count_range_id AS [Number of Employees]
			, CASE WHEN b.is_buyer = 0 THEN k.communication_value ELSE '' END  AS [Phone Number]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Postal Code]  END AS [Postal Code]
			, CASE WHEN b.is_buyer = 0 THEN h.PublicProfileUrl  END  AS [Public Profile URL]
			, CASE WHEN b.is_buyer = 0 THEN i.disciplines0  END  AS [RFQ Access Capabilities 0]
			, CASE WHEN b.is_buyer = 0 THEN j.disciplines1  END  AS [RFQ Access Capabilities 1]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company State]  END AS [State/Region]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Street Address]  END AS [Street Address]
			, CASE WHEN b.is_buyer = 0 THEN c.[Company Street Address 2]  END AS [Street Address 2]
			, d.manufacturing_location_id AS [Manufacturing Location]
			, NULL AS [Twitter Handle]
			, CAST('false' AS BIT) AS [IsSynced]
			, @SyncedDate		AS [SyncedDate]
			, @SyncedDateIST	AS [SyncedDateIST]


		FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs a 
		JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesType b ON a.[Vision Account Id] = b.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress c ON  a.[Vision Account Id] = c.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo d ON  a.[Vision Account Id] = d.company_id
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines0
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
			GROUP BY
				company_id
		) e ON  a.[Vision Account Id] = e.company_id
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines1
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline1
			GROUP BY
				company_id
		) f ON  a.[Vision Account Id] = f.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesIndustries    g on a.[Vision Account Id] = g.company_id  
		LEFT JOIN 
		(
			SELECT 	
				a.company_id , 
				@PublicProfileURL
				+ CASE 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(a.name))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'') + '-' 
				  END 
				+ CASE 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(c.[Company City]),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(c.[Company City]))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'') +  '-'
					END 
				+ CASE 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(a.name),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					WHEN LEN(ISNULL(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(dbo.removespecialchars(c.[Company State]),' ','-'),'__','-'),'___','-') ),'--','-'),'')) = 0 THEN '' 
					ELSE ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(dbo.removespecialchars(c.[Company State]))),' ','-'),'__','-'),'___','-') ),'--','-'),'---','-'),'----','-'),'-----','-'),'')  +  '-'
					END
				+  CONVERT(VARCHAR(100),a.company_id)  AS  PublicProfileUrl
			FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo  a (NOLOCK)
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress	c (NOLOCK) ON a.company_id = c.company_id
		
		) h ON a.[Vision Account Id] = h.company_id 
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines0
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline0
			GROUP BY
				company_id
		) i ON  a.[Vision Account Id] = i.company_id
		LEFT JOIN 
		(
			SELECT
			company_id, 
			STRING_AGG(part_category_id,';') disciplines1
			FROM
				#tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline1
			GROUP BY
				company_id
		) j ON  a.[Vision Account Id] = j.company_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompanyCommunications k (NOLOCK) ON a.[Vision Account Id] = k.company_id AND k.Rn = 1
		WHERE a.[IsProcessed] IS NULL AND a.[Vision Contact Id] IS NULL AND [SyncType] = 'Scheduler - 30 Minutes'

	

		-- contact details
		SELECT 
			b.contact_id ,b.company_id , b.is_buyer ,b.first_name ,b.last_name ,b.address_id ,b.[user_id] ,c.email ,d.seller_cont_id ,e.buyer_cont_id , b.is_validated_buyer
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN h.company_id 
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN f.company_id
				END
			) dualaccount_company_id
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN h.first_name
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN f.first_name
				END
			) dualaccount_first_name
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN h.last_name
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN f.last_name
				END
			) dualaccount_last_name
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN h.address_id
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN f.address_id
				END
			) dualaccount_address_id
			, j.manufacturing_location_id AS territory
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN l.manufacturing_location_id 
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN k.manufacturing_location_id
				END
			) AS dualaccount_territory
			,(
				CASE 
					WHEN  d.seller_cont_id IS NULL AND  e.buyer_cont_id IS NOT NULL THEN h.is_validated_buyer
					WHEN  d.seller_cont_id IS NOT NULL AND  e.buyer_cont_id IS NULL THEN f.is_validated_buyer
				END
			) AS dualaccount_is_validated_buyer
			----M2-4544 added below fields
			, b.created_on [Registration Date]
			, b.VisionValidatedDate [Vision Validated Date]
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo
		FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs  a
		JOIN mp_contacts  b (NOLOCK) ON  a.[Vision Contact Id] = b.contact_id AND a.[IsProcessed] IS NULL  AND a.[Vision Account Id] IS NULL
		JOIN AspNetUsers  c (NOLOCK) ON b.user_id = c.id
		LEFT JOIN  
		(
			SELECT buyer_cont_id , seller_cont_id FROM mp_contacts_buyersellerassociation (NOLOCK)
		
		) d ON b.contact_id = d.buyer_cont_id
		LEFT JOIN  
		(
			SELECT seller_cont_id , buyer_cont_id FROM mp_contacts_buyersellerassociation (NOLOCK)
		
		) e ON b.contact_id = e.seller_cont_id
		LEFT JOIN mp_contacts  f (NOLOCK) ON d.seller_cont_id = f.contact_id
		LEFT JOIN AspNetUsers  g (NOLOCK) ON f.user_id = g.id
		LEFT JOIN mp_contacts  h (NOLOCK) ON e.buyer_cont_id = h.contact_id
		LEFT JOIN AspNetUsers  i (NOLOCK) ON h.user_id = i.id
		JOIN mp_companies	   j (NOLOCK) ON b.company_id = j.company_id
		LEFT JOIN mp_companies	   k (NOLOCK) ON f.company_id = k.company_id
		LEFT JOIN mp_companies	   l (NOLOCK) ON h.company_id = l.company_id
		WHERE a.[SyncType] = 'Scheduler - 30 Minutes'
	
		-- contact address
		SELECT 
			a.address_id 
			,b.address1 AS [Contact Street Address]
			,b.address2 AS [Contact Street Address 2]
			,b.address4 AS [Contact City] 
			,c.region_name AS [Contact State]
			,b.address3 AS [Contact Postal Code]
			,d.country_name AS [Contact Country]
			,d.iso_code AS [Contact Country Code]
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsAddress
		FROM 
		(
			SELECT address_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo
			UNION
			SELECT dualaccount_address_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE dualaccount_address_id IS NOT NULL
		) a
		JOIN mp_addresses			b (NOLOCK) ON a.address_id = b.address_id  AND a.address_id IS NOT NULL
		LEFT JOIN mp_mst_region		c (NOLOCK) ON b.region_id = c.region_id AND b.region_id <> 0
		LEFT JOIN mp_mst_country	d (NOLOCK) ON b.country_id = d.country_id AND b.country_id <> 0

		-- contact communication details
		SELECT 
			communication_id , contact_id , communication_type_id , communication_value  
			, ROW_NUMBER() OVER (PARTITION BY contact_id , communication_type_id ORDER BY contact_id , communication_type_id , communication_id DESC) Rn 
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications
		FROM mp_communication_details (NOLOCK)
		WHERE communication_type_id IN  (1,2,4,5) AND contact_id <> 0
		AND contact_id IN 
		(
			SELECT contact_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo
			UNION
			SELECT seller_cont_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE seller_cont_id IS NOT NULL
			UNION
			SELECT buyer_cont_id FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE buyer_cont_id IS NOT NULL
		)
	
		SELECT DISTINCT
			b.email				AS [Email]
			, NULL					AS [HubSpot Contact Id]
			, b.user_id				AS [Contact Id]
			, (CASE WHEN b.is_buyer = 1 THEN b.contact_id ELSE b.buyer_cont_id END) AS [Vision Buyer Id]
			, (CASE WHEN b.is_buyer = 1 THEN b.company_id ELSE b.dualaccount_company_id END) AS [Vision Buyer Account Id]
			, NULL					AS [HubSpot Buyer Account Id]
			, (CASE WHEN b.is_buyer = 0 THEN b.contact_id ELSE b.seller_cont_id END) AS [Vision Supplier Id]
			, (CASE WHEN b.is_buyer = 0 THEN b.company_id ELSE b.dualaccount_company_id END) AS [Vision Supplier Account Id]
			, NULL					AS [HubSpot Supplier Account Id]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact City] ELSE d.[Contact City] END) AS [Buyer City]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact Country] ELSE d.[Contact Country] END) AS [Buyer Country]
			, (CASE WHEN b.is_buyer = 1 THEN b.first_name ELSE b.dualaccount_first_name END) AS [Buyer First Name]				
			, (CASE WHEN b.is_buyer = 1 THEN b.last_name ELSE b.dualaccount_last_name END) AS [Buyer Last Name]				
			, NULL AS [Buyer Phone]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact Postal Code] ELSE d.[Contact Postal Code] END) AS [Buyer Postal Code]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact State] ELSE d.[Contact State] END) AS [Buyer State]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact Street Address] ELSE d.[Contact Street Address] END) AS [Buyer Street Address]
			, (CASE WHEN b.is_buyer = 1 THEN c.[Contact Street Address 2] ELSE d.[Contact Street Address 2] END) AS [Buyer Street Address 2]
			, (CASE WHEN b.is_buyer = 1 THEN b.territory ELSE b.dualaccount_territory END)  AS [Buyer Territory]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact City] ELSE d.[Contact City] END) AS [City]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact Country] ELSE d.[Contact Country] END) AS [Country]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact State] ELSE d.[Contact State] END) AS [Country/Region]
			, NULL AS [Fax]
			, (CASE WHEN b.is_buyer = 0 THEN b.first_name ELSE b.dualaccount_first_name END) AS [First Name]
			, NULL AS [First RFQ Release Date]
			, NULL AS [Industry]
			, (CASE WHEN b.is_buyer = 0 THEN b.last_name ELSE b.dualaccount_last_name END) AS [Last Name]
			, NULL AS [Last Upgrade Request Date]
			, CASE 
				WHEN b.is_buyer = 1 AND ISNULL(b.seller_cont_id,0)> 0 THEN 'Both' 
				WHEN b.is_buyer = 1 AND ISNULL(b.seller_cont_id,0)= 0 THEN 'Buyer' 
				WHEN b.is_buyer = 0 AND ISNULL(b.buyer_cont_id,0)> 0 THEN 'Both'
				WHEN b.is_buyer = 0 AND ISNULL(b.buyer_cont_id,0)= 0 THEN 'Supplier'
			  END AS [MFG Contact Type]
			, NULL  AS [Mobile Phone]
			, NULL AS [Most Recent RFQ Release Date]
			, NULL AS [Number of RFQs]
			, NULL AS [Phone]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact Postal Code] ELSE d.[Contact Postal Code] END) AS [Postal Code]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact State] ELSE d.[Contact State] END) AS [State/Region]
			, (CASE WHEN b.is_buyer = 0 THEN c.[Contact Street Address] ELSE d.[Contact Street Address] END) AS [Street Address]
			, (CASE WHEN b.is_buyer = 0 THEN b.territory ELSE b.dualaccount_territory END) AS [Territory]
			, NULL AS [Unsubscribed from all email]
			, NULL AS [Upgrade Request]
			, NULL AS [Vision RFQ Validated]
			, NULL AS [Website URL]
			, CAST('false' AS BIT)	AS [IsSynced]
			, @SyncedDate			AS [SyncedDate]
			, @SyncedDateIST		AS [SyncedDateIST]
			----M2-4544 added below fields
			, b.[Registration Date]
			, b.[Vision Validated Date]
		INTO #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1
		FROM DataSync_MarketplaceHubSpot.dbo.MarketplaceToHubSpotContactCompaniesCreateLogs a 
		JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo b ON a.[Vision Contact Id] = b.contact_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsAddress c ON b.address_id = c.address_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsAddress d ON b.dualaccount_address_id = d.address_id
		WHERE a.[IsProcessed] IS NULL AND a.[Vision Account Id] IS NULL AND [SyncType] = 'Scheduler - 30 Minutes'

		-- inserting new records
		INSERT INTO  DataSync_MarketplaceHubSpot.dbo.HubSpotContacts
		(
			[Email], [HubSpot Contact Id], [Contact Id], [Vision Buyer Id], [Vision Buyer Account Id], [HubSpot Buyer Account Id], [Vision Supplier Id]
		, [Vision Supplier Account Id], [HubSpot Supplier Account Id], [Buyer City], [Buyer Country] 	,[Buyer First Name]	,[Buyer Last Name]	 , [Buyer Phone], [Buyer Postal Code], [Buyer State], [Buyer Street Address], [Buyer Street Address 2]
			, [Buyer Territory], [City], [Country], [Country/Region], [Fax], [First Name], [First RFQ Release Date], [Industry], [Last Name], [Last Upgrade Request Date]
			, [MFG Contact Type], [Mobile Phone], [Most Recent RFQ Release Date], [Number of RFQs], [Phone], [Postal Code], [State/Region], [Street Address], [Territory]
			, [Unsubscribed from all email], [Upgrade Request], [Vision RFQ Validated], [Website URL], [IsSynced], [SyncedDate], [SyncedDateIST]
			, [Registration Date] ,[Vision Validated Date] ---- M2-4544
		)
		SELECT 
			a.[Email], a.[HubSpot Contact Id], a.[Contact Id], a.[Vision Buyer Id], a.[Vision Buyer Account Id], a.[HubSpot Buyer Account Id], a.[Vision Supplier Id]
			, a.[Vision Supplier Account Id], a.[HubSpot Supplier Account Id], a.[Buyer City], a.[Buyer Country] 	,[Buyer First Name]	,[Buyer Last Name]	 
			, b.[communication_value] [Buyer Phone], a.[Buyer Postal Code], a.[Buyer State], a.[Buyer Street Address], a.[Buyer Street Address 2]
			, a.[Buyer Territory], a.[City], a.[Country], a.[Country] , a.[Fax], a.[First Name]
			, e.[First RFQ Release Date] [First RFQ Release Date], a.[Industry], a.[Last Name]
			, f.[Last Upgrade Request Date] [Last Upgrade Request Date]
			, a.[MFG Contact Type], a.[Mobile Phone], e.[Most Recent RFQ Release Date] [Most Recent RFQ Release Date]
			, e.[Number of RFQs Released] [Number of RFQs]
			, c.communication_value AS [Phone], a.[Postal Code], a.[State/Region], a.[Street Address], a.[Territory]
			, a.[Unsubscribed from all email]
			, (CASE WHEN f.[Last Upgrade Request Date] IS NULL THEN 0 ELSE 1 END) [Upgrade Request]
			, d.Is_Validated_Buyer AS [Vision RFQ Validated]
			, CASE 
				WHEN a.[Vision Buyer Id] IS NOT NULL AND  a.[Vision Supplier Id] IS NULL THEN g.communication_value
				WHEN a.[Vision Buyer Id] IS NULL AND  a.[Vision Supplier Id] IS NOT NULL THEN h.communication_value
				ELSE h.communication_value
			  END [Website URL]
			, a.[IsSynced], a.[SyncedDate], a.[SyncedDateIST]
			----M2-4544 added below fields
			, a.[Registration Date]
			, a.[Vision Validated Date]
		FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1 a
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications b ON a.[Vision Buyer Id] = b.contact_id AND b.Rn =1 AND b.communication_type_id = 1
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications c ON a.[Vision Supplier Id] = c.contact_id AND c.Rn =1 AND c.communication_type_id = 1
		--LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo d ON a.[Vision Buyer Id] = d.contact_id
		LEFT JOIN 
		(
			SELECT contact_id , is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 1
			UNION
			SELECT buyer_cont_id , dualaccount_is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 0 AND buyer_cont_id IS NOT NULL
		) d ON a.[Vision Buyer Id] = d.contact_id
		LEFT JOIN 
		(
			SELECT 
				b.contact_id  , MIN(a.status_date) [First RFQ Release Date] 
				, MAX(a.status_date) [Most Recent RFQ Release Date]
				, COUNT(DISTINCT a.rfq_id) as [Number of RFQs Released]
			FROM mp_rfq_release_history (NOLOCK) a
			JOIN mp_rfq					(NOLOCK) b ON a.rfq_id = b.rfq_id
			GROUP BY b.contact_id
		) e ON a.[Vision Buyer Id] = e.contact_id
		LEFT JOIN
		(
			SELECT 
				contact_id , MAX(activity_date) [Last Upgrade Request Date]
			FROM mp_track_user_activities (NOLOCK) WHERE activity_id IN (3,14)
			GROUP BY contact_id
		) f ON a.[Vision Supplier Id] = f.contact_id
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications g ON a.[Vision Buyer Id] = g.contact_id AND g.Rn =1 AND g.communication_type_id = 4
		LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications h ON a.[Vision Supplier Id] = h.contact_id AND h.Rn =1 AND h.communication_type_id = 4
		WHERE NOT EXISTS (SELECT 1 FROM DataSync_MarketplaceHubSpot.dbo.HubSpotContacts b (NOLOCK) WHERE a.Email = b.Email )


		-- updating existing records
		UPDATE a SET 
			a.[Email] = b.[Email]
			,a.[HubSpot Contact Id] = b.[HubSpot Contact Id]
			,a.[Contact Id] = b.[Contact Id]
			,a.[Vision Buyer Id] = b.[Vision Buyer Id]
			,a.[Vision Buyer Account Id] = b.[Vision Buyer Account Id]
			,a.[HubSpot Buyer Account Id] = b.[HubSpot Buyer Account Id]
			,a.[Vision Supplier Id] = b.[Vision Supplier Id]
			,a.[Vision Supplier Account Id] = b.[Vision Supplier Account Id]
			,a.[HubSpot Supplier Account Id] = b.[HubSpot Supplier Account Id]
			,a.[Buyer City] = b.[Buyer City]
			,a.[Buyer Country] = b.[Buyer Country]
			,a.[Buyer First Name] = b.[Buyer First Name]
			,a.[Buyer Last Name] = b.[Buyer Last Name]
			,a.[Buyer Phone] = b.[Buyer Phone]
			,a.[Buyer Postal Code] = b.[Buyer Postal Code]
			,a.[Buyer State] = b.[Buyer State]
			,a.[Buyer Street Address] = b.[Buyer Street Address]
			,a.[Buyer Street Address 2] = b.[Buyer Street Address 2]
			,a.[Buyer Territory] = b.[Buyer Territory]
			,a.[City] = b.[City]
			,a.[Country] = b.[Country]
			,a.[Country/Region] = b.[Country]
			,a.[Fax] = b.[Fax]
			,a.[First Name] = b.[First Name]
			,a.[First RFQ Release Date] = b.[First RFQ Release Date]
			,a.[Industry] = b.[Industry]
			,a.[Last Name] = b.[Last Name]
			,a.[Last Upgrade Request Date] = b.[Last Upgrade Request Date]
			,a.[MFG Contact Type] = b.[MFG Contact Type]
			,a.[Mobile Phone] = b.[Mobile Phone]
			,a.[Most Recent RFQ Release Date] = b.[Most Recent RFQ Release Date]
			,a.[Number of RFQs] = b.[Number of RFQs]
			,a.[Phone] = b.[Phone]
			,a.[Postal Code] = b.[Postal Code]
			,a.[State/Region] = b.[State/Region]
			,a.[Street Address] = b.[Street Address]
			,a.[Territory] = b.[Territory]
			,a.[Unsubscribed from all email] = b.[Unsubscribed from all email]
			,a.[Upgrade Request] = b.[Upgrade Request]
			,a.[Vision RFQ Validated] = b.[Vision RFQ Validated]
			,a.[Website URL] = b.[Website URL]
			,a.[IsSynced] = 0
			,a.[SyncedDate] = b.[SyncedDate]
			,a.[SyncedDateIST] = b.[SyncedDateIST]
			,a.[IsProcessed] = NULL

		FROM DataSync_MarketplaceHubSpot.dbo.HubSpotContacts (NOLOCK) a
		JOIN
		(
			SELECT 
			a.[Email], a.[HubSpot Contact Id], a.[Contact Id], a.[Vision Buyer Id], a.[Vision Buyer Account Id], a.[HubSpot Buyer Account Id], a.[Vision Supplier Id]
			, a.[Vision Supplier Account Id], a.[HubSpot Supplier Account Id], a.[Buyer City], a.[Buyer Country] 	,[Buyer First Name]	,[Buyer Last Name]	 
			, b.[communication_value] [Buyer Phone], a.[Buyer Postal Code], a.[Buyer State], a.[Buyer Street Address], a.[Buyer Street Address 2]
			, a.[Buyer Territory], a.[City], a.[Country], a.[Country/Region], a.[Fax], a.[First Name]
			, e.[First RFQ Release Date] [First RFQ Release Date], a.[Industry], a.[Last Name]
			, f.[Last Upgrade Request Date] [Last Upgrade Request Date]
			, a.[MFG Contact Type], a.[Mobile Phone], e.[Most Recent RFQ Release Date] [Most Recent RFQ Release Date]
			, e.[Number of RFQs Released] [Number of RFQs]
			, c.communication_value AS [Phone], a.[Postal Code], a.[State/Region], a.[Street Address], a.[Territory]
			, a.[Unsubscribed from all email]
			, (CASE WHEN f.[Last Upgrade Request Date] IS NULL THEN 0 ELSE 1 END) [Upgrade Request]
			, d.Is_Validated_Buyer AS [Vision RFQ Validated]
			, CASE 
				WHEN a.[Vision Buyer Id] IS NOT NULL AND  a.[Vision Supplier Id] IS NULL THEN g.communication_value
				WHEN a.[Vision Buyer Id] IS NULL AND  a.[Vision Supplier Id] IS NOT NULL THEN h.communication_value
				ELSE h.communication_value
			  END [Website URL]
			, a.[IsSynced], a.[SyncedDate], a.[SyncedDateIST]
			FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1 a
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications b ON a.[Vision Buyer Id] = b.contact_id AND b.Rn =1 AND b.communication_type_id = 1
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications c ON a.[Vision Supplier Id] = c.contact_id AND c.Rn =1 AND c.communication_type_id = 1
			--LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo d ON a.[Vision Buyer Id] = d.contact_id
			LEFT JOIN 
			(
				SELECT contact_id , is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 1
				UNION
				SELECT buyer_cont_id , dualaccount_is_validated_buyer FROM #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo WHERE is_buyer = 0 AND buyer_cont_id IS NOT NULL
			) d ON a.[Vision Buyer Id] = d.contact_id
			LEFT JOIN 
			(
				SELECT 
					b.contact_id  , MIN(a.status_date) [First RFQ Release Date] 
					, MAX(a.status_date) [Most Recent RFQ Release Date]
					, COUNT(DISTINCT a.rfq_id) as [Number of RFQs Released]
				FROM mp_rfq_release_history (NOLOCK) a
				JOIN mp_rfq					(NOLOCK) b ON a.rfq_id = b.rfq_id
				GROUP BY b.contact_id
			) e ON a.[Vision Buyer Id] = e.contact_id
			LEFT JOIN
			(
				SELECT 
					contact_id , MAX(activity_date) [Last Upgrade Request Date]
				FROM mp_track_user_activities (NOLOCK) WHERE activity_id IN (3,14)
				GROUP BY contact_id
			) f ON a.[Vision Supplier Id] = f.contact_id
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications g ON a.[Vision Buyer Id] = g.contact_id AND g.Rn =1 AND g.communication_type_id = 4
			LEFT JOIN #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications h ON a.[Vision Supplier Id] = h.contact_id AND h.Rn =1 AND h.communication_type_id = 4
		) b ON a.Email = b.Email
	
	--	COMMIT
	END TRY
	BEGIN CATCH
	--	ROLLBACK
	print 'rollback'
	END CATCH

	/*
	M2-4544
	Add Registration and validation date to database fields and to Hubspot - DB
	*/ 
	BEGIN
	    ---- here update from MFG to HubSpot - validation date from vision
		UPDATE b
		SET 
			b.[Vision Validated Date] = a.VisionValidatedDate
			/* Beau Martin 19/01/2023 User khalid.mostafa@brainchildengineering.com is "Validated" in Vision, yet "Vision RFQ Validated" status is not updated in Hubspot.*/
			,[Vision RFQ Validated]  = 1
			/**/
			,b.[IsSynced] = 0
			,b.[IsProcessed] = NULL
		FROM mp_contacts (NOLOCK) a
		JOIN DataSync_MarketplaceHubSpot.dbo.hubspotcontacts(NOLOCK) b on  b.[Vision Buyer Id] = a.contact_id
		WHERE b.[Vision Validated Date] IS NULL
		AND a.VisionValidatedDate IS NOT NULL
		--- TBD on synctype = 1 condition is requird or not
		 
		---- here update [Vision Validated Date] if from MFG this buyer validate again from vision
		UPDATE b
		SET 
			b.[Vision Validated Date] = a.VisionValidatedDate
			/* Beau Martin 19/01/2023 User khalid.mostafa@brainchildengineering.com is "Validated" in Vision, yet "Vision RFQ Validated" status is not updated in Hubspot.*/
			,[Vision RFQ Validated]  = 1
			/**/
			,b.[IsSynced] = 0
			,b.[IsProcessed] = NULL
		FROM mp_contacts (NOLOCK) a
		JOIN DataSync_MarketplaceHubSpot.dbo.hubspotcontacts(nolock) b on  b.[Vision Buyer Id] = a.contact_id
		WHERE b.[Vision Validated Date] IS NOT NULL
		AND  CAST(a.VisionValidatedDate AS DATETIME)   > CAST(b.[Vision Validated Date]  AS DATETIME)

		UPDATE b
		SET 
			b.[Registration Date] = a.created_on
			,b.[IsSynced] = 0
			,b.[IsProcessed] = NULL
		FROM mp_contacts (NOLOCK) a
		JOIN AspNetUsers (NOLOCK) c ON a.user_id = c.id 		
		JOIN DataSync_MarketplaceHubSpot.dbo.hubspotcontacts(nolock) b on  c.Email = b.Email
		WHERE  b.[Registration Date] IS NULL AND YEAR(a.created_on) > 2020

	END

	----  M2-4863 Update HubSpotContactId from HubSpot DB to MFG DB
	UPDATE b
	 SET b.HubSpotContactId = d.[HubSpot Contact Id]
	 FROM  aspnetusers (NOLOCK) a  
	 JOIN mp_contacts (NOLOCK) b ON a.id = b.user_id  
	 JOIN mp_companies (NOLOCK) c ON c.company_id = b.company_id   
	 JOIN DataSync_MarketplaceHubSpot.dbo.hubspotcontacts(NOLOCK) d ON d.email = a.email
	 WHERE d.[HubSpot Contact Id] IS NOT NULL 
	 AND b.HubSpotContactId is null
	  


	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofCompanies
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ListofContacts
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesType
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesAddress
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesInfo
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline0
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesQuotingDiscipline1
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompaniesIndustries
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo1
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsInfo2
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactsAddress
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_ContactCommunications
	DROP TABLE IF EXISTS #tmp_MarketplaceToHubSpot_Sync_CompanyContact_CompanyCommunications


END
GO
PRINT N'Creating Procedure [dbo].[proc_set_HubspotToMFGCompanyQuotingCapabilityInstantSync]...';


GO



/*
	
		EXEC proc_set_HubspotToMFGCompanyQuotingCapabilityInstantSync
		1772113,'34556','Blow Molding;Woodworking'
		

*/ 

CREATE PROCEDURE [dbo].[proc_set_HubspotToMFGCompanyQuotingCapabilityInstantSync]
 (
	@CompanyID INT  = NULL
	,@HubSpotAccountId VARCHAR(100) 
    ,@QuotingCapability NVARCHAR(MAX) = NULL  
 )
AS
BEGIN
 		DROP TABLE IF EXISTS #CompanyQuotingCapability 
		DECLARE @MaxQuotingCapabilitiesAllowed INT , @AccountType INT = 83 --- default set to basic
		
		----get company account type   
		SELECT @AccountType = account_type FROM mp_registered_supplier(NOLOCK) WHERE company_id = @CompanyID
		
		---- for webhook log  entry tracking 
		INSERT INTO HubSpotWebhookCompanyQuotingCapabilityExecutionLogs (CompanyID,HubSpotAccountId,HubSpotQuotingCapability,WebhookType,AccountType)
		VALUES (@CompanyID,@HubSpotAccountId,@QuotingCapability,'CompanyQuotingCapability',@AccountType)
		
		----- split Quoting Capability into table
		SELECT value AS QuotingCapability INTO #CompanyQuotingCapability FROM string_split(@QuotingCapability,';')
			
		--- As per discussion with client only gold and platinum company set QuotingCapability and exclude growth account type 
		IF (@AccountType IN (85,86))
		BEGIN
			IF  (@QuotingCapability IS NULL OR @QuotingCapability = '' )
			BEGIN
			 
				BEGIN TRY
					BEGIN TRANSACTION
						--- deleted existing quoting capability of this company 
						DELETE FROM mp_gateway_subscription_company_processes WHERE company_id = @CompanyID

						---- Set the QuotingCapabilities count into mp_companies 
						UPDATE [mp_companies] SET [max_quoting_capabilities_allowed] = NULL
						WHERE [company_id] = @CompanyID

						---- Update this field HubSpotCompanies -> [Supplier Purchased Processes]  
						UPDATE DataSync_MarketplaceHubSpot..HubSpotCompanies
						SET  [Supplier Purchased Processes]   = NULL
						WHERE  [vision account id] = @CompanyID
						AND Synctype is null

						COMMIT TRANSACTION
					END TRY
					BEGIN CATCH
						ROLLBACK TRANSACTION
					END CATCH

			END
			ELSE
			BEGIN
		 
				IF (SELECT COUNT(1) FROM #CompanyQuotingCapability) > 0
				BEGIN
					BEGIN TRY
						BEGIN TRANSACTION
			
						---- Get the count of quoting capability
						SELECT @MaxQuotingCapabilitiesAllowed = COUNT(1) FROM #CompanyQuotingCapability

						--- deleted existing quoting capability of this company and assigned latest capability from hubspot
						DELETE FROM mp_gateway_subscription_company_processes WHERE company_id = @CompanyID

						--- inserted existing quoting capability of this company and assigned latest capability from hubspot
						INSERT INTO [mp_gateway_subscription_company_processes] ([company_id], [part_category_id])
						SELECT  @CompanyID AS company_id,   b.part_category_id
						FROM mp_mst_part_category (NOLOCK) a
						JOIN mp_mst_part_category (NOLOCK) b on a.part_category_id = b.parent_part_category_id and b.level = 1
						AND a.parent_part_category_id is NULL
						JOIN #CompanyQuotingCapability d on d.QuotingCapability = a.discipline_name 

						---- Set the QuotingCapabilities count into mp_companies 
						UPDATE [mp_companies] SET [max_quoting_capabilities_allowed] = @MaxQuotingCapabilitiesAllowed
						WHERE [company_id] = @CompanyID;
				 
						 ---- Update this field HubSpotCompanies -> [Supplier Purchased Processes]  
						UPDATE DataSync_MarketplaceHubSpot..HubSpotCompanies
						SET  [Supplier Purchased Processes]   = @QuotingCapability
						WHERE  [vision account id] = @CompanyID
						AND Synctype is null

						COMMIT TRANSACTION
					END TRY
					BEGIN CATCH
						ROLLBACK TRANSACTION
					END CATCH
				END
			END
		END  ---- (@AccountType IN (85,86))

		IF (@AccountType = 83)
		BEGIN
			BEGIN TRY
				BEGIN TRANSACTION
					--- deleted existing quoting capability of this company 
					DELETE FROM mp_gateway_subscription_company_processes WHERE company_id = @CompanyID

					---- Set the QuotingCapabilities count into mp_companies 
					UPDATE [mp_companies] SET [max_quoting_capabilities_allowed] = NULL
					WHERE [company_id] = @CompanyID

					---- Update this field HubSpotCompanies -> [Supplier Purchased Processes]  
					UPDATE DataSync_MarketplaceHubSpot..HubSpotCompanies
					SET  [Supplier Purchased Processes]   = NULL
					WHERE  [vision account id] = @CompanyID
					AND Synctype is null

				COMMIT TRANSACTION
			END TRY
			BEGIN CATCH
				ROLLBACK TRANSACTION
			END CATCH
		END
	
		
END
GO
PRINT N'Creating Procedure [dbo].[proc_set_HubspotToMFGCustomerServiceRepInstantSync]...';


GO
/*
  M2-5176 Hubspot - Downsync CS Rep - Instant - DB 

 EXEC [dbo].[proc_set_HubspotToMFGCustomerServiceRepInstantSync]
 @CompanyID = 1772113
 ,@HubSpotAccountId =15681976877
 ,@HubSpotCustomerServiceRepId =  52518328 -- 52518180  

*/
 CREATE PROCEDURE [dbo].[proc_set_HubspotToMFGCustomerServiceRepInstantSync]
 (
	@CompanyID INT = NULL
	,@HubSpotAccountId VARCHAR(100) = NULL 
    ,@HubSpotCustomerServiceRepId VARCHAR(100) = NULL --this field refer from hubspot -> mst_manager -> hubspot_user_id
 )
 AS
BEGIN
 SET NOCOUNT ON

	 DECLARE @CustomerServiceRepContactId  INT = NULL , @PreviousCustomerServiceRepContactId INT ,@Identity INT
	 	 
	 ---- for webhook log  entry tracking 
	 INSERT INTO HubSpotWebhookCustomerServiceRepExecutionLogs (CompanyID,HubSpotAccountId,HubSpotUserId,WebhookType)
	 VALUES (@CompanyID,@HubSpotAccountId,@HubSpotCustomerServiceRepId,'CustomerServiceRep')

	 SET @Identity = @@IDENTITY

	 ---Get the manager_id from hubspot database
	 SELECT @CustomerServiceRepContactId = manager_id FROM DataSync_MarketplaceHubSpot..mst_manager(NOLOCK) 
									WHERE hubspot_user_id = @HubSpotCustomerServiceRepId

	 ---Get the current CustomerServiceRepID from MFG database
	 SELECT @PreviousCustomerServiceRepContactId = assigned_customer_rep FROM mp_companies(NOLOCK) 
								    WHERE company_id= @CompanyID
	 
		   BEGIN TRY
				BEGIN TRANSACTION
				
					------ Update the assigned_customer_rep field to costomer service representative id from hubspot
		 			UPDATE mp_companies
					SET assigned_customer_rep  = @CustomerServiceRepContactId
					WHERE company_id= @CompanyID

					------ Update data into Hubspot DB
					UPDATE DataSync_MarketplaceHubSpot.dbo.hubspotcompanies
					SET [Customer Service Rep Id] = @CustomerServiceRepContactId
					WHERE [vision account id] = @CompanyID
					AND [SyncType] IS NULL

					---- Update this id from MFG CustomerServiceRepContactId  HubSpotWebhookCustomerServiceRepExecutionLogs -> PreviousCustomerServiceRepID
					UPDATE HubSpotWebhookCustomerServiceRepExecutionLogs
					SET PreviousCustomerServiceRepContactId = @PreviousCustomerServiceRepContactId
					WHERE LogID = @Identity
									 
			
				COMMIT TRANSACTION
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION
			END CATCH
	 

	  

 END
GO
PRINT N'Creating Procedure [dbo].[proc_set_MfgToZoho_CompanyContact_WorkAroundForImmediateSync]...';


GO

-- EXEC proc_set_MfgToZoho_CompanyContact_WorkAroundForImmediateSync
CREATE PROCEDURE [dbo].[proc_set_MfgToZoho_CompanyContact_WorkAroundForImmediateSync]
AS
BEGIN
	
	DECLARE @ContId INT
	DECLARE @CompId INT

	DROP TABLE IF EXISTS #tmpproc_set_MfgToZoho_CompanyContact_WorkAroundForImmediateSync
	DROP TABLE IF EXISTS #tmpproc_set_MfgToZoho_CompanyContact_WorkAroundForImmediateSync1

	SELECT VisionSUPID INTO #tmpproc_set_MfgToZoho_CompanyContact_WorkAroundForImmediateSync 
	FROM zoho..zoho_user_accounts (NOLOCK)

	SELECT a.company_id , a.contact_id , ROW_NUMBER() OVER(ORDER BY a.contact_id) AS Rn   
	INTO #tmpproc_set_MfgToZoho_CompanyContact_WorkAroundForImmediateSync1
	FROM mp_contacts (NOLOCK) a 
	LEFT JOIN #tmpproc_set_MfgToZoho_CompanyContact_WorkAroundForImmediateSync b ON CONVERT(VARCHAR(100),a.contact_id) = b.VisionSUPID
	WHERE b.VisionSUPID IS NULL
	AND a.company_id IS NOT NULL
	AND CONVERT(DATE,a.created_on) > CONVERT(DATE,DATEADD(DAY,-30,GETUTCDATE()))  
	
	DECLARE	@Counter INT = 1
	DECLARE	@Counter1 INT = (SELECT COUNT(1)FROM #tmpproc_set_MfgToZoho_CompanyContact_WorkAroundForImmediateSync1)
	WHILE @Counter <=@Counter1
	BEGIN
		
		SELECT 
			@CompId = company_id 
			,@ContId = contact_id 
		FROM #tmpproc_set_MfgToZoho_CompanyContact_WorkAroundForImmediateSync1 WHERE Rn = @Counter

		PRINT  'Company Id: ' + CAST(@CompId AS VARCHAR(100)) +'           Contact Id: '+    CAST(@ContId AS VARCHAR(100))

		EXEC [proc_mfgzoho_set_userprofile_sync_up] @CompanyID=@CompId , @ContactID =@ContId

		SET @Counter= @Counter+ 1
	END


END
GO
PRINT N'Altering Procedure [dbo].[proc_get_SendEmailTemplateDataToSendgrid]...';


GO



/*
 


exec proc_get_SendEmailTemplateDataToSendgrid 
@rfq_id=null
,@message_type=N'BuyerPressedCallOnProfileEmail'
,@message_status_id   = null  
,@from_contact=null
,@to_contacts=null
,@message=null
,@message_link=null
,@MessageFileNames  = null
,@json    = 
	N'
	{
	 
	  "app": "mfg-api"   
	  ,"event_type": "BuyerPressedCallOnProfileEmail"  
	  ,"user_id": null
	  ,"email_address" : "supplier19thsept@yopmail.com"
	  ,"EmailVerifyParam" : null
	  ,"LinkToTheProfile" : "profiletest"
	  ,"LeadStreamDeepLink" : "LeadStreamDeepLink"


	}
	'


 
 
*/
ALTER PROCEDURE [dbo].[proc_get_SendEmailTemplateDataToSendgrid]
(
	@rfq_id				INT = NULL ,
	@message_type		VARCHAR(500)	= NULL ,
	@message_status_id  INT	            = NULL ,
	@from_contact		BIGINT          = NULL , 
	@to_contacts		VARCHAR(max)	= NULL ,
	@message			VARCHAR(max)	= NULL ,
	@message_link		VARCHAR(max)	= NULL , 
	@MessageFileNames   VARCHAR(max)	= NULL ,
	@json               VARCHAR(MAX)	= NULL

)
as

begin 

/*
  "event_type": "VerificationEmail",  
  "event_type": "ApprovedEmail",  
  "event_type": "BuyerPressedCallOnProfileEmail",  


  Buyer : "delatestbuyer18sep@yopmail.com"
  Supplier : supplier19thsept@yopmail.com
	  
*/

--DECLARE @message_type varchar(500)	= 'BuyerViewedYourProfileEmail'  ,
--	@rfq_id				int = null ,
--	@message_status_id  int	= null ,
--	@from_contact		bigint = null , 
--	@to_contacts		varchar(max) = null,
--	@message			varchar(max) = null,
--	@message_link		varchar(max) = null, 
--	@MessageFileNames   varchar(max) = null,
--	@json VARCHAR(MAX)  = 
--	N'
--	{
--	  "app": "mfg-api"   
--	  ,"event_type": "BuyerViewedYourProfileEmail"  
--	  ,"user_id": null
--	  ,"email_address" : "supplier19thsept@yopmail.com" 
--	  ,"EmailVerifyParam" : "EmailVerifyParam"
--	  ,"LinkToTheProfile" : "profiletest"
--	  ,"LeadStreamDeepLink" : "LeadStreamDeepLink"
--	}
--	'

	DECLARE @JSONRequest VARCHAR(MAX) ,@UserId NVARCHAR(500) ,@ResponseJSON VARCHAR(MAX)
	SET @JSONRequest =  REPLACE(@json,CHAR(160),'')  
	--select @JSONRequest
	 
	 
	DROP TABLE IF EXISTS #tmpJsonInputParameters
	
	---Convert JSON into tablular format  
   SELECT * INTO #tmpJsonInputParameters FROM  
   (  
	  SELECT   
		i.app, i.event_type, i.[user_id],  i.[email_address]  , i.[EmailVerifyParam]  ,i.[LinkToTheProfile] , i.[FirstName],i.[LeadStreamDeepLink]
	   FROM OPENJSON(@JSONRequest)   
	   WITH   
	   (  
		  app NVARCHAR(15) '$.app'  
		  ,event_type NVARCHAR(200) '$.event_type'  
		  ,user_id VARCHAR(100) '$.user_id' 
		  ,email_address NVARCHAR(200) '$.email_address'
		  ,EmailVerifyParam NVARCHAR(MAX)  '$.EmailVerifyParam'  --- VerificationEmail
		  ,LinkToTheProfile NVARCHAR(MAX)  '$.LinkToTheProfile'  --- ApprovedEmail
		  ,FirstName NVARCHAR(200)  '$.FirstName'                --- ApprovedEmail
		  ,LeadStreamDeepLink  NVARCHAR(200)  '$.LeadStreamDeepLink'                --- BuyerPressedCallOnProfileEmail
	   ) AS i
	 ) tmpJsonInputParameters  

	 /* Common code for instant sync email */
	 BEGIN
	 --update temp table
			UPDATE c 
			set c.[user_id] = b.contact_id
			,c.FirstName =  b.first_name + ' ' + b.last_name
			FROM aspnetusers (NOLOCK) a
			JOIN mp_contacts (NOLOCK) b ON b.user_id = a.id
			JOIN #tmpJsonInputParameters c on  c.email_address = a.email 
	 END

	 --select * from #tmpJsonInputParameters
	
	 

	set nocount on
	declare @processStatus as varchar(max) = 'SUCCESS'
	declare @rfq_contact_id as bigint = 0
	declare @rfq_name as nvarchar(500) = ''
	declare @rfq_guid as nvarchar(500) = ''
	declare @email_msg_subject as nvarchar(250) = ''
	declare @email_msg_body as nvarchar(max) = ''
	declare @msg_subject as nvarchar(250) = ''
	declare @msg_body as nvarchar(max) = ''
	declare @todays_date as datetime = getdate() 
	declare @from_username as nvarchar(100) = ''
	declare @from_user_contactimage as nvarchar(500) = ''
	declare @from_user_email varchar(200) = ''
	declare @to_userid as int = 0
	declare @to_username as nvarchar(100) = ''
	declare @to_user_contactimage as nvarchar(500) = ''
	declare @to_user_email varchar(200) = ''
	declare @identity bigint = 0
	declare @identity_msg bigint = 0
	declare @company_id as bigint
	declare @company as nvarchar(200) = ''
	declare @supplier_company as nvarchar(200) = ''
	declare @total_parts int = 0
	declare @max_quantity bigint = 0
	declare @is_buyer bit = 0
	declare @quote_end_date date 
	declare @to_contacts1 varchar(max) = ''
	declare @notification_email_running_id  table (id int identity(1,1) ,  email_message_id int null)
	declare @notification_message_running_id  table (id int identity(1,1) ,  message_id int null)
	declare @is_2ndLevel_NDA int = 0 
	declare @to_contacts_for_non_awarded_supplier  varchar(max) = ''
	declare @quote_needed_by varchar(50) = '' 
	declare @part_name varchar(max) = ''
	DECLARE @ToSupplier VARCHAR(150) 
	DECLARE @ToSupplierEmail VARCHAR(150) 
	----M2-4773
	DECLARE @IsRfqWithMissingInfo BIT
	DECLARE @MId1 INT = 0 
	DECLARE @ToBuyer VARCHAR(250) = 0
	DECLARE @ToBuyerEmail VARCHAR(250) = ''
		
	/* M-4876 */
	DECLARE @poMfgUniqueId      INT
	DECLARE @poTransactionId    VARCHAR(255)
	/**/
	/* M2-4831 */
	DECLARE @PONumber			VARCHAR(100) 
	DECLARE @quoted_quantity_id VARCHAR(MAX) = @message  
	DECLARE @RfqEncryptedId     VARCHAR(100) 
	DECLARE @RetractedReason    VARCHAR(MAX) = @message
	DECLARE @CancelledReason    VARCHAR(MAX) = @message  
	DECLARE @ReshapeUniqueId    UNIQUEIDENTIFIER
        /**/
	declare @message_type_id bigint = (select  message_type_id from mp_mst_message_types where message_type_name = replace(@message_type,'9999',''))
	declare @messagestatus varchar(500) = (select message_status_token from mp_mst_message_status where message_type_id = @message_type_id and message_status_id = @message_status_id)
	
	/* M-4948 */
	DECLARE @InvNumber VARCHAR (100)= NULL,@InvAmount VARCHAR (100)=NULL, @InvDueDate VARCHAR(50) =NULL,@messageJson VARCHAR(MAX) ,@ViewInvoice VARCHAR(MAX),@StripeLink VARCHAR(MAX)
	
	IF @message_type = 'BUYER_EMAIL_NOTIFICATION_RECEIVED_ON_NEW_INVOICE'
	BEGIN
		 SET @messageJson =  REPLACE(@message,CHAR(160),'')

		SELECT @InvNumber= ISNULL(i.InvoiceNumber,''), @InvAmount= ISNULL(i.[Amount],00.00)
		      ,@InvDueDate = ISNULL(CONVERT(VARCHAR(100), CAST(i.[DueDate] AS DATE), 107)	,'') , @ViewInvoice= ISNULL(ViewInvoice,'')
			  ,@StripeLink = ISNULL(StripeLink,'')
		FROM OPENJSON(@messageJson) WITH (
  			InvoiceNumber VARCHAR(50) '$.InvoiceNumber',
  			Amount VARCHAR (100) '$.Amount',
  			DueDate DATE '$.DueDate' ,   
            ViewInvoice VARCHAR(MAX) '$.ViewInvoice',
			StripeLink VARCHAR(MAX) '$.StripeLink'
		) AS i
	END

	drop table if exists #list_of_admin_contacts_as_per_companies_for_email
	drop table if exists #companies_for_rfq
	drop table if exists #list_of_to_contacts_for_messages_notification
	drop table if exists #tmp_notification
	drop table if exists #tmp_part_awarded
	drop table if exists #list_of_to_contacts_for_messages_notification1
	drop table if exists #list_of_to_contacts_for_messages_notification_freemsg
	drop table if exists #MessageFileTable 
	drop table if exists #SpecialFileIdTable
	drop table if exists #RfqPreferredLocations
	drop table if exists #RfqPartCapabilities
	drop table if exists #SupplierManufacturingLocation
	drop table if exists #SupplierWithMatchingCapabilitiesAndManufacturingLocation
	
	create table #tmp_notification (id int null , email_message_id varchar(50), message_id  varchar(50))
	create table #list_of_admin_contacts_as_per_companies_for_email (company_id int null, contact_id  int null, email_id varchar(50) null , username varchar(50) null, is_notify_by_email  BIT NULL) /* M2-4789 - added is_notify_by_email*/
	create table #companies_for_rfq (company_id int , type varchar(150) )
	begin try
	/* fetching contact , company info using rfq or using from or to contact id*/

		if @message_link is null or @message_link = ''
			set @message_link = ''


	    SELECT @rfq_guid = ISNULL(rfq_guid,'') FROM mp_rfq WHERE rfq_id = @rfq_id

		--SELECT  @rfq_guid = CASE WHEN b.rfqid IS NOT NULL THEN  convert(varchar(50),b.RfqEncryptedId ) ELSE convert(varchar(50), a.rfq_guid) END  
		--FROM mp_rfq (NOLOCK) a 
		--LEFT JOIN mpordermanagement(nolock) b on a.rfq_id = b.rfqid
		--WHERE rfq_id =  @rfq_id


		if @message_type in ( 'RFQ_RELEASED_BY_ENGINEERING' , 'RFQ_EDITED_RESUBMIT_QUOTE','BUYER_SELECTS_RESUBMIT_QUOTE')
		begin
			
			-- getting rfq name , rfq contact id , username & contact image 
			select 
				@rfq_name = rfq_name 
				, @rfq_contact_id = a.contact_id  
				, @from_username = b.first_name + ' ' + b.last_name
				, @from_user_contactimage = c.file_name
				, @quote_end_date = cast(Quotes_needed_by as date)
				, @company_id = b.company_id
				---- M2-4773
				, @IsRfqWithMissingInfo =  IsRfqWithMissingInfo  
			from mp_rfq a (nolock) 
			left join mp_contacts b  (nolock) on a.contact_id = b.contact_id
			left join mp_special_files c  (nolock) on b.contact_id = c.cont_id and filetype_id = 17
			where rfq_id =  @rfq_id 

			select @company = name from mp_companies  (nolock) where company_id = @company_id

			select rfq_pref_manufacturing_location_id into #RfqPreferredLocations 
			from mp_rfq_preferences (nolock) where rfq_id = @rfq_id

			select part_category_id into #RfqPartCapabilities 
			from mp_rfq_parts (nolock) where rfq_id = @rfq_id

			select @total_parts = count(rfq_id) from mp_rfq_parts  (nolock) where rfq_id = @rfq_id 
			set @max_quantity = isnull((select top 1  max(part_qty) part_qty  from mp_rfq_parts  (nolock) a join mp_rfq_part_quantity b  (nolock) on a.rfq_part_id = b.rfq_part_id where rfq_id = @rfq_id group by b.rfq_part_id
			order by part_qty desc ) , 0)

			
			-- individual or group of companies for rfq 
			if (select count(1) from mp_rfq_supplier  (nolock) where  rfq_id = @rfq_id  and company_id <> -1 ) > 0
			begin

				insert into #companies_for_rfq (company_id , type)
				select distinct company_id , 'individual' as type 
				from mp_rfq_supplier (nolock)
				where supplier_group_id is null and   rfq_id = @rfq_id 

			end	
			/*  M2-3249 M - Send M a Notification and Email when an RFQ is released from a followed buyer -DB */
			else 
			begin

				insert into #companies_for_rfq (company_id , type)
				select distinct c.company_id , 'followed_suppliers' as type 
				from mp_book_details (nolock) a
				join mp_books (nolock) b on a.book_id = b.book_id and bk_name = 'Buyer Hotlist'
				join mp_contacts (nolock) c on b.contact_id = c.contact_id
				where a.company_id = @company_id AND c.company_id <> -1

				select company_id into #SupplierManufacturingLocation 
				from mp_companies (nolock)
				where company_id in (select company_id from #companies_for_rfq)
				and Manufacturing_location_id in (select * from #RfqPreferredLocations)

			
				select company_id  into #SupplierWithMatchingCapabilitiesAndManufacturingLocation 
				/* Oct 27, 2021 , As discussed with Eddie - For M2-3249 , delaPlex team need to change logic to look for RFQ quoting capabilities, not profile capabilities */
				from mp_gateway_subscription_company_processes (nolock)
				--from mp_company_processes (nolock)
				/**/
				where company_id in (select * from #SupplierManufacturingLocation)
				and part_category_id in (select * from #RfqPartCapabilities)

			
				delete from #companies_for_rfq  
				where not exists (select * from #SupplierWithMatchingCapabilitiesAndManufacturingLocation b where company_id = b.company_id)

			end
			/**/
			 
			if  @message_type in ( 'RFQ_EDITED_RESUBMIT_QUOTE' ) and ((select count(1) from mp_rfq_supplier  (nolock) where  rfq_id = @rfq_id  and company_id = -1 ) > 0)
			begin

				insert into #companies_for_rfq (company_id , type)
				select distinct c.company_id , 'allregistered' as type 
				from mp_rfq (nolock) a
				join mp_rfq_quote_suplierstatuses (nolock) b on a.rfq_id=b.rfq_id
				join mp_contacts (nolock) c on b.contact_id =c.contact_id
				where a.rfq_id = @rfq_id 
				
			end
					
            delete from #companies_for_rfq 
            where company_id in 
            (
                select distinct a.company_id from mp_book_details  a  (nolock) 
                join mp_books b  (nolock) on a.book_id = b.book_id 
                where bk_type= 5 and b.contact_id  = @rfq_contact_id 
            )

			if exists (select * from #companies_for_rfq where company_id = -1) -- for all registered manufacturer
			begin
				
				insert into #list_of_admin_contacts_as_per_companies_for_email (company_id , contact_id , email_id  , username,is_notify_by_email)
				select distinct a.company_id, a.contact_id ,   b.email as email_id , a.first_name + ' ' + a.last_name as username
				,a.is_notify_by_email  /* M2-4789*/
				from mp_contacts a (nolock) 
				left join aspnetusers b (nolock)  on a.user_id = b.id
				where a.company_id in (select company_id from #companies_for_rfq where company_id <> -1 ) and is_admin = 1 and is_buyer = 0 and is_active = 1
				union
				select distinct a.company_id, a.contact_id ,   b.email as email_id , a.first_name + ' ' + a.last_name as username
				,a.is_notify_by_email  /* M2-4789*/
				from mp_contacts a (nolock) 
				left join aspnetusers b  (nolock) on a.user_id = b.id
				where a.company_id in (select company_id from mp_registered_supplier where is_registered = 1 ) and is_admin = 1 and is_buyer = 0 and is_active = 1

			end
			else
			begin
				
				insert into #list_of_admin_contacts_as_per_companies_for_email (company_id , contact_id , email_id  , username, is_notify_by_email)
				select a.company_id, a.contact_id ,   b.email as email_id , a.first_name + ' ' + a.last_name as username
				,a.is_notify_by_email  /* M2-4789*/
				from mp_contacts a (nolock) 
				left join aspnetusers b  (nolock) on a.user_id = b.id
				where a.company_id in (select company_id from #companies_for_rfq) and is_admin = 1 and is_buyer = 0 and is_active = 1
			end


		end
		else if @message_type in ( 'RFQ_MARKED_INCOMPLETE')
		begin

			-- getting rfq name , rfq contact id , username & contact image 
			select 
				@rfq_name = rfq_name 
				, @to_userid = a.contact_id  
				, @to_username = b.first_name + ' ' + b.last_name
				, @to_user_contactimage = c.file_name
				, @to_user_email =  d.email
			from mp_rfq a (nolock) 
			left join mp_contacts b  (nolock) on a.contact_id = b.contact_id
			left join mp_special_files c  (nolock) on b.contact_id = c.cont_id and filetype_id = 17
			left join aspnetusers d  (nolock) on b.user_id = d.id
			where rfq_id =  @rfq_id 

			-- getting to contacts information
			select 
				 @from_username = a.first_name + ' ' + a.last_name
				, @from_user_contactimage = c.file_name
				, @from_user_email =  b.email			
			from mp_contacts a (nolock) 
			left join aspnetusers b  (nolock) on a.user_id = b.id
			left join mp_special_files c  (nolock) on b.contact_id = c.cont_id and filetype_id = 17
			where a.contact_id = @from_contact

			
		end
		else if @message_type in ( 'rfqFreeMessage')
		begin
			-- getting rfq name , rfq contact id , username & contact image 
			select 
				@company_id = b.company_id
				, @rfq_contact_id = b.contact_id  
				, @from_username = b.first_name + ' ' + b.last_name
				, @from_user_contactimage = c.file_name
				, @from_user_email = d.email
				, @company_id = b.company_id
				--, @is_buyer = b.is_buyer
			from mp_contacts b  (nolock) 
			left join mp_special_files c  (nolock) on b.contact_id = c.cont_id and filetype_id = 17
			left join aspnetusers d  (nolock) on b.user_id = d.id
			where b.contact_id =  @from_contact

			-- getting company name
			select @company = name from mp_companies  (nolock) where company_id = @company_id
				
			-- getting to contacts information
			select a.company_id, a.contact_id ,   b.email as  email_id, a.first_name + ' ' + a.last_name as username, row_number() over(order by a.contact_id) as rn
			,a.is_notify_by_email  /* M2-4789*/
			into #list_of_to_contacts_for_messages_notification_freemsg
			from mp_contacts a (nolock) 
			left join aspnetusers b  (nolock) on a.user_id = b.id
			where a.contact_id in (select value from string_split(@to_contacts, ','))
			
			select @supplier_company = name from mp_companies 	 (nolock) where company_id = @company_id

			-- is buye or supplier
			set @is_buyer = (select is_buyer from mp_contacts   (nolock) where contact_id = @from_contact)
			
		end
		else
		begin

			if @from_contact is null or @from_contact = ''
			begin
				
				set @from_contact = (select contact_id 	from mp_rfq (nolock)  where rfq_id =  @rfq_id )

			end

			if @message_type in ('rfqNonConfirmationMessage','QUOTE_RETRACTED_BY_BUYER')
				set @from_contact = (select contact_id 	from mp_rfq (nolock)  where rfq_id =  @rfq_id )


			if  @message_type in ( 'RFQ_LIKED_BY_SUPPLIER','RFQ_DISLIKED_BY_SUPPLIER','rfqResponse','MESSAGE_TYPE_CONFIDENTIALITY_AGREEMENT','RFQ_MARKED_FOR_QUOTING', 'SUPPLIER_SUBMIT_QUOTE')
			begin
				set @to_contacts = (select contact_id from mp_rfq  (nolock) where rfq_id = @rfq_id )
				set @is_2ndLevel_NDA = (select pref_NDA_Type from mp_rfq  (nolock) where rfq_id = @rfq_id)
			end
			else if  @message_type in ('rfqConfirmationMessage','AWARDED_OFFLINE_MANUFACTURER','RFQ_NOT_AWARDED')
			begin
				
				select @rfq_name = rfq_name  from mp_rfq a	where rfq_id =  @rfq_id 

			end
			else if @message_type in ('BUYER_FOLLOW_SUPPLIER')
			begin
				
				select @to_contacts1 = coalesce(@to_contacts1+',' ,'') + convert(varchar(20),contact_id)
				from mp_contacts a  (nolock) where company_id =  @to_contacts and is_buyer = 0
				
				set @to_contacts = substring(@to_contacts1,2,len(@to_contacts1))
				
			end
			else if  @message_type = ('RFQ_AWARDED_TO_OTH_SUPPLIER')
			begin 
				
				select @rfq_name = rfq_name , @quote_needed_by = convert(varchar(10),Quotes_needed_by,120) from mp_rfq a	where rfq_id =  @rfq_id 
				
					select  @to_contacts =  coalesce(@to_contacts+',' ,'') + convert(varchar(20),a.contact_id)  from 
					(
						select distinct b.contact_id
						from mp_rfq a (nolock) 
						join mp_rfq_quote_SupplierQuote b  (nolock) on a.rfq_id = b.rfq_id  and  is_rfq_resubmitted = 0
						join mp_rfq_quote_items c (nolock)  on b.rfq_quote_SupplierQuote_id = c.rfq_quote_SupplierQuote_id
						where a.rfq_id = @rfq_id 
						and is_quote_submitted = 1
						and 
						 b.contact_id not in 
						 (
							select distinct b.contact_id from mp_rfq a (nolock) 
							join mp_rfq_quote_SupplierQuote b  (nolock) on a.rfq_id = b.rfq_id  and  is_rfq_resubmitted = 0
							join mp_rfq_quote_items c (nolock)  on b.rfq_quote_SupplierQuote_id = c.rfq_quote_SupplierQuote_id
							where a.rfq_id = @rfq_id and (is_awrded =1) 
					 
						 )
						 ) a
				
			end
			
			-- getting rfq name , rfq contact id , username & contact image 
			select 
				@rfq_contact_id = b.contact_id  
				, @from_username = b.first_name + ' ' + b.last_name
				, @from_user_contactimage = c.file_name
				, @from_user_email = d.email
				, @company_id = b.company_id
			from mp_contacts b  (nolock) 
			left join mp_special_files c  (nolock) on b.contact_id = c.cont_id and filetype_id = 17
			left join aspnetusers d  (nolock) on b.user_id = d.id
			where b.contact_id =  @from_contact

			-- getting to contacts information
			
			select distinct a.company_id, a.contact_id ,   b.email as  email_id, a.first_name + ' ' + a.last_name as username
			/* M2-4789*/
			,a.is_notify_by_email
			/* M2-4789*/
			into #list_of_to_contacts_for_messages_notification
			from mp_contacts a (nolock) 
			left join aspnetusers b  (nolock) on a.user_id = b.id
			where a.contact_id in (select value from string_split(@to_contacts, ','))

			
			-- getting company name
			select @company = name from mp_companies  (nolock) where company_id = @company_id
			select @supplier_company = name from mp_companies 	 (nolock) where company_id in  (select distinct company_id from #list_of_to_contacts_for_messages_notification)


			-- is buye or supplier
			set @is_buyer = (select is_buyer from mp_contacts  where contact_id = @from_contact)
		end 
	/**/
	
	
	/* getting email/message subject & body */
	if  @message_type in ( 'RFQ_RELEASED_BY_ENGINEERING')  -- for all registered manufacturer
	begin
		if exists (select * from #companies_for_rfq where company_id <> -1 and   type = 'individual'  ) 
		begin

			set @message_type = 'RFQ_BUYER_INVITATION'
						
			select 
				@email_msg_body = email_body_template, @email_msg_subject = email_subject_template
				,  @msg_body = message_body_template, @msg_subject = message_subject_template
			from mp_mst_email_template  (nolock) where message_type_id = 207 and is_active = 1 
			and isnull(message_status_id,0) = (case when @message_status_id is null  then isnull(message_status_id,0) else @message_status_id end)
		end
		/*  M2-3249 M - Send M a Notification and Email when an RFQ is released from a followed buyer -DB */
		else
		begin

			set @message_type = 'RFQ_RELEASE_NOTIFICATION_FROM_FOLLOWED_BUYER'
						
			select 
				@email_msg_body = email_body_template, @email_msg_subject = email_subject_template
				,  @msg_body = message_body_template, @msg_subject = message_subject_template
			from mp_mst_email_template  (nolock) where message_type_id = 240 and is_active = 1 
						
		end
		/**/
		select	* into #list_of_to_contacts_for_messages_notification1 from #list_of_admin_contacts_as_per_companies_for_email
		
	end
	else 
	begin
		
		 select 
				@email_msg_body = email_body_template
				, @email_msg_subject = email_subject_template
				, @msg_body = message_body_template
				, @msg_subject = message_subject_template
		from mp_mst_email_template  (nolock) where message_type_id = @message_type_id and is_active = 1 
		and isnull(message_status_id,0) = (case when @message_status_id is null  then isnull(message_status_id,0) else @message_status_id end) 
					
							
	end


	/**/

	/* inserting & fetching notification subject & message based on passed message type */
				
		if @message_type = 'RFQ_RELEASED_BY_ENGINEERING'   -- 146
		begin
				set @processStatus = 'SUCCESS'
				select 
					@processStatus processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
					, '' as email_message_date, '' as from_contact_id, '' as from_username
					, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
					, '' as to_email_id, 0 as message_sent
					, '' as message_subject , '' as message_body
					, '' email_message_id , '' message_id
					, ''  message_type

				
		end
		else if @message_type = 'BUYER_APPROVES_2ND_LEVEL_NDA'   
		begin
		
		
				insert into mp_messages
				( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
				output inserted.message_id into @notification_message_running_id
				select 
						@rfq_id rfq_id
						, @message_type_id  message_type_id 
						, replace(@msg_subject,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+'') as   message_subject 
						, replace(@msg_body,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+'')   as message_descr
						, @todays_date as message_date
						, @from_contact from_contact_id 
						, contact_id as to_contact_id 
						, 0 as message_sent
						, 0 as message_read
						, 0 as trash
						, 0 as from_trash
						, 0 as real_from_cont_id
						, 0 as is_last_message
						, 0 as message_status_id_recipient
						, 0 as message_status_id_author
				from #list_of_to_contacts_for_messages_notification
				set @identity_msg = @@identity

				insert into mp_email_messages
				( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date
				,from_cont ,to_cont, to_email, message_sent,message_read )
				output inserted.email_message_id into @notification_email_running_id
				select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					,  replace(@email_msg_subject,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+'') message_subject 
					,  replace(replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)),'#Message_Link#',@message_link), '#RFQNo#',@rfq_guid)  as message_descr
					, @todays_date as email_message_date
					, @from_contact from_contact_id 
					, contact_id as to_contact_id 
					, email_id as to_email_id
					, 0 as message_sent
					, 0 as message_read
				from #list_of_to_contacts_for_messages_notification
				WHERE is_notify_by_email = 1  /* M2-4789*/
				
				set @identity = @@identity
				
				if @identity> 0 
				begin
					set @processStatus = 'SUCCESS'

					insert into #tmp_notification (id, message_id)
					select * from @notification_message_running_id

					update a set a.email_message_id = b.email_message_id
					from #tmp_notification a
					join @notification_email_running_id b on a.id = b.id
						

					select a.processStatus	,b.email_message_id ,b.message_id	,rfq_id	,message_type_id, message_subject	,message_body	,email_message_subject
							,email_msg_body		,email_message_date	,rfq_contact_id	,from_username ,from_user_contactimage	,to_contact_id	,to_username
							,to_email_id		,message_sent 		,message_type
					from 
					(
						select
							row_number() over (order by @from_contact )  id
							, @processStatus processStatus 
							, @identity email_message_id 
							, @identity_msg message_id
							, @rfq_id rfq_id
							, @message_type_id message_type_id
							, replace(@msg_subject,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+'') as   message_subject 
							, replace(@msg_body,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+'')   as message_body
							, replace(@email_msg_subject,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+'') email_message_subject 
							, replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)),'#Message_Link#',@message_link)  as email_msg_body
							, @todays_date email_message_date
							, @from_contact rfq_contact_id
							, @from_username as from_username
							, @from_user_contactimage from_user_contactimage
							, contact_id as to_contact_id
							, username as to_username
							, email_id as to_email_id
							, 0 as message_sent
							, @message_type message_type
						from #list_of_to_contacts_for_messages_notification
					)
						a
					join #tmp_notification b on a.id = b.id
		
				end
				else
				begin
					set @processStatus = 'FAILUER'

					select 
						'FAILUER: No data for email notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' as email_message_date, '' as from_contact_id, '' as from_username
						, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
						, '' as to_email_id, 0 as message_sent
						, '' as message_subject , '' as message_body
						, '' email_message_id , '' message_id
						, ''  message_type
				end

			
		end
		else if @message_type = 'BUYER_DECLINED_2ND_LEVEL_NDA'   
		begin

		
				insert into mp_messages
				( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
				output inserted.message_id into @notification_message_running_id
				select 
						@rfq_id rfq_id
						, @message_type_id  message_type_id 
						, replace(@msg_subject,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+'') as   message_subject 
						, replace(@msg_body,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+'')   as message_descr
						, @todays_date as message_date
						, @from_contact from_contact_id 
						, contact_id as to_contact_id 
						, 0 as message_sent
						, 0 as message_read
						, 0 as trash
						, 0 as from_trash
						, 0 as real_from_cont_id
						, 0 as is_last_message
						, 0 as message_status_id_recipient
						, 0 as message_status_id_author
				from #list_of_to_contacts_for_messages_notification
				set @identity_msg = @@identity

				insert into mp_email_messages
				( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date
				,from_cont ,to_cont, to_email, message_sent,message_read )
				output inserted.email_message_id into @notification_email_running_id
				select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					,  replace(@email_msg_subject,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+'') message_subject 
					,  replace(replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)),'#Message_Link#',@message_link), '#RFQNo#', @rfq_guid)  as message_descr
					, @todays_date as email_message_date
					, @from_contact from_contact_id 
					, contact_id as to_contact_id 
					, email_id as to_email_id
					, 0 as message_sent
					, 0 as message_read
				from #list_of_to_contacts_for_messages_notification
				WHERE is_notify_by_email = 1  /* M2-4789*/
				

				set @identity = @@identity
				
				if @identity> 0 
				begin
					set @processStatus = 'SUCCESS'

					insert into #tmp_notification (id, message_id)
					select * from @notification_message_running_id

					update a set a.email_message_id = b.email_message_id
					from #tmp_notification a
					join @notification_email_running_id b on a.id = b.id
						

					select a.processStatus	,b.email_message_id ,b.message_id	,rfq_id	,message_type_id, message_subject	,message_body	,email_message_subject
							,email_msg_body		,email_message_date	,rfq_contact_id	,from_username ,from_user_contactimage	,to_contact_id	,to_username
							,to_email_id		,message_sent 		,message_type
					from 
					(
						select
							row_number() over (order by @from_contact )  id
							, @processStatus processStatus 
							, @identity email_message_id , @identity_msg message_id
							, @rfq_id rfq_id
							, @message_type_id message_type_id
							, replace(@msg_subject,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+'') as   message_subject 
							, replace(@msg_body,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+'')   as message_body
							, replace(@email_msg_subject,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+'') email_message_subject 
							, replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)),'#Message_Link#',@message_link)  as email_msg_body
							, @todays_date email_message_date
							, @from_contact rfq_contact_id
							, @from_username as from_username
							, @from_user_contactimage from_user_contactimage
							, contact_id as to_contact_id
							, username as to_username
							, email_id as to_email_id
							, 0 as message_sent
							, @message_type message_type
						from #list_of_to_contacts_for_messages_notification
					)
						a
					join #tmp_notification b on a.id = b.id
		
				end
				else
				begin
					set @processStatus = 'FAILUER'

					select 
						'FAILUER: No data for email notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' as email_message_date, '' as from_contact_id, '' as from_username
						, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
						, '' as to_email_id, 0 as message_sent
						, '' as message_subject , '' as message_body
						, '' email_message_id , '' message_id
						, ''  message_type
				end

			
		end
		else if @message_type = 'RFQ_MARKED_INCOMPLETE'   
		begin

				insert into mp_messages
				( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
				output inserted.message_id into @notification_message_running_id
				select 
						@rfq_id rfq_id
						, @message_type_id  message_type_id 
						, replace(replace(@msg_subject,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+''),'##Name##', @rfq_name) as   message_subject 
						, replace(replace(replace(@msg_body,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+''),'##Name##', @rfq_name),'##message##' , @message)   as message_descr
						, @todays_date as message_date
						, @from_contact from_contact_id 
						, @to_userid as to_contact_id 
						, 0 as message_sent
						, 0 as message_read
						, 0 as trash
						, 0 as from_trash
						, 0 as real_from_cont_id
						, 0 as is_last_message
						, 0 as message_status_id_recipient
						, 0 as message_status_id_author
				
				set @identity_msg = @@identity

				IF EXISTS( SELECT contact_id FROM mp_contacts(NOLOCK) WHERE contact_id = @to_userid AND is_notify_by_email = 1 )   /* M2-4789*/
		        BEGIN
				insert into mp_email_messages
				( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date
				,from_cont ,to_cont, to_email, message_sent,message_read )
				output inserted.email_message_id into @notification_email_running_id
				select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					, replace(replace(@email_msg_subject,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+''),'##Name##', @rfq_name) as   message_subject 
					, replace(replace(replace(replace(replace(replace(@email_msg_body,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+''),'##Name##', @rfq_name),'##message##' , @message) ,'##Engineer_name##',@from_username),'#Buyer_Name#',@to_username), '#RFQNO#', @rfq_guid)  as message_descr
					, @todays_date as email_message_date
					, @from_contact from_contact_id 
					, @to_userid as to_contact_id 
					, @to_user_email as to_email_id
					, 0 as message_sent
					, 0 as message_read
				
					set @identity = @@identity
				END
				
				if @identity> 0 OR @identity_msg > 0
				begin
					set @processStatus = 'SUCCESS'

					insert into #tmp_notification (id, message_id)
					select * from @notification_message_running_id

					update a set a.email_message_id = b.email_message_id
					from #tmp_notification a
					join @notification_email_running_id b on a.id = b.id
						

					select a.processStatus	,b.email_message_id ,b.message_id	,rfq_id	,message_type_id, message_subject	,message_body	,email_message_subject
							,email_msg_body		,email_message_date	,rfq_contact_id	,from_username ,from_user_contactimage	,to_contact_id	,to_username
							,to_email_id		,message_sent 		,message_type
					from 
					(
						select
							row_number() over (order by @from_contact )  id
							, @processStatus processStatus 
							, @identity email_message_id , @identity_msg message_id
							, @rfq_id rfq_id
							, @message_type_id message_type_id
							, replace(replace(@msg_subject,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+''),'##Name##', @rfq_name)   message_subject 
							, replace(replace(replace(@msg_body,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+''),'##Name##', @rfq_name),'##message##' , @message)  as message_body
							, replace(replace(@email_msg_subject,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+''),'##Name##', @rfq_name)  email_message_subject 
							, replace(replace(replace(replace(replace(@email_msg_body,'##RFQNO##', ''+convert(varchar(50),@rfq_id)+''),'##Name##', @rfq_name),'##message##' , @message) ,'##Engineer_name##',@from_username),'#Buyer_Name#',@to_username)   as email_msg_body
							, @todays_date email_message_date
							, @from_contact rfq_contact_id
							, @from_username as from_username
							, @from_user_contactimage from_user_contactimage
							, @to_userid as to_contact_id
							, @to_username as to_username
							, @to_user_email as to_email_id
							, 0 as message_sent
							, @message_type message_type
						
					)
						a
					join #tmp_notification b on a.id = b.id
		

				end
				else
				begin
					set @processStatus = 'FAILUER'

					select 
						'FAILUER: No data for email notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' as email_message_date, '' as from_contact_id, '' as from_username
						, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
						, '' as to_email_id, 0 as message_sent
						, '' as message_subject , '' as message_body
						, '' email_message_id , '' message_id
						, ''  message_type
				end

			
		end
		else if  @message_type = 'RFQ_EDITED_RESUBMIT_QUOTE'   -- 153
		begin

				-- getting suppliers for RFQ
				if exists (select * from #companies_for_rfq)
				begin
				
					insert into mp_messages
					( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
					output inserted.message_id into @notification_message_running_id
					select 
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, replace(@msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id))   message_subject 
							, replace(replace(@msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)) as message_descr
							, @todays_date as message_date
							, @rfq_contact_id from_contact_id 
							, l.contact_id as to_contact_id 
							, 0 as message_sent
							, 0 as message_read
							, 0 as trash
							, 0 as from_trash
							, 0 as real_from_cont_id
							, 0 as is_last_message
							, 0 as message_status_id_recipient
							, 0 as message_status_id_author
					----changed on date 06/03/2019
					from #list_of_admin_contacts_as_per_companies_for_email L 
					INNER JOIN mp_rfq_quote_suplierstatuses Q ON(L.contact_id = Q.contact_id AND Q.rfq_id = @rfq_id)
					set @identity_msg = @@identity
				
					
					insert into mp_email_messages 
					( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
					, message_sent,message_read )
					output inserted.email_message_id into @notification_email_running_id
					select 
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, replace(@email_msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id))   email_msg_subject 
							,  replace(replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)),'#Message_Link#', @message_link), '#RFQNO#', @rfq_guid)
							, @todays_date as email_message_date
							, @rfq_contact_id from_contact_id 
							, l.contact_id as to_contact_id 
							, email_id as to_email_id
							, 0 as message_sent
							, 0 as message_read
					--changed on date 06/03/2019
                                        from #list_of_admin_contacts_as_per_companies_for_email L 
					INNER JOIN mp_rfq_quote_suplierstatuses Q ON(L.contact_id = Q.contact_id AND Q.rfq_id = @rfq_id)
					WHERE L.is_notify_by_email = 1  /* M2-4789*/
					
					set @identity = @@identity
				
					if @identity> 0 or @identity_msg > 0
					begin
						set @processStatus = 'SUCCESS'
						
						insert into #tmp_notification (id, message_id)
						select * from @notification_message_running_id

						update a set a.email_message_id = b.email_message_id
						from #tmp_notification a
						join @notification_email_running_id b on a.id = b.id
						

						select a.processStatus	,b.email_message_id ,b.message_id	,rfq_id	,message_type_id, message_subject	,message_body	,email_message_subject
								,email_msg_body		,email_message_date	,rfq_contact_id	,from_username ,from_user_contactimage	,to_contact_id	,to_username
								,to_email_id		,message_sent 		,message_type
						from 
						(
							select
								row_number() over (order by b.contact_id )  id
								, @processStatus processStatus 
								, @identity email_message_id , @identity_msg message_id
								, @rfq_id rfq_id
								, @message_type_id message_type_id
								, replace(@msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id)) as message_subject
								, replace(replace(@msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)) as message_body
								, replace(@email_msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id))  email_message_subject
								, replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)),'#Message_Link#', @message_link) email_msg_body
								, @todays_date email_message_date
								, @rfq_contact_id rfq_contact_id
								, @from_username as from_username
								, @from_user_contactimage from_user_contactimage
								, b.contact_id as to_contact_id
								, b.username as to_username
								, b.email_id as to_email_id
								, 0 as message_sent
								, @message_type message_type
							from #list_of_admin_contacts_as_per_companies_for_email b INNER JOIN mp_rfq_quote_suplierstatuses Q ON(b.contact_id = Q.contact_id AND Q.rfq_id = @rfq_id)
						)
						 a
						join #tmp_notification b on a.id = b.id

												
				end
				else
				begin
					set @processStatus = 'FAILUER'

					select 
						'FAILUER: No data for email notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' as email_message_date, '' as from_contact_id, '' as from_username
						, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
						, '' as to_email_id, 0 as message_sent
						, '' as message_subject , '' as message_body
						, '' email_message_id , '' message_id
						, ''  message_type
					
				end
			end
			else
			begin
				set @processStatus = 'FAILUER'

				select 
					'FAILUER: No data for message notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
					, '' as email_message_date, '' as from_contact_id, '' as from_username
					, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
					, '' as to_email_id, 0 as message_sent
					, '' as message_subject , '' as message_body
					, '' email_message_id , '' message_id
					, ''  message_type
			end


		end
		else if  @message_type = 'MESSAGE_TYPE_CONFIDENTIALITY_AGREEMENT'  and   @messagestatus = 'ACCEPTED'  -- 42 
		begin
			
			if @is_2ndLevel_NDA = 2
			begin
				insert into mp_messages
				( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
				select 
						@rfq_id rfq_id
						, @message_type_id  message_type_id 
						, replace(replace(@msg_subject, '#SuppCompanyName#', @company) , '##RFQNO##' ,convert(varchar(15),@rfq_id))   message_subject 
						, replace(replace(@msg_body, '#SuppCompanyName#', @company) , '##RFQNO##' ,convert(varchar(15),@rfq_id)) as message_descr
						, @todays_date as message_date
						, @rfq_contact_id from_contact_id 
						, contact_id as to_contact_id 
						, 0 as message_sent
						, 0 as message_read
						, 0 as trash
						, 0 as from_trash
						, 0 as real_from_cont_id
						, 0 as is_last_message
						, 0 as message_status_id_recipient
						, 0 as message_status_id_author
				from #list_of_to_contacts_for_messages_notification
				set @identity = @@identity
				
				if @identity> 0 
				begin
					set @processStatus = 'SUCCESS'
				
					select  
						@processStatus processStatus 
						, '' email_message_id , message_id message_id
						, rfq_id
						, message_type_id
						, message_subject as message_subject
						, message_descr as message_body
						, '' email_message_subject
						, '' email_msg_body
						, message_date as email_message_date
						, @rfq_contact_id rfq_contact_id
						, @from_username as from_username
						, @from_user_contactimage from_user_contactimage
						, b.contact_id as to_contact_id
						, b.username as to_username
						, b.email_id as to_email_id
						, 0 as message_sent
						, @message_type message_type
					from mp_messages a
					left join #list_of_to_contacts_for_messages_notification b on a.to_cont = b.contact_id
					where rfq_id = @rfq_id and message_type_id = @message_type_id and message_date = @todays_date

				end
				else
				begin
					set @processStatus = 'FAILUER'

					select 
						'FAILUER: No data for message notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' as email_message_date, '' as from_contact_id, '' as from_username
						, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
						, '' as to_email_id, 0 as message_sent
						, '' as message_subject , '' as message_body
						, '' email_message_id , '' message_id
						, ''  message_type
					
				end
		 end
		 else
		 begin

			set @processStatus = 'FAILUER'

					select 
						'FAILUER: No 2nd level NDA'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' as email_message_date, '' as from_contact_id, '' as from_username
						, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
						, '' as to_email_id, 0 as message_sent
						, '' as message_subject , '' as message_body
						, '' email_message_id , '' message_id
						, ''  message_type

		 end
			
		end
		else if  @message_type = 'BUYER_FOLLOW_SUPPLIER' -- 155
		begin
			
			insert into mp_messages
			( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
			select 
					null rfq_id
					, @message_type_id  message_type_id 
					, replace(replace(@msg_subject, '#Company_Name#', @company), '#Buyer_Name#' , @from_username)   message_subject 
					, replace(replace(@msg_body, '#Company_Name#', @company), '#Buyer_Name#' , @from_username)  as message_descr
					, @todays_date as message_date
					, @rfq_contact_id from_contact_id 
					, contact_id as to_contact_id 
					, 0 as message_sent
					, 0 as message_read
					, 0 as trash
					, 0 as from_trash
					, 0 as real_from_cont_id
					, 0 as is_last_message
					, 0 as message_status_id_recipient
					, 0 as message_status_id_author
			from #list_of_to_contacts_for_messages_notification
			set @identity = @@identity
				
			if @identity> 0 
			begin
				set @processStatus = 'SUCCESS'
				
				select  
					@processStatus processStatus 
					, '' email_message_id , message_id message_id
					, rfq_id
					, message_type_id
					, message_subject as message_subject
					, message_descr as message_body
					, '' email_message_subject
					, '' email_msg_body
					, message_date as email_message_date
					, @rfq_contact_id rfq_contact_id
					, @from_username as from_username
					, @from_user_contactimage from_user_contactimage
					, b.contact_id as to_contact_id
					, b.username as to_username
					, b.email_id as to_email_id
					, 0 as message_sent
					, @message_type message_type
				from mp_messages a
				left join #list_of_to_contacts_for_messages_notification b on a.to_cont = b.contact_id
				where from_cont = @rfq_contact_id  and message_type_id = @message_type_id and message_date = @todays_date

			end
			else
			begin
				set @processStatus = 'FAILUER'

				select 
					'FAILUER: No data for message notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
					, '' as email_message_date, '' as from_contact_id, '' as from_username
					, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
					, '' as to_email_id, 0 as message_sent
					, '' as message_subject , '' as message_body
					, '' email_message_id , '' message_id
					, ''  message_type
					
			end
				
		end
		else if  @message_type = 'RFQ_MARKED_FOR_QUOTING' -- 155
		begin
			
			insert into mp_messages
			( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
			select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					, replace(replace(@msg_subject, '#Manufacturer_company_name#', @company), '##RFQNO##' , ''+convert(varchar(50),@rfq_id)+'')   message_subject 
					, replace(replace(@msg_body, '#Manufacturer_company_name#', @company), '##RFQNO##' , ''+convert(varchar(50),@rfq_id)+'')   as message_descr
					, @todays_date as message_date
					, @from_contact from_contact_id 
					, contact_id as to_contact_id 
					, 0 as message_sent
					, 0 as message_read
					, 0 as trash
					, 0 as from_trash
					, 0 as real_from_cont_id
					, 0 as is_last_message
					, 0 as message_status_id_recipient
					, 0 as message_status_id_author
			from #list_of_to_contacts_for_messages_notification
			set @identity = @@identity
				
			if @identity> 0 
			begin
				set @processStatus = 'SUCCESS'
				
				select  
					@processStatus processStatus 
					, '' email_message_id , message_id message_id
					, rfq_id
					, message_type_id
					, message_subject as message_subject
					, message_descr as message_body
					, '' email_message_subject
					, '' email_msg_body
					, message_date as email_message_date
					,  @from_contact as  rfq_contact_id
					,  @from_username as from_username
					, '' from_user_contactimage
					, b.contact_id as to_contact_id
					, b.username as to_username
					, b.email_id as to_email_id
					, 0 as message_sent
					, @message_type message_type
				from mp_messages a
				left join #list_of_to_contacts_for_messages_notification b on a.to_cont = b.contact_id
				where rfq_id = @rfq_id and  from_cont = @from_contact  and message_type_id = @message_type_id and message_date = @todays_date

			end
			else
			begin
				set @processStatus = 'FAILUER'

				select 
					'FAILUER: No data for message notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
					, '' as email_message_date, '' as from_contact_id, '' as from_username
					, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
					, '' as to_email_id, 0 as message_sent
					, '' as message_subject , '' as message_body
					, '' email_message_id , '' message_id
					, ''  message_type
					
			end
				
		end
		else if  @message_type = 'BUYER_VIEW_SUPPLIER_PROFILE' -- 150
		begin
			
			if exists (select * from mp_ViewedProfile where contactid = @from_contact and convert(date,profile_viewed_date) =  convert(date,@todays_date) )
				update mp_ViewedProfile set profile_viewed_date = @todays_date where contactid = @from_contact and convert(date,profile_viewed_date) =  convert(date,@todays_date) 
			else 
				insert into mp_ViewedProfile (ContactId,profile_viewed_date,contact_id_profile) select @from_contact , @todays_date , @to_contacts


			insert into mp_messages
			( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
			select 
					null rfq_id
					, @message_type_id  message_type_id 
					, replace(replace(@msg_subject, '#Company_Name#', @company), '#Buyer_Name#' , @from_username)   message_subject 
					, replace(replace(@msg_body, '#Company_Name#', @company), '#Buyer_Name#' , @from_username)  as message_descr
					, @todays_date as message_date
					, @rfq_contact_id from_contact_id 
					, contact_id as to_contact_id 
					, 0 as message_sent
					, 0 as message_read
					, 0 as trash
					, 0 as from_trash
					, 0 as real_from_cont_id
					, 0 as is_last_message
					, 0 as message_status_id_recipient
					, 0 as message_status_id_author
			from #list_of_to_contacts_for_messages_notification
			set @identity = @@identity
				
			if @identity> 0 
			begin
				set @processStatus = 'SUCCESS'
				
				select  
					@processStatus processStatus 
					, '' email_message_id , message_id message_id
					, rfq_id
					, message_type_id
					, message_subject as message_subject
					, message_descr as message_body
					, '' email_message_subject
					, '' email_msg_body
					, message_date as email_message_date
					, @rfq_contact_id rfq_contact_id
					, @from_username as from_username
					, @from_user_contactimage from_user_contactimage
					, b.contact_id as to_contact_id
					, b.username as to_username
					, b.email_id as to_email_id
					, 0 as message_sent
					, @message_type message_type
				from mp_messages a
				left join #list_of_to_contacts_for_messages_notification b on a.to_cont = b.contact_id
				where message_id = @identity and message_type_id = @message_type_id and message_date = @todays_date

			end
			else
			begin
				set @processStatus = 'FAILUER'

				select 
					'FAILUER: No data for message notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
					, '' as email_message_date, '' as from_contact_id, '' as from_username
					, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
					, '' as to_email_id, 0 as message_sent
					, '' as message_subject , '' as message_body
					, '' email_message_id , '' message_id
					, ''  message_type
					
			end
				
		end
		else if  @message_type = 'SUPPLIER_VIEW_BUYER_PROFILE' -- 151
		begin
			
			if exists (select * from mp_ViewedProfile where contactid = @from_contact and convert(date,profile_viewed_date) =  convert(date,@todays_date) )
				update mp_ViewedProfile set profile_viewed_date = @todays_date where contactid = @from_contact and convert(date,profile_viewed_date) =  convert(date,@todays_date) 
			else 
				insert into mp_ViewedProfile (ContactId,profile_viewed_date,contact_id_profile) select @from_contact , @todays_date , @to_contacts


			insert into mp_messages
			( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
			select 
					null rfq_id
					, @message_type_id  message_type_id 
					, replace(@msg_subject, '#Manufacturer_company_name#', @company)   message_subject 
					, replace(@msg_body, '#Manufacturer_company_name#', @company)  as message_descr
					, @todays_date as message_date
					, @rfq_contact_id from_contact_id 
					, contact_id as to_contact_id 
					, 0 as message_sent
					, 0 as message_read
					, 0 as trash
					, 0 as from_trash
					, 0 as real_from_cont_id
					, 0 as is_last_message
					, 0 as message_status_id_recipient
					, 0 as message_status_id_author
			from #list_of_to_contacts_for_messages_notification
			set @identity = @@identity
				
			if @identity> 0 
			begin
				set @processStatus = 'SUCCESS'
				
				select  
					@processStatus processStatus 
					, '' email_message_id , message_id message_id
					, rfq_id
					, message_type_id
					, message_subject as message_subject
					, message_descr as message_body
					, '' email_message_subject
					, '' email_msg_body
					, message_date as email_message_date
					, @rfq_contact_id rfq_contact_id
					, @from_username as from_username
					, @from_user_contactimage from_user_contactimage
					, b.contact_id as to_contact_id
					, b.username as to_username
					, b.email_id as to_email_id
					, 0 as message_sent
					, @message_type message_type
				from mp_messages a
				left join #list_of_to_contacts_for_messages_notification b on a.to_cont = b.contact_id
				where message_id = @identity and message_type_id = @message_type_id and message_date = @todays_date

			end
			else
			begin
				set @processStatus = 'FAILUER'

				select 
					'FAILUER: No data for message notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
					, '' as email_message_date, '' as from_contact_id, '' as from_username
					, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
					, '' as to_email_id, 0 as message_sent
					, '' as message_subject , '' as message_body
					, '' email_message_id , '' message_id
					, ''  message_type
					
			end
				
		end
		else if  @message_type = 'RFQ_LIKED_BY_SUPPLIER'  -- 148
		begin

			set @processStatus = 'SUCCESS'
				
			select 
				@processStatus  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
				, '' as email_message_date, '' as from_contact_id, '' as from_username
				, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
				, '' as to_email_id, 0 as message_sent
				, '' as message_subject , '' as message_body
				, '' email_message_id , '' message_id
				, ''  message_type
					
			
		end
		else if  @message_type = 'RFQ_DISLIKED_BY_SUPPLIER'   -- 149
		begin

			set @processStatus = 'SUCCESS'
				
			select 
				@processStatus  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
				, '' as email_message_date, '' as from_contact_id, '' as from_username
				, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
				, '' as to_email_id, 0 as message_sent
				, '' as message_subject , '' as message_body
				, '' email_message_id , '' message_id
				, ''  message_type

			
		end
		else if  @message_type = 'rfqResponse'  -- 1
		begin
		/* checking notification required or not for to contacts*/
			if 
			(
				(
					select count(1) from mp_scheduled_job (nolock)
					where contact_id in (select contact_id from #list_of_to_contacts_for_messages_notification)
					and is_deleted = 1 and scheduler_type_id = 1
				) = 0 
			)
			/**/
			begin
				insert into mp_messages
				( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
				select 
						@rfq_id rfq_id
						, @message_type_id  message_type_id 
						, replace(replace(@msg_subject, '#SuppCompanyName#', @company) , '##RFQNO##' ,convert(varchar(15),@rfq_id))   email_msg_subject 
						, replace(replace(replace(@msg_body, '#SuppCompanyName#', @company) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#BuyerContactName#' , username)
						, @todays_date as message_date
						, @rfq_contact_id from_contact_id 
						, contact_id as to_contact_id 
						, 0 as message_sent
						, 0 as message_read
						, 0 as trash
						, 0 as from_trash
						, 0 as real_from_cont_id
						, 0 as is_last_message
						, 0 as message_status_id_recipient
						, 0 as message_status_id_author
				from #list_of_to_contacts_for_messages_notification
				set @identity_msg = @@identity				
				
				insert into mp_email_messages
				( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
				, message_sent,message_read )
				select 
						@rfq_id rfq_id
						, @message_type_id  message_type_id 
						, replace(replace(@email_msg_subject, '#SuppCompanyName#', @company) , '##RFQNO##' ,convert(varchar(15),@rfq_id))   email_msg_subject 
						, replace(replace(replace(replace(replace(@email_msg_body, '#Manufacturer_company_name#', @company) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , username),'#Message_Link#', @message_link), '#RFQNO#', @rfq_guid)
						, @todays_date as email_message_date
						, @rfq_contact_id from_contact_id 
						, contact_id as to_contact_id 
						, email_id as to_email_id
						, 0 as message_sent
						, 0 as message_read
				from #list_of_to_contacts_for_messages_notification
				WHERE is_notify_by_email = 1  /* M2-4789*/
			 
				set @identity = @@identity
				
				if @identity> 0 or @identity_msg > 0
				begin
					set @processStatus = 'SUCCESS'

					select  
						@processStatus processStatus 
						, @identity email_message_id , @identity_msg message_id
						, @rfq_id rfq_id
						, @message_type_id message_type_id
						, replace(replace(@msg_subject, '#SuppCompanyName#', @company) , '##RFQNO##' ,convert(varchar(15),@rfq_id)) as message_subject
						, replace(replace(replace(@msg_body, '#SuppCompanyName#', @company) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#BuyerContactName#' , username) as message_body
						, replace(replace(@email_msg_subject, '#SuppCompanyName#', @company) , '##RFQNO##' ,convert(varchar(15),@rfq_id))  email_message_subject
						, replace(replace(replace(replace(@email_msg_body, '#Manufacturer_company_name#', @company) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , username),'#Message_Link#', @message_link) email_msg_body
						, @todays_date email_message_date
						, @rfq_contact_id rfq_contact_id
						, @from_username as from_username
						, @from_user_contactimage from_user_contactimage
						, b.contact_id as to_contact_id
						, b.username as to_username
						, b.email_id as to_email_id
						, 0 as message_sent
						, @message_type message_type
					from #list_of_to_contacts_for_messages_notification b 							

				end
				else
				begin
					set @processStatus = 'FAILUER'

					select 
						'FAILUER: No data for message notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' as email_message_date, '' as from_contact_id, '' as from_username
						, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
						, '' as to_email_id, 0 as message_sent
						, '' as message_subject , '' as message_body
						, '' email_message_id , '' message_id
						, ''  message_type
					
				end
			end
			else
			begin
					set @processStatus = 'FAILUER'

					select 
						'FAILUER: No data for message notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' as email_message_date, '' as from_contact_id, '' as from_username
						, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
						, '' as to_email_id, 0 as message_sent
						, '' as message_subject , '' as message_body
						, '' email_message_id , '' message_id
						, ''  message_type
			end
		end
		else if  @message_type = 'RFQ_AWARDED_TO_OTH_SUPPLIER'  -- 1
		begin

		
		
			insert into mp_messages
			( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
			output inserted.message_id into @notification_message_running_id
			select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					, replace(@msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id))   email_msg_subject 
					, replace(@msg_body, '##RFQNO##' ,convert(varchar(15),@rfq_id))
					, @todays_date as message_date
					, @rfq_contact_id from_contact_id 
					, contact_id as to_contact_id 
					, 0 as message_sent
					, 0 as message_read
					, 0 as trash
					, 0 as from_trash
					, 0 as real_from_cont_id
					, 0 as is_last_message
					, 0 as message_status_id_recipient
					, 0 as message_status_id_author
			from #list_of_to_contacts_for_messages_notification
			set @identity_msg = @@identity				
				
			insert into mp_email_messages
			( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
			, message_sent,message_read )
			output inserted.email_message_id into @notification_email_running_id
			select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					, replace(@email_msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id))
					, replace(replace(replace(replace(replace(@email_msg_body, '##QuoteDate##', convert(varchar(10),c.quote_date,120)) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Manufacturer_Contact_name#', username),'#Message_Link#',''),'#RFQNO#', @rfq_guid)
					, @todays_date as email_message_date
					, @rfq_contact_id from_contact_id 
					, #list_of_to_contacts_for_messages_notification.contact_id as to_contact_id 
					, email_id as to_email_id
					, 0 as message_sent
					, 0 as message_read
			from #list_of_to_contacts_for_messages_notification
			join mp_rfq_quote_SupplierQuote c on c.rfq_id = @rfq_id and c.contact_id =  #list_of_to_contacts_for_messages_notification.contact_id  
			WHERE is_notify_by_email = 1  /* M2-4789*/

			set @identity = @@identity
				
			if @identity> 0 or @identity_msg > 0
			begin
				set @processStatus = 'SUCCESS'
						
				insert into #tmp_notification (id, message_id)
				select * from @notification_message_running_id

				update a set a.email_message_id = b.email_message_id
				from #tmp_notification a
				join @notification_email_running_id b on a.id = b.id

				select 
					a.processStatus	,b.email_message_id ,b.message_id	,a.rfq_id	,message_type_id, message_subject	,message_body	,email_message_subject
					,replace(email_msg_body,'##QuoteDate##',convert(varchar(10),c.quote_date,120))	as email_msg_body	,email_message_date	,rfq_contact_id	,from_username ,from_user_contactimage	,to_contact_id	,to_username
					,to_email_id		,message_sent 		,message_type
				from 
				(
					select
						row_number() over (order by @from_contact )  id
						, @processStatus processStatus 
						, @identity email_message_id , @identity_msg message_id
						, @rfq_id rfq_id
						, @message_type_id message_type_id
						, replace(@msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id))  as   message_subject 
						, replace(@msg_body, '##RFQNO##' ,convert(varchar(15),@rfq_id))   as message_body
						, replace(@email_msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id)) email_message_subject 
						, replace(replace(replace(@email_msg_body, '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Manufacturer_Contact_name#', username),'#Message_Link#','')  as email_msg_body
						, @todays_date email_message_date
						, @from_contact rfq_contact_id
						, @from_username as from_username
						, @from_user_contactimage from_user_contactimage
						, contact_id as to_contact_id
						, username as to_username
						, email_id as to_email_id
						, 0 as message_sent
						, @message_type message_type
					from #list_of_to_contacts_for_messages_notification
				)
					a
				join #tmp_notification b on a.id = b.id
				join mp_rfq_quote_SupplierQuote c on c.rfq_id = @rfq_id and c.contact_id =  a.to_contact_id  

			end
			else
			begin
				set @processStatus = 'FAILUER'

				select 
					'FAILUER: No data for message notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
					, '' as email_message_date, '' as from_contact_id, '' as from_username
					, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
					, '' as to_email_id, 0 as message_sent
					, '' as message_subject , '' as message_body
					, '' email_message_id , '' message_id
					, ''  message_type
					
			end
			
		end
	
		else if  @message_type = 'rfqConfirmationMessage'  -- 7
		begin
			/*
				--- M2-4888 
				If RFQ details exists into mpOrderManagement then supplier get new email template (248) else getting old template i.e (7)
			*/
			IF EXISTS ( SELECT RfqId FROM mpOrderManagement (NOLOCK) WHERE RfqId =  @rfq_id AND IsDeleted = 0 ) 
			BEGIN
				 
				SET @message_type = 'MANUFACTURER_EMAIL_NOTIFICATION_ON_NEW_AWARDED_PO'
						
				SELECT @message_type_id = message_type_id,
				@email_msg_body = email_body_template, @email_msg_subject = email_subject_template
				,  @msg_body = message_body_template, @msg_subject = message_subject_template
				FROM mp_mst_email_template  (NOLOCK) WHERE message_type_id = 248 and is_active = 1 


					INSERT INTO mp_messages
					( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
					OUTPUT inserted.message_id INTO @notification_message_running_id
					 SELECT 
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, 'RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + ' - You''ve been awarded some parts and a purchase has been sent!' AS  message_subject 
						    , 'Congratulations! ' + @company + ' has awarded RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + ' to your company. Please login to your account and accept their purchase order. Once you accept their purchase order, you will need to configure part tracking statuses to update the buyer during the manufacturing process.'  AS message_descr
							, @todays_date AS message_date
							, @from_contact AS from_contact_id   ---- buyer contact id 
							, @to_contacts  AS to_contact_id     ---- supplier contact id
							, 0 AS message_sent
							, 0 AS message_read
							, 0 AS trash
							, 0 AS from_trash
							, 0 AS real_from_cont_id
							, 0 AS is_last_message
							, 0 AS message_status_id_recipient
							, 0 AS message_status_id_author

					SET @identity_msg = @@identity
									 
					INSERT INTO mp_email_messages 
					( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
					, message_sent,message_read )
					OUTPUT inserted.email_message_id INTO @notification_email_running_id
					SELECT 
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, REPLACE(REPLACE(@email_msg_subject, '##RFQNO##' ,CONVERT(VARCHAR(100),CONVERT(VARCHAR(50),@rfq_id))), '#Company_Name#',@company)  AS email_msg_subject 
							, REPLACE(REPLACE(REPLACE(@email_msg_body , '##RFQNO##' ,CONVERT(VARCHAR(100),@rfq_id)) ,'#Manufacturer_Contact_name#',a.first_name +' '+ a.last_name), '#Company_Name#', @company) AS email_message_descr
							, @todays_date  AS email_message_date
							, @from_contact AS from_contact_id    ---- buyer contact id 
							, @to_contacts  AS to_contact_id   ---- supplier contact id
							, c.email as to_email_id
							, 0 AS message_sent
							, 0 AS message_read
					FROM mp_contacts (NOLOCK) a 
					JOIN mp_companies(NOLOCK) b ON a.company_id = b.company_id 
					JOIN aspnetusers (NOLOCK) c ON c.id = a.[user_id]
					WHERE  a.contact_id = @to_contacts
					AND a.is_notify_by_email = 1  /* M2-4789*/
					 
					SET @identity = @@identity
					 					
					IF @identity> 0 or @identity_msg > 0
					BEGIN
						SET @processStatus = 'SUCCESS'
						
						INSERT INTO #tmp_notification (id, message_id)
						SELECT * FROM @notification_message_running_id
						 
						INSERT INTO #tmp_notification (id, email_message_id)
						SELECT * FROM @notification_email_running_id

						SELECT a.processStatus	,b.email_message_id ,b.message_id	,rfq_id	,message_type_id, NULL message_subject	, NULL message_body	,email_message_subject
						, CASE WHEN b.email_message_id is null THEN a.message_subject  ELSE a.email_msg_body END AS  email_msg_body		,email_message_date	,rfq_contact_id	,from_username ,from_user_contactimage	,to_contact_id	,to_username
						,to_email_id		,message_sent 		,message_type
						FROM 
						(
							SELECT
								ROW_NUMBER() OVER (ORDER BY b.contact_id )  id
								, @processStatus processStatus 
								, @identity email_message_id 
								, @identity_msg message_id
								, @rfq_id rfq_id
								, @message_type_id message_type_id
								, 'RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + ' - You''ve been awarded some parts and a purchase has been sent!' AS  message_subject 
						        , 'Congratulations! ' + @company + ' has awarded RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + ' to your company. Please login to your account and accept their purchase order. Once you accept their purchase order, you will need to configure part tracking statuses to update the buyer during the manufacturing process.'  AS message_body
								, REPLACE(REPLACE(@email_msg_subject, '##RFQNO##' ,CONVERT(VARCHAR(100),@rfq_id)), '#Company_Name#', @company) AS  email_message_subject 
								, REPLACE(REPLACE(REPLACE(@email_msg_body, '#Manufacturer_Contact_name#', b.first_name + ' ' + b.last_name) , '##RFQNO##' ,CONVERT(VARCHAR(100),@rfq_id)) , '#Company_Name#',@company)  AS email_msg_body
								, @todays_date email_message_date
								, @from_contact rfq_contact_id
								, @from_username AS from_username
								, @from_user_contactimage from_user_contactimage
								, @to_contacts AS to_contact_id   --- Supplier contact id
								, b.first_name +' '+ b.last_name AS to_username
								, c.Email AS to_email_id
								, 0 AS message_sent
								, @message_type message_type
							FROM mp_contacts (NOLOCK) b 
							JOIN AspNetUsers(NOLOCK) c ON c.id = b.user_id
							WHERE  b.contact_id = @to_contacts
						)
						 a
						join #tmp_notification b on a.id = b.id

												
				END --1
				ELSE
				BEGIN
					SET @processStatus = 'FAILUER'

					SELECT 
						'FAILUER: No data for email notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' AS email_message_date, '' AS from_contact_id, '' AS from_username
						, '' AS from_user_contactimage, '' AS to_contact_id, '' AS to_username
						, '' AS to_email_id, 0 AS message_sent
						, '' AS message_subject , '' AS message_body
						, '' AS email_message_id , '' AS message_id
						, '' AS message_type
				END
			END

			ELSE

			BEGIN
				---- Below is existing code functionality if PO is not exists
				select distinct 
					a.rfq_id , b.contact_id ,
					e.part_name + ' ' +  convert(varchar(50) ,c.awarded_qty) + ' ' + f.value   parts_awarded
				into #tmp_part_awarded
				from mp_rfq a (nolock)
				join mp_rfq_quote_SupplierQuote b (nolock) on a.rfq_id = b.rfq_id  and  is_rfq_resubmitted = 0
				join mp_rfq_quote_items c(nolock) on b.rfq_quote_SupplierQuote_id = c.rfq_quote_SupplierQuote_id
				join mp_rfq_parts  d (nolock) on c.rfq_part_id = d.rfq_part_id 
				join mp_parts  e (nolock) on d.part_id = e.part_id 
				join mp_system_parameters f (nolock) on e.part_qty_unit_id = f.id
				where is_awrded =1 and a.rfq_id = @rfq_id and b.contact_id = @to_contacts

				insert into mp_messages
				( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
				output inserted.message_id into @notification_message_running_id
				select 
						@rfq_id rfq_id
						, case 
							when  message_type_name = 'rfqConfirmationMessage' then @message_type_id
							when  message_type_name = 'BUYER_NPS_RATING' then b.message_type_id						
							when  message_type_name = 'SUPPLIER_NPS_RATING' then b.message_type_id						
						  end  as  message_type_id 
						, case 
							when  message_type_name = 'rfqConfirmationMessage' then replace(message_subject_template,  '##RFQNO##', convert(varchar(50),@rfq_id) )  
							when  message_type_name = 'BUYER_NPS_RATING' then replace(message_subject_template,  '##RFQNO##', convert(varchar(50),@rfq_id) )  					
							when  message_type_name = 'SUPPLIER_NPS_RATING' then replace(message_subject_template,  '##RFQNO##', convert(varchar(50),@rfq_id) )  						
						  end  as   message_subject 
					
						, case 
							when  message_type_name = 'rfqConfirmationMessage' then
								replace(replace(replace(replace(replace(message_body_template, '# ##Name##' ,' ' + @rfq_name ), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company),'##Parts##',c.parts), '##RFQNO##', convert(varchar(50),@rfq_id) ) 
							when  message_type_name = 'SUPPLIER_NPS_RATING' then
								replace(replace(message_body_template, '#Buyer_Name#', @from_username) , '#Manufacturer_company_name#' ,@supplier_company) 
							when  message_type_name = 'BUYER_NPS_RATING' then
							replace(replace(message_body_template, '#Manufacturer_Contact_name#', username)  , '#Company_Name#',@company)
						  end  as message_descr
						, @todays_date as message_date
						, case 
							when  message_type_name = 'rfqConfirmationMessage' then  @rfq_contact_id
							when  message_type_name = 'SUPPLIER_NPS_RATING' then 		a.contact_id				
							when  message_type_name = 'BUYER_NPS_RATING' then @rfq_contact_id   					
							end as from_contact_id 
						, case 
							when  message_type_name = 'rfqConfirmationMessage' then  a.contact_id
							when  message_type_name = 'SUPPLIER_NPS_RATING' then 	 		@rfq_contact_id			
							when  message_type_name = 'BUYER_NPS_RATING' then  		 a.contact_id	
							end as to_contact_id 
						, 0 as message_sent
						, 0 as message_read
						, 0 as trash
						, 0 as from_trash
						, 0 as real_from_cont_id
						, 0 as is_last_message
						, 0 as message_status_id_recipient
						, 0 as message_status_id_author
				from #list_of_to_contacts_for_messages_notification			a
				cross apply
				(
					select 
						a.message_type_id
						,a.message_type_name 
						,message_subject_template
						,message_body_template
						,email_body_template
						,email_subject_template 
					from 
					mp_mst_message_types  a
					join mp_mst_email_template b on a.message_type_id = b.message_type_id
					where a.message_type_name in 
					('rfqConfirmationMessage'
					--, 'SUPPLIER_NPS_RATING', 'BUYER_NPS_RATING'
					)
				) b 
				join  
				(
					select distinct  a.rfq_id , a.contact_id  , replace((select countries = stuff(( select ','+  parts_awarded	
					from  #tmp_part_awarded where contact_id = a.contact_id	for xml path('') ), 1, 1, '')) ,',' , ', ') as parts
					from #tmp_part_awarded a	
				) c on a.contact_id = c.contact_id
			
			

				set @identity_msg = @@identity

				insert into mp_email_messages
				( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date
				,from_cont ,to_cont, to_email, message_sent,message_read )
				output inserted.email_message_id into @notification_email_running_id
				select 
					@rfq_id rfq_id
					,  case 
							when  message_type_name = 'rfqConfirmationMessage' then @message_type_id
							when  message_type_name = 'BUYER_NPS_RATING' then b.message_type_id						
							when  message_type_name = 'SUPPLIER_NPS_RATING' then b.message_type_id						
						  end  message_type_id 
					, case 
							when  message_type_name = 'rfqConfirmationMessage' then replace(email_subject_template,  '##RFQNO##', convert(varchar(50),@rfq_id) )  
							when  message_type_name = 'BUYER_NPS_RATING' then replace(email_subject_template,  '##RFQNO##', convert(varchar(50),@rfq_id) )  					
							when  message_type_name = 'SUPPLIER_NPS_RATING' then replace(email_subject_template,  '##RFQNO##', convert(varchar(50),@rfq_id) )  						
					  end  as email_msg_subject
					, case 
							when  message_type_name = 'rfqConfirmationMessage' then

								replace(replace(replace(replace(replace(replace(replace(replace(email_body_template, '#Manufacturer_Contact_name#', username) , '# ##Name##' ,' ' + '# '+ @rfq_name), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company),'#Message_Link#',@message_link), '##Parts##',c.parts), '#RFQ_No#', @rfq_guid ) , '##RFQNo##', convert(varchar(50),@rfq_id) )

							when  message_type_name = 'SUPPLIER_NPS_RATING' then
								replace(replace(replace(email_body_template, '#Buyer_Name#', @from_username) , '#Manufacturer_company_name#' ,@supplier_company) ,'#Message_Link#',@message_link)
							when  message_type_name = 'BUYER_NPS_RATING' then
							replace(replace(replace(email_body_template, '#Manufacturer_Contact_name#', username)  , '#Company_Name#',@company),'#Message_Link#',@message_link)
						  end   email_msg_body 
					, @todays_date as email_message_date
					, case 
							when  message_type_name = 'rfqConfirmationMessage' then  @rfq_contact_id
							when  message_type_name = 'SUPPLIER_NPS_RATING' then 		a.contact_id				
							when  message_type_name = 'BUYER_NPS_RATING' then @rfq_contact_id   					
							end as from_contact_id 
					,  case 
							when  message_type_name = 'rfqConfirmationMessage' then  a.contact_id
							when  message_type_name = 'SUPPLIER_NPS_RATING' then 	 		@rfq_contact_id			
							when  message_type_name = 'BUYER_NPS_RATING' then  		 a.contact_id	
							end as to_contact_id 
					, case when  message_type_name = 'SUPPLIER_NPS_RATING' then  @from_user_email else email_id end as to_email_id
					, 0 as message_sent
					, 0 as message_read
				from #list_of_to_contacts_for_messages_notification			a
				cross apply
				(
					select 
						a.message_type_id
						,a.message_type_name 
						,message_subject_template
						,message_body_template
						,email_body_template
						,email_subject_template 
					from 
					mp_mst_message_types  a
					join mp_mst_email_template b on a.message_type_id = b.message_type_id
					where a.message_type_name in 
					('rfqConfirmationMessage'
					--, 'SUPPLIER_NPS_RATING', 'BUYER_NPS_RATING'
					)
				) b
				join  
				(
					select distinct  a.rfq_id , a.contact_id  , replace((select countries = stuff(( select ','+  parts_awarded	
					from  #tmp_part_awarded where contact_id = a.contact_id	for xml path('') ), 1, 1, '')) ,',' , ', ') as parts
					from #tmp_part_awarded a	
				) c on a.contact_id = c.contact_id
				WHERE a.is_notify_by_email = 1  /* M2-4789*/  
			 
				set @identity = @@identity
				
				if @identity> 0 
				begin
					set @processStatus = 'SUCCESS'

					insert into #tmp_notification (id, message_id)
					select * from @notification_message_running_id

					update a set a.email_message_id = b.email_message_id
					from #tmp_notification a
					join @notification_email_running_id b on a.id = b.id
						

					select a.processStatus	,b.email_message_id ,b.message_id	,rfq_id	,message_type_id, message_subject	,message_body	,email_message_subject
							,email_msg_body		,email_message_date	,rfq_contact_id	,from_username ,from_user_contactimage	,to_contact_id	,to_username
							,to_email_id		,message_sent 		,message_type
					from 
					(
						select
							row_number() over (order by b.contact_id )  id
							, @processStatus processStatus 
							, @identity email_message_id , @identity_msg message_id
							, @rfq_id rfq_id
							, case 
								when  message_type_name = 'rfqConfirmationMessage' then @message_type_id
								when  message_type_name = 'BUYER_NPS_RATING' then b1.message_type_id						
								when  message_type_name = 'SUPPLIER_NPS_RATING' then b1.message_type_id						
							  end message_type_id
							, case 
								when  message_type_name = 'rfqConfirmationMessage' then replace(message_subject_template,  '##RFQNO##', convert(varchar(50),@rfq_id) )  
								when  message_type_name = 'BUYER_NPS_RATING' then replace(message_subject_template,  '##RFQNO##', convert(varchar(50),@rfq_id) )  					
								when  message_type_name = 'SUPPLIER_NPS_RATING' then replace(message_subject_template,  '##RFQNO##', convert(varchar(50),@rfq_id) )  						
							  end  as   message_subject
							, case 
								when  message_type_name = 'rfqConfirmationMessage' then
									replace(replace(replace(replace(replace(message_body_template, '# ##Name##' ,' ' + @rfq_name), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company),'##Parts##',c.parts), '##RFQNO##', convert(varchar(50),@rfq_id) ) 
								when  message_type_name = 'SUPPLIER_NPS_RATING' then
									replace(replace(message_body_template, '#Buyer_Name#', @from_username) , '#Manufacturer_company_name#' ,@supplier_company) 
								when  message_type_name = 'BUYER_NPS_RATING' then
								replace(replace(message_body_template, '#Manufacturer_Contact_name#', username)  , '#Company_Name#',@company)
							  end as message_body
							,  case 
								when  message_type_name = 'rfqConfirmationMessage' then replace(email_subject_template,  '##RFQNO##', convert(varchar(50),@rfq_id) )  
								when  message_type_name = 'BUYER_NPS_RATING' then replace(email_subject_template,  '##RFQNO##', convert(varchar(50),@rfq_id) )  					
								when  message_type_name = 'SUPPLIER_NPS_RATING' then replace(email_subject_template,  '##RFQNO##', convert(varchar(50),@rfq_id) )  						
								end  as   email_message_subject
							, case 
								when  message_type_name = 'rfqConfirmationMessage' then
									replace(replace(replace(replace(replace(replace(replace(replace(email_body_template, '#Manufacturer_Contact_name#', username) ,'# ##Name##' ,' ' + @rfq_name), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company),'#Message_Link#',@message_link),'##Parts##',c.parts), '#RFQ_No#', @rfq_guid ) , '##RFQNo##', convert(varchar(50),@rfq_id))
								when  message_type_name = 'SUPPLIER_NPS_RATING' then
									replace(replace(replace(email_body_template, '#Buyer_Name#', @from_username) , '#Manufacturer_company_name#' ,@supplier_company) ,'#Message_Link#',@message_link)
								when  message_type_name = 'BUYER_NPS_RATING' then
								 replace(replace(replace(email_body_template, '#Manufacturer_Contact_name#', username)  , '#Company_Name#',@company),'#Message_Link#',@message_link)
							  end email_msg_body
							, @todays_date email_message_date
							, case 
								when  message_type_name = 'rfqConfirmationMessage' then  @rfq_contact_id
								when  message_type_name = 'SUPPLIER_NPS_RATING' then 		b.contact_id				
								when  message_type_name = 'BUYER_NPS_RATING' then @rfq_contact_id   					
								end  rfq_contact_id
							, case 
								when  message_type_name = 'rfqConfirmationMessage' then  @from_username
								when  message_type_name = 'SUPPLIER_NPS_RATING' then 		b.username				
								when  message_type_name = 'BUYER_NPS_RATING' then @from_username   					
								end  as from_username
							,  case 
								when  message_type_name = 'rfqConfirmationMessage' then  @from_user_contactimage
								when  message_type_name = 'SUPPLIER_NPS_RATING' then 		''				
								when  message_type_name = 'BUYER_NPS_RATING' then @from_user_contactimage   					
								end   from_user_contactimage
							, case 
								when  message_type_name = 'rfqConfirmationMessage' then  b.contact_id
								when  message_type_name = 'SUPPLIER_NPS_RATING' then 		@rfq_contact_id				
								when  message_type_name = 'BUYER_NPS_RATING' then b.contact_id  					
								end  as to_contact_id
							, case 
								when  message_type_name = 'rfqConfirmationMessage' then  b.username
								when  message_type_name = 'SUPPLIER_NPS_RATING' then 		@from_username				
								when  message_type_name = 'BUYER_NPS_RATING' then b.username					
								end	 as to_username
							,  case 
								when  message_type_name = 'rfqConfirmationMessage' then  b.email_id
								when  message_type_name = 'SUPPLIER_NPS_RATING' then 		@from_user_email			
								when  message_type_name = 'BUYER_NPS_RATING' then b.email_id					
								end	   as to_email_id
							, 0 as message_sent
							, case 
								when  message_type_name = 'rfqConfirmationMessage' then @message_type
								when  message_type_name = 'BUYER_NPS_RATING' then 'BUYER_NPS_RATING'						
								when  message_type_name = 'SUPPLIER_NPS_RATING' then 'SUPPLIER_NPS_RATING'					
							  end message_type
						from #list_of_to_contacts_for_messages_notification			b
						cross apply
						(
							select 
								a.message_type_id
								,a.message_type_name 
								,message_subject_template
								,message_body_template
								,email_body_template
								,email_subject_template 
							from 
							mp_mst_message_types  a
							join mp_mst_email_template b on a.message_type_id = b.message_type_id
							where a.message_type_name in ('rfqConfirmationMessage', 'SUPPLIER_NPS_RATING', 'BUYER_NPS_RATING')
						) b1 
						join  
						(
							select distinct  a.rfq_id , a.contact_id  , replace((select countries = stuff(( select ','+  parts_awarded	
							from  #tmp_part_awarded where contact_id = a.contact_id	for xml path('') ), 1, 1, '')) ,',' , ', ') as parts
							from #tmp_part_awarded a	
						) c on b.contact_id = c.contact_id
					)
						a
					join #tmp_notification b on a.id = b.id
			
				end
			
			 
			END
			
		end
		else if  @message_type in ('rfqNonConfirmationMessage' ,'QUOTE_RETRACTED_BY_BUYER') -- 8 , 224
		begin
		
	 
			if @message_type = 'QUOTE_RETRACTED_BY_BUYER'
			begin
			
				select @part_name = COALESCE( @part_name + ' -', '') + d.part_name  + ' ' + convert(varchar(20),a.awarded_qty) + ' ' + e.value
				from  mp_rfq_quote_items (nolock) a
				join mp_rfq_quote_supplierquote  (nolock) b on a.rfq_quote_SupplierQuote_id = b.rfq_quote_SupplierQuote_id and b.rfq_id =  @rfq_id and b.contact_id = @to_contacts 
				join mp_rfq_parts (nolock) c on a.rfq_part_id = c.rfq_part_id
				join mp_parts (nolock) d on c.part_id = d.part_id
				join mp_system_parameters  (nolock) e on c.quantity_unit_id = e.id
				where
				a.awarded_date in 
				(
					select max(awarded_date) from mp_rfq_quote_items (nolock)
					where rfq_quote_SupplierQuote_id in
					(
						select max(rfq_quote_SupplierQuote_id) from mp_rfq_quote_supplierquote  (nolock)
						where rfq_id =  @rfq_id and contact_id = @to_contacts 
					)
					and is_awrded = 0
				)

				/* M-4876 */
				SELECT @poMfgUniqueId  = Id , @poTransactionId   = TransactionId , @ReshapeUniqueId = ReshapeUniqueId
				FROM mpOrderManagement (NOLOCK) WHERE RfqId =  @rfq_id AND IsDeleted = 0
				
				EXEC [proc_set_UpdatePOStatus] @poMfgUniqueId = @poMfgUniqueId , @poStatus = 'retracted'  , @poTransactionId =  @poTransactionId

				UPDATE mpOrderManagement SET Reason = @RetractedReason  WHERE RfqId =  @rfq_id

				UPDATE a
				SET
					a.ReshapePartStatus = NULL
				FROM  mp_rfq_quote_items (NOLOCK) a
				JOIN  mp_rfq_quote_supplierquote  (NOLOCK) b on a.rfq_quote_SupplierQuote_id = b.rfq_quote_SupplierQuote_id 
				WHERE b.rfq_id =  @rfq_id 


				--SELECT 
				--a.* 
				/* here update isdeleted flag to 1 if retract perform*/
				UPDATE a
				SET a.IsDeleted = 1
					FROM mpOrderManagementPartStatusChangeLogs(NOLOCK) a
					LEFT JOIN mpOrderManagement(NOLOCK) b on a.ReshapeUniqueId  = b.ReshapeUniqueId AND  a.IsDeleted = 0
					WHERE  a.SupplierContactId = @to_contacts 
					AND a.ReshapeUniqueId = @ReshapeUniqueId
					 


				/**/

			end


			insert into mp_messages
			( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
			select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					, replace(replace(@msg_subject, '#Manufacturer_Contact_name#', @company) , '##RFQNO##' ,convert(varchar(15),@rfq_id))   message_subject 
					, replace(replace(replace(replace(replace(replace(@msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company), '##Message##',@part_name) , '##RetractedReason##',ISNULL(@RetractedReason,'')) as message_descr
					, @todays_date as message_date
					, @rfq_contact_id from_contact_id 
					, contact_id as to_contact_id 
					, 0 as message_sent
					, 0 as message_read
					, 0 as trash
					, 0 as from_trash
					, 0 as real_from_cont_id
					, 0 as is_last_message
					, 0 as message_status_id_recipient
					, 0 as message_status_id_author
			from #list_of_to_contacts_for_messages_notification
			set @identity_msg = @@identity
				
			insert into mp_email_messages
			( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
			, message_sent,message_read )
			select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					, replace(replace(@email_msg_subject, '#Manufacturer_Contact_name#', @company) , '##RFQNO##' ,convert(varchar(15),@rfq_id))   email_msg_subject 
					, replace(replace(replace(replace(replace(replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company),'#Message_Link#',@message_link),'#RFQNO#', @rfq_guid), '##Message##',@part_name) , '##RetractedReason##',ISNULL(@RetractedReason,'')) 
					--, replace(replace(replace(replace(replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company),'#Message_Link#',@message_link),'#RFQNO#', @rfq_guid), '##Message##',@part_name) 
					, @todays_date as email_message_date
					, @rfq_contact_id from_contact_id 
					, contact_id as to_contact_id 
					, email_id as to_email_id
					, 0 as message_sent
					, 0 as message_read
			from #list_of_to_contacts_for_messages_notification
			WHERE is_notify_by_email = 1  /* M2-4789*/

			set @identity = @@identity
				
			if @identity> 0 or @identity_msg > 0
			begin
				set @processStatus = 'SUCCESS'
				
				select  
					@processStatus processStatus 
					, @identity email_message_id , @identity_msg message_id
					, @rfq_id rfq_id
					, @message_type_id message_type_id
					, replace(replace(@msg_subject, '#Manufacturer_Contact_name#', @company) , '##RFQNO##' ,convert(varchar(15),@rfq_id)) as message_subject
					, replace(replace(replace(replace(replace(@msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company), '##Message##',@part_name) as message_body
					, replace(replace(@email_msg_subject, '#Manufacturer_Contact_name#', @company) , '##RFQNO##' ,convert(varchar(15),@rfq_id)) email_message_subject
					, replace(replace(replace(replace(replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company),'#Message_Link#',@message_link), '##Message##',@part_name) , '##RetractedReason##',ISNULL(@RetractedReason,''))  email_msg_body
					, @todays_date email_message_date
					, @rfq_contact_id rfq_contact_id
					, @from_username as from_username
					, @from_user_contactimage from_user_contactimage
					, b.contact_id as to_contact_id
					, b.username as to_username
					, b.email_id as to_email_id
					, 0 as message_sent
					, @message_type message_type
				from #list_of_to_contacts_for_messages_notification b 

			end
			else
			begin
				set @processStatus = 'FAILUER'

				select 
					'FAILUER: No data for message notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
					, '' as email_message_date, '' as from_contact_id, '' as from_username
					, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
					, '' as to_email_id, 0 as message_sent
					, '' as message_subject , '' as message_body
					, '' email_message_id , '' message_id
					, ''  message_type
					
			end
			
		end
		else if  @message_type = 'RFQ_BUYER_INVITATION'  -- 152
		begin
					
			insert into mp_messages
			( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
			select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					, replace(@msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id))   message_subject 
					, replace(replace(replace(replace(@msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company) as message_descr
					, @todays_date as message_date
					, @rfq_contact_id from_contact_id 
					, contact_id as to_contact_id 
					, 0 as message_sent
					, 0 as message_read
					, 0 as trash
					, 0 as from_trash
					, 0 as real_from_cont_id
					, 0 as is_last_message
					, 0 as message_status_id_recipient
					, 0 as message_status_id_author
			from #list_of_to_contacts_for_messages_notification1
			set @identity_msg = @@identity
				
			insert into mp_email_messages
			( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
			, message_sent,message_read )
			select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					, replace(@email_msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id))   email_msg_subject 
					, replace(replace(replace(replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company),'#Message_Link#',@message_link), '#RFQNO#',@rfq_guid)
					, @todays_date as email_message_date
					, @rfq_contact_id from_contact_id 
					, contact_id as to_contact_id 
					, email_id as to_email_id
					, 0 as message_sent
					, 0 as message_read
			from #list_of_to_contacts_for_messages_notification1
			WHERE is_notify_by_email = 1  /* M2-4789*/

			set @identity = @@identity
				
			/* Data insered into mp_messages and mp_email_messages tables via below SP -> M2-4773 */
			EXEC  [proc_set_EmailRfqMissingInfo] @RfqId = @rfq_id, @todays_date = @todays_date , @message = @message 
			/**/
			
			if @identity> 0 or @identity_msg > 0
			begin
				set @processStatus = 'SUCCESS'

				select  
					@processStatus processStatus 
					, @identity email_message_id , @identity_msg message_id
					, @rfq_id rfq_id
					, @message_type_id message_type_id
					, replace(@msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id))  as message_subject
					, replace(replace(replace(replace(@msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company) as message_body
					, replace(@email_msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id)) email_message_subject
					, replace(replace(replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company),'#Message_Link#',@message_link) email_msg_body
					, @todays_date email_message_date
					, @rfq_contact_id rfq_contact_id
					, @from_username as from_username
					, @from_user_contactimage from_user_contactimage
					, b.contact_id as to_contact_id
					, b.username as to_username
					, b.email_id as to_email_id
					, 0 as message_sent
					, @message_type message_type
				from #list_of_to_contacts_for_messages_notification1 b 
				UNION
				SELECT 
					@processStatus processStatus 
					, NULL email_message_id 
					, message_id message_id
					, rfq_id rfq_id
					, @message_type_id message_type_id
					, NULL  as message_subject
					, NULL as message_body
					, message_subject  email_message_subject
					, message_descr  email_msg_body
					, message_date  email_message_date
					, from_cont rfq_contact_id
					, @from_username as from_username
					, @from_user_contactimage from_user_contactimage
					, to_cont as to_contact_id
					, NULL as to_username
					, c.email as to_email_id
					, 0 as message_sent
					--, @message_type_id message_type ---- need to check this field getting error
					, 'RFQ_RELEASE_WITH_MISSING_INFO' as message_type
				FROM mp_messages (NOLOCK) a
				JOIN mp_contacts (NOLOCK) b ON a.to_cont = b.contact_id
				JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
				WHERE rfq_id = @rfq_id 
				AND message_type_id IN (242)
				AND message_date =  @todays_date
					
			end
			else
			begin
				set @processStatus = 'FAILUER'

				if (select count(1) from mp_messages (NOLOCK) where rfq_id = @rfq_id and message_type_id IN (242) and message_date =  @todays_date ) > 0 
				begin
					set @processStatus = 'SUCCESS'

					SELECT 
					@processStatus processStatus 
					, NULL email_message_id 
					, message_id message_id
					, rfq_id rfq_id
					, @message_type_id message_type_id
					, NULL  as message_subject
					, NULL as message_body
					, message_subject  email_message_subject
					, message_descr  email_msg_body
					, message_date  email_message_date
					, from_cont rfq_contact_id
					, @from_username as from_username
					, @from_user_contactimage from_user_contactimage
					, to_cont as to_contact_id
					, NULL as to_username
					, c.email as to_email_id
					, 0 as message_sent
					, @message_type_id message_type
					FROM mp_messages (NOLOCK) a
					JOIN mp_contacts (NOLOCK) b ON a.to_cont = b.contact_id
					JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
					WHERE rfq_id = @rfq_id 
					AND message_type_id IN (242)
					AND message_date =  @todays_date
					
				end
				else 
					select 
						'FAILUER: No data for message notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' as email_message_date, '' as from_contact_id, '' as from_username
						, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
						, '' as to_email_id, 0 as message_sent
						, '' as message_subject , '' as message_body
						, '' email_message_id , '' message_id
						, ''  message_type
					
			end
			
		end
		else if @message_type = 'rfqFreeMessage'  --5
		begin
			
			DECLARE @messageId INT;
			if(@rfq_id=0)
			set @rfq_id=null 
			 
			insert into mp_messages
				( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
				output inserted.message_id into @notification_message_running_id
				select 
						@rfq_id as rfq_id
						, @message_type_id as message_type_id 
						,	(
								case 
									when @rfq_id is not null then 
										case 
											when CHARINDEX('RFQ #', @message_link) > 0 then '' 
											when CHARINDEX('RFQ#', @message_link) > 0 then '' 
											else 'RFQ # ' + convert(varchar(150),@rfq_id) + ' - ' 
										end +  @message_link 
									else  @message_link 
								end
							) as   message_subject 
						, @message as message_descr
						, @todays_date as message_date
						, @from_contact as from_contact_id 
						, contact_id as to_contact_id 
						, 0 as message_sent
						, 0 as message_read
						, 0 as trash
						, 0 as from_trash
						, 0 as real_from_cont_id
						, 0 as is_last_message
						, 0 as message_status_id_recipient
						, 0 as message_status_id_author
				from #list_of_to_contacts_for_messages_notification_freemsg
				set @identity_msg = @@identity
				select @messageId = message_id from @notification_message_running_id
				 

				
			insert into mp_email_messages
			( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
			, message_sent,message_read )
			output inserted.email_message_id into @notification_email_running_id
			select 
					  @rfq_id as rfq_id
					, @message_type_id as message_type_id 
					, case when @is_buyer = 1 then 'Message from Buyer' else 'Message from Manufacturer' end  
					 + 	(case when @rfq_id is not null then ' for RFQ # ' + convert(varchar(150),@rfq_id)  else  '' end)
					as   message_subject  --@message_link
					, replace(replace(@email_msg_body, '#contactname#', a.username),'#msgid#',b.message_id)
					, @todays_date as email_message_date
					, @rfq_contact_id from_contact_id 
					, a.contact_id as to_contact_id 
					, email_id as to_email_id
					, 0 as message_sent
					, 0 as message_read
			from #list_of_to_contacts_for_messages_notification_freemsg a
			join @notification_message_running_id b on b.id = a.rn
			WHERE a.is_notify_by_email = 1  /* M2-4789*/

			set @identity = @@identity

			
			if @identity> 0 or @identity_msg > 0
			begin
				set @processStatus = 'SUCCESS'

				insert into #tmp_notification (id, message_id)
				select * from @notification_message_running_id

				update a set a.email_message_id = b.email_message_id
				from #tmp_notification a
				join @notification_email_running_id b on a.id = b.id
				
				select processStatus	,email_message_id ,message_id	,rfq_id	,message_type_id, message_subject	,message_body	,email_message_subject
							,email_msg_body		,email_message_date	,rfq_contact_id	,from_username ,from_user_contactimage	,to_contact_id	,to_username
							,to_email_id		,message_sent 		,message_type
					from 
					(
						select
							 @processStatus processStatus 
							, email_message_id as  email_message_id
							, message_id as message_id
							, null rfq_id
							, @message_type_id message_type_id
							, case when @is_buyer = 1 then 'Message from Buyer' else 'Message from Manufacturer' end as   message_subject 
							, null  as message_body
							, null email_message_subject 
							,replace(replace(@email_msg_body, '#contactname#', a.username),'#msgid#',b.message_id)  as email_msg_body
							, @todays_date email_message_date
							, @from_contact rfq_contact_id
							, @from_username as from_username
							, @from_user_contactimage from_user_contactimage
							, contact_id as to_contact_id
							, username as to_username
							, email_id as to_email_id
							, 0 as message_sent
							, @message_type message_type
						from #list_of_to_contacts_for_messages_notification_freemsg a
					join #tmp_notification b on a.rn = b.id
					) c


				DECLARE @RowNo INT = 1,@IndivisualFileName varchar(max),@FileId int; 
				SELECT ROW_NUMBER() OVER(ORDER BY value ASC) AS RowNo , value into #MessageFileTable FROM 
				(
					select value from string_split(@MessageFileNames, ',')

				) AS MessageFileDetailList  				 


				While (@RowNo <= (SELECT COUNT(*) from #MessageFileTable))
				BEGIN 
					SET  @IndivisualFileName = (SELECT value from #MessageFileTable where RowNo = @RowNo);
	 
					INSERT INTO mp_special_files(FILE_NAME,CONT_ID,COMP_ID,IS_DELETED,FILETYPE_ID,CREATION_DATE,Imported_Location,parent_file_id
						,Legacy_file_id	,file_title	,file_caption,file_path	,s3_found_status,is_processed,sort_order)					 
					SELECT @IndivisualFileName,contact_id,null,0,57,getdate(),null,null,null,null,null,null,null,0,null  from 					
					 #list_of_to_contacts_for_messages_notification_freemsg a    
					set @FileId = @@identity
					
					INSERT INTO mp_message_file ( MESSAGE_ID, [FILE_ID])
					select message_id , @FileId from @notification_message_running_id

				SET @RowNo = @RowNo + 1;
				END		 
					
			end
			else
			begin
				set @processStatus = 'FAILUER'

				select 
					'FAILUER: No data for message notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
					, '' as email_message_date, '' as from_contact_id, '' as from_username
					, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
					, '' as to_email_id, 0 as message_sent
					, '' as message_subject , '' as message_body
					, '' email_message_id , '' message_id
					, ''  message_type
					
			end
		end
		else if  @message_type = 'BUYER_VIEWED_AN_RFQ'  -- 222
		begin
				

			insert into mp_messages
			( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
			select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					, replace(replace(replace(replace(@msg_subject, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company)  message_subject 
					, replace(replace(replace(replace(@msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company) as message_descr
					--, replace(@msg_body,'#RFQ_id#', '"'+convert(varchar(15),@rfq_id)+'"')   email_msg_body 
					, @todays_date as message_date
					, @rfq_contact_id from_contact_id 
					, contact_id as to_contact_id 
					, 0 as message_sent
					, 0 as message_read
					, 0 as trash
					, 0 as from_trash
					, 0 as real_from_cont_id
					, 0 as is_last_message
					, 0 as message_status_id_recipient
					, 0 as message_status_id_author
			from #list_of_to_contacts_for_messages_notification
			set @identity_msg = @@identity
				
			insert into mp_email_messages
			( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
			, message_sent,message_read )
			select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					, replace(replace(replace(replace(@email_msg_subject, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company)  email_msg_subject 
					, replace(replace(replace(replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company),'#Message_Link#',@message_link), '#RFQNO#',@rfq_guid) as email_msg_body
					, @todays_date as email_message_date
					, @rfq_contact_id from_contact_id 
					, contact_id as to_contact_id 
					, email_id as to_email_id
					, 0 as message_sent
					, 0 as message_read
			from #list_of_to_contacts_for_messages_notification
			WHERE is_notify_by_email = 1  /* M2-4789*/

			set @identity = @@identity

			
			
			if @identity> 0 or @identity_msg > 0
			begin
				set @processStatus = 'SUCCESS'
				
				select  
					@processStatus processStatus 
					, @identity email_message_id , @identity_msg message_id
					, @rfq_id rfq_id
					, @message_type_id message_type_id
					, replace(replace(replace(replace(@msg_subject, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company)  as message_subject
					, replace(replace(replace(replace(@msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company) as message_body
					, replace(replace(replace(replace(@email_msg_subject, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company)  email_message_subject
					, replace(replace(replace(replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company),'#Message_Link#',@message_link), '#RFQNO#',@rfq_guid) email_msg_body
					, @todays_date email_message_date
					, @rfq_contact_id rfq_contact_id
					, @from_username as from_username
					, @from_user_contactimage from_user_contactimage
					, b.contact_id as to_contact_id
					, b.username as to_username
					, b.email_id as to_email_id
					, 0 as message_sent
					, @message_type message_type
				from #list_of_to_contacts_for_messages_notification b 
				
				
			end
			else
			begin
				set @processStatus = 'FAILUER'

				select 
					'FAILUER: No data for message notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
					, '' as email_message_date, '' as from_contact_id, '' as from_username
					, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
					, '' as to_email_id, 0 as message_sent
					, '' as message_subject , '' as message_body
					, '' email_message_id , '' message_id
					, ''  message_type
					
			end
			
		end
		else if  @message_type = 'BUYER_VIEWED_AN_RFQ9999'  -- 222
		begin
				

			insert into mp_messages
			( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
			select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					, replace(replace(replace(replace(@msg_subject, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company)  message_subject 
					, replace(replace(replace(replace(@msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company) as message_descr
					--, replace(@msg_body,'#RFQ_id#', '"'+convert(varchar(15),@rfq_id)+'"')   email_msg_body 
					, @todays_date as message_date
					, @rfq_contact_id from_contact_id 
					, contact_id as to_contact_id 
					, 0 as message_sent
					, 0 as message_read
					, 0 as trash
					, 0 as from_trash
					, 0 as real_from_cont_id
					, 0 as is_last_message
					, 0 as message_status_id_recipient
					, 0 as message_status_id_author
			from #list_of_to_contacts_for_messages_notification
				
			insert into mp_email_messages
			( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
			, message_sent,message_read )
			select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					, replace(replace(replace(replace(@email_msg_subject, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company)  email_msg_subject 
					, replace(replace(replace(replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company),'#Message_Link#',@message_link), '#RFQNO#',@rfq_guid) as email_msg_body
					, @todays_date as email_message_date
					, @rfq_contact_id from_contact_id 
					, contact_id as to_contact_id 
					, email_id as to_email_id
					, 0 as message_sent
					, 0 as message_read
			from #list_of_to_contacts_for_messages_notification
			WHERE is_notify_by_email = 1  /* M2-4789*/
			
			
			
		end
		else if  @message_type = 'QUOTE_FEEDBACK_BUYER' -- 155
		begin
			
			insert into mp_messages
			( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
			select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					, 'Feedback from the buyer for RFQ #'+convert(varchar(50),@rfq_id)+' :' +@message as   message_subject 
					, 'Feedback from the buyer for RFQ #'+convert(varchar(50),@rfq_id)+' :' +@message as message_descr
					--, replace(@msg_body,'#RFQ_id#', '"'+convert(varchar(15),@rfq_id)+'"')   email_msg_body 
					, @todays_date as message_date
					, @from_contact from_contact_id 
					, @to_contacts as to_contact_id 
					, 0 as message_sent
					, 0 as message_read
					, 0 as trash
					, 0 as from_trash
					, 0 as real_from_cont_id
					, 0 as is_last_message
					, 0 as message_status_id_recipient
					, 0 as message_status_id_author
			--from #list_of_to_contacts_for_messages_notification
			set @identity = @@identity
				
			if @identity> 0 
			begin
				set @processStatus = 'SUCCESS'
				
				select 
					@processStatus as processStatus 
					, '' as email_message_id 
					, @identity as message_id
					, @rfq_id as rfq_id
					, @message_type_id  as message_type_id 
					, 'Feedback from the buyer for RFQ #'+convert(varchar(50),@rfq_id)+' :' +@message as message_subject 
					, 'Feedback from the buyer for RFQ #'+convert(varchar(50),@rfq_id)+' :' +@message as message_body
					, '' email_message_subject
					, '' email_msg_body 
					, @todays_date as email_message_date
					, @from_contact as rfq_contact_id 
					, (select top 1 first_name + ' ' + last_name from mp_contacts  (nolock) where contact_id = @from_contact) as from_username
					,  (select top 1 c.file_name from mp_contacts b  (nolock) left join mp_special_files c  (nolock) on b.contact_id = c.cont_id and filetype_id = 17  and b.contact_id =@from_contact ) from_user_contactimage
					, @to_contacts as to_contact_id
					, (select top 1 first_name + ' ' + last_name from mp_contacts  (nolock) where contact_id = @to_contacts) as to_username
					, (select top 1 email from aspnetusers a (nolock) join mp_contacts b (nolock) on a.id = b.user_id and b.contact_id = @to_contacts) as to_email_id
					, 0 as message_sent
					, @message_type as  message_type


			end
			else
			begin
				set @processStatus = 'FAILUER'

				select 
					'FAILUER: No data for message notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
					, '' as email_message_date, '' as from_contact_id, '' as from_username
					, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
					, '' as to_email_id, 0 as message_sent
					, '' as message_subject , '' as message_body
					, '' email_message_id , '' message_id
					, ''  message_type
					
			end
				
		end
		
		else if @message_type = 'QUOTED_MARKED_QUOTED_RFQ_EDITED' -- 226
		begin
			
				UPDATE mp_lead SET status_id = 2
				FROM mp_rfq_quote_SupplierQuote a  (nolock) 
				JOIN mp_contacts b (nolock)  on(a.contact_id = b.contact_id) AND a.rfq_id =@rfq_id
				JOIN mp_lead c (nolock)  on(b.company_id = c.company_id)
				WHERE
				c.lead_source_id = 10 AND c.value = @rfq_id
				
				
				INSERT INTO mp_messages
				( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
				SELECT 
						@rfq_id rfq_id
						, @message_type_id  message_type_id 
						----, 'RFQ# '+CONVERT(VARCHAR(50),@rfq_id)+' is being edited by '+@from_username+' and you have either marked it for quoting or sent a quote against it.'	AS  message_subject 
						----, 'RFQ# '+CONVERT(VARCHAR(50),@rfq_id)+' is being edited by '+@from_username+' and you have either marked it for quoting or sent a quote against it.'	AS message_descr
						, 'RFQ# '+CONVERT(VARCHAR(50),@rfq_id)+' is being edited by buyer'	AS  message_subject 
						, 'The buyer is making changes to the RFQ, and therefore you can now find it in your Quotes in Progress.  When the buyer re-releases the RFQ on the site, you will be notified to re-submit your quote if anything has changed.'	AS message_descr
						, @todays_date as message_date
						, @from_contact from_contact_id 
						, a.contact_id as to_contact_id 
						, 0 as message_sent
						, 0 as message_read
						, 0 as trash
						, 0 as from_trash
						, 0 as real_from_cont_id
						, 0 as is_last_message
						, 0 as message_status_id_recipient
						, 0 as message_status_id_author
				FROM 
				(	
					SELECT 
						DISTINCT a.contact_id
					FROM mp_rfq_quote_supplierquote (NOLOCK) a
					WHERE a.rfq_id = @rfq_id 
					AND a.is_rfq_resubmitted = 0
					AND a.is_quote_submitted = 1
					UNION
					SELECT 
						DISTINCT a.contact_id 
					FROM mp_rfq_quote_suplierstatuses (NOLOCK) a
					WHERE a.rfq_id = @rfq_id 
					AND a.rfq_userStatus_id in (1, 2)
				) a 
				SET @identity_msg = @@identity

				---- M2-4877-- Added email template code
				INSERT INTO mp_email_messages 
					( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
					, message_sent,message_read )
				OUTPUT inserted.email_message_id INTO @notification_email_running_id
				SELECT 
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, REPLACE(@email_msg_subject ,'##RFQNO##', CONVERT(VARCHAR(100),@rfq_id)) AS email_msg_subject 
							, REPLACE(@email_msg_body   ,'#Manufacturer_Contact_name#',a.first_name +' '+ a.last_name)  AS email_message_descr
							, @todays_date  AS email_message_date
							, @from_contact AS from_contact_id ---buyer contact id 
							, a.contact_id AS to_contact_id    ---supplier contact id
							, b.email as to_email_id
							, 0 AS message_sent
							, 0 AS message_read
					FROM mp_contacts (NOLOCK) a 
					JOIN AspNetUsers(NOLOCK) b on a.user_id = b.id 
					WHERE  a.contact_id in
					(
						SELECT 
						DISTINCT a.contact_id
						FROM mp_rfq_quote_supplierquote (NOLOCK) a
						WHERE a.rfq_id = @rfq_id 
						AND a.is_rfq_resubmitted = 0
						AND a.is_quote_submitted = 1
						UNION
						SELECT 
							DISTINCT a.contact_id 
						FROM mp_rfq_quote_suplierstatuses (NOLOCK) a
						WHERE a.rfq_id = @rfq_id 
						AND a.rfq_userStatus_id in (1, 2)
					)
					AND a.is_notify_by_email = 1  /* M2-4789*/
				
				SET @identity = @@identity
			 	IF	@identity_msg > 0 OR @identity> 0
				BEGIN
					SET @processStatus = 'SUCCESS'
				
					
				SELECT 
					@processStatus processStatus 
					, NULL email_message_id 
					, message_id message_id
					, rfq_id rfq_id
					, @message_type_id message_type_id
					, message_subject  as message_subject
					, message_descr as message_body
					, REPLACE(@email_msg_subject ,'##RFQNO##', CONVERT(VARCHAR(100),@rfq_id)) AS  email_message_subject 
					, REPLACE(REPLACE( @email_msg_body   ,'#Manufacturer_Contact_name#',b.first_name +' '+ b.last_name), '#Company_Name#', @company) AS email_msg_body
					, message_date email_message_date
					, from_cont rfq_contact_id
					, @from_username as from_username
					, @from_user_contactimage from_user_contactimage
					, to_cont as to_contact_id
					, NULL as to_username
					, c.email as to_email_id
					, 0 as message_sent
					, @message_type_id message_type
				FROM mp_messages (NOLOCK) a
				JOIN mp_contacts (NOLOCK) b ON a.to_cont = b.contact_id
				JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
				WHERE rfq_id = @rfq_id 
				AND message_type_id = @message_type_id
				AND message_date =  @todays_date

			END
			ELSE
			BEGIN
				SET @processStatus = 'FAILUER'
			END


		end
		else if @message_type = 'AWARDED_OFFLINE_MANUFACTURER' -- 227
		begin
			
								
				INSERT INTO mp_messages
				( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
				SELECT 
						@rfq_id rfq_id
						, @message_type_id  message_type_id 
						, 'RFQ# '+CONVERT(VARCHAR(50),@rfq_id)+' - '+ @rfq_name +' has parts that have been awarded to an offline manufacturer.'	AS message_subject 
						, 'RFQ# '+CONVERT(VARCHAR(50),@rfq_id)+' - '+ @rfq_name +' has parts that have been awarded to an offline manufacturer.'	AS message_descr
						, @todays_date as message_date
						, @from_contact from_contact_id 
						, a.contact_id as to_contact_id 
						, 0 as message_sent
						, 0 as message_read
						, 0 as trash
						, 0 as from_trash
						, 0 as real_from_cont_id
						, 0 as is_last_message
						, 0 as message_status_id_recipient
						, 0 as message_status_id_author
				FROM 
				(	
					SELECT 
						DISTINCT a.contact_id
					FROM mp_rfq_quote_supplierquote (NOLOCK) a
					WHERE a.rfq_id = @rfq_id 
					AND a.is_rfq_resubmitted = 0
					AND a.is_quote_submitted = 1
					UNION
					SELECT 
						DISTINCT a.contact_id 
					FROM mp_rfq_quote_suplierstatuses (NOLOCK) a
					WHERE a.rfq_id = @rfq_id 
					AND a.rfq_userStatus_id in (1, 2)
				) a 
				SET @identity_msg = @@identity

				IF	@identity_msg > 0
				BEGIN
					SET @processStatus = 'SUCCESS'
				
					
					SELECT 
						@processStatus processStatus 
						, NULL email_message_id 
						, message_id message_id
						, rfq_id rfq_id
						, @message_type_id message_type_id
						, message_subject  as message_subject
						, message_descr as message_body
						, NULL  email_message_subject
						, NULL email_msg_body
						, message_date email_message_date
						, from_cont rfq_contact_id
						, @from_username as from_username
						, @from_user_contactimage from_user_contactimage
						, to_cont as to_contact_id
						, NULL as to_username
						, c.email as to_email_id
						, 0 as message_sent
						, @message_type_id message_type
					FROM mp_messages (NOLOCK) a
					JOIN mp_contacts (NOLOCK) b ON a.to_cont = b.contact_id
					JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
					WHERE rfq_id = @rfq_id 
					AND message_type_id = @message_type_id
					AND message_date =  @todays_date

			END
			ELSE
			BEGIN
				SET @processStatus = 'FAILUER'
			END


		end
		else if @message_type = 'RFQ_NOT_AWARDED' -- 227
		begin
			
								
				INSERT INTO mp_messages
				( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
				SELECT 
						@rfq_id rfq_id
						, @message_type_id  message_type_id 
						, 'RFQ# '+CONVERT(VARCHAR(50),@rfq_id)+' - '+ @rfq_name +' has parts that will not be awarded.'	AS message_subject 
						, 'RFQ# '+CONVERT(VARCHAR(50),@rfq_id)+' - '+ @rfq_name +' has parts that will not be awarded.'	AS message_descr
						, @todays_date as message_date
						, @from_contact from_contact_id 
						, a.contact_id as to_contact_id 
						, 0 as message_sent
						, 0 as message_read
						, 0 as trash
						, 0 as from_trash
						, 0 as real_from_cont_id
						, 0 as is_last_message
						, 0 as message_status_id_recipient
						, 0 as message_status_id_author
				FROM 
				(	
					SELECT 
						DISTINCT a.contact_id
					FROM mp_rfq_quote_supplierquote (NOLOCK) a
					WHERE a.rfq_id = @rfq_id 
					AND a.is_rfq_resubmitted = 0
					AND a.is_quote_submitted = 1
					UNION
					SELECT 
						DISTINCT a.contact_id 
					FROM mp_rfq_quote_suplierstatuses (NOLOCK) a
					WHERE a.rfq_id = @rfq_id 
					AND a.rfq_userStatus_id in (1, 2)
				) a 
				SET @identity_msg = @@identity

				IF	@identity_msg > 0
				BEGIN
					SET @processStatus = 'SUCCESS'
				
					
					SELECT 
						@processStatus processStatus 
						, NULL email_message_id 
						, message_id message_id
						, rfq_id rfq_id
						, @message_type_id message_type_id
						, message_subject  as message_subject
						, message_descr as message_body
						, NULL  email_message_subject
						, NULL email_msg_body
						, message_date email_message_date
						, from_cont rfq_contact_id
						, @from_username as from_username
						, @from_user_contactimage from_user_contactimage
						, to_cont as to_contact_id
						, NULL as to_username
						, c.email as to_email_id
						, 0 as message_sent
						, @message_type_id message_type
					FROM mp_messages (NOLOCK) a
					JOIN mp_contacts (NOLOCK) b ON a.to_cont = b.contact_id
					JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
					WHERE rfq_id = @rfq_id 
					AND message_type_id = @message_type_id
					AND message_date =  @todays_date

			END
			ELSE
			BEGIN
				SET @processStatus = 'FAILUER'
			END


		end
		/* M2-3717 Email - MULTI-PART RFQ EMAIL - MANUFACTURER */
		else if @message_type = 'COMMUNITY_DIRECTORY_RFQ' -- 231
		begin
			
				DROP TABLE IF EXISTS #tmp_email_messages_COMMUNITY_DIRECTORY_RFQ

				SELECT 
					a.contact_id						AS BuyerId
					, a.rfq_id							AS RfqNo
					, a.rfq_guid						AS RfqGUId
					, ISNULL(d.discipline_name,'')		AS Process
					, ISNULL(e.material_name_en,'')		AS Material
					, ISNULL(h.region_name,'-')			AS BuyerState
					, ISNULL(i.CompanyType,'-')			AS BuyerIndustry
					, ROW_NUMBER() OVER(ORDER BY a.rfq_id) AS RN
					, f.first_name + ' ' + f.last_name AS FromUsername
					, j.file_name AS FromUserContactimage
				INTO #tmp_email_messages_COMMUNITY_DIRECTORY_RFQ
				FROM mp_rfq						a	(NOLOCK)
				JOIN mp_rfq_parts				b	(NOLOCK) ON a.rfq_id = b.rfq_id
				LEFT JOIN mp_mst_part_category	c	(NOLOCK) ON b.part_category_id = c.part_category_id AND c.status_id = 2
				LEFT JOIN mp_mst_part_category	d	(NOLOCK) ON c.parent_part_category_id = d.part_category_id AND d.status_id = 2
				LEFT JOIN mp_mst_materials		e	(NOLOCK) ON b.material_id = e.material_id
				JOIN mp_contacts				f	(NOLOCK) ON a.contact_id = f.contact_id
				LEFT JOIN mp_addresses			g	(NOLOCK) ON f.address_id = g.address_id
				LEFT JOIN mp_mst_region			h	(NOLOCK) ON g.region_id = h.region_id AND g.region_id <> 0
				LEFT JOIN 
				(
					SELECT 
						CompSuppl.company_id CompanyId
						, SuppType.IndustryBranches_name_EN as CompanyType
						, ROW_NUMBER () OVER (PARTITION BY CompSuppl.company_id  ORDER BY CompSuppl.company_id , CompSuppl.supplier_type_id DESC) RN
					FROM mp_company_supplier_types CompSuppl	(NOLOCK) 
					LEFT JOIN mp_mst_IndustryBranches SuppType  (NOLOCK) ON CompSuppl.supplier_type_id=SuppType.IndustryBranches_id  
				) i ON f.company_id = i.CompanyId
				left join mp_special_files j  (nolock) on a.contact_id = j.cont_id and filetype_id = 17
				WHERE a.IsMfgCommunityRfq = 1 
				AND a.rfq_id  = @rfq_id

				

				--SELECT * FROM #tmp_email_messages_COMMUNITY_DIRECTORY_RFQ
				DECLARE @email_msg_body_first_part AS NVARCHAR(MAX) = ''
				DECLARE @email_msg_body_middle_part AS NVARCHAR(MAX) = ''
				DECLARE @email_msg_body_middle_part_final AS NVARCHAR(MAX) = ''
				DECLARE @email_msg_body_last_part AS NVARCHAR(MAX) = ''
				DECLARE @BuyerState  AS NVARCHAR(MAX) = (SELECT DISTINCT BuyerState  FROM #tmp_email_messages_COMMUNITY_DIRECTORY_RFQ)
				DECLARE @BuyerIndustry AS NVARCHAR(MAX) = (SELECT DISTINCT BuyerIndustry  FROM #tmp_email_messages_COMMUNITY_DIRECTORY_RFQ)
				DECLARE @RfqGUId AS NVARCHAR(MAX) = (SELECT DISTINCT RfqGUId  FROM #tmp_email_messages_COMMUNITY_DIRECTORY_RFQ)
				DECLARE @BuyerId AS NVARCHAR(MAX) = (SELECT DISTINCT BuyerId  FROM #tmp_email_messages_COMMUNITY_DIRECTORY_RFQ)
				
				SET @from_username =  (SELECT DISTINCT FromUsername  FROM #tmp_email_messages_COMMUNITY_DIRECTORY_RFQ) 
				SET @from_user_contactimage =  (SELECT DISTINCT FromUserContactimage  FROM #tmp_email_messages_COMMUNITY_DIRECTORY_RFQ) 

				
				SET @email_msg_body_first_part = SUBSTRING(@email_msg_body,0,CHARINDEX('<!--Rfq Details Iteration Start here -->',@email_msg_body))
				SET @email_msg_body_middle_part = SUBSTRING(@email_msg_body,CHARINDEX('<!--Rfq Details Iteration Start here -->',@email_msg_body),CHARINDEX('<!--Rfq Details Iteration End here -->',@email_msg_body) - CHARINDEX('<!--Rfq Details Iteration Start here -->',@email_msg_body))
				SET @email_msg_body_last_part = SUBSTRING(@email_msg_body,CHARINDEX('<!--Rfq Details Iteration End here -->',@email_msg_body),LEN(@email_msg_body))

				DECLARE @Counter INT 
				DECLARE @Process VARCHAR(MAX) = ''
				DECLARE @Material VARCHAR(MAX)  = ''
				SET @Counter=1
				WHILE ( @Counter <= (SELECT COUNT(1) FROM #tmp_email_messages_COMMUNITY_DIRECTORY_RFQ))
				BEGIN
					
					SELECT 
						@Process = Process
						,@Material = Material
					FROM #tmp_email_messages_COMMUNITY_DIRECTORY_RFQ WHERE RN = @Counter

					SET @email_msg_body_middle_part_final = 
						@email_msg_body_middle_part_final 
						+ REPLACE(REPLACE(@email_msg_body_middle_part  , '#Process#' ,  @Process ) ,'#Material#' , @Material)
					SET @Counter  = @Counter  + 1
				END
				
				SET @email_msg_body = @email_msg_body_first_part + @email_msg_body_middle_part_final + @email_msg_body_last_part
				--SELECT @email_msg_subject 		
				--, @email_msg_body 	
				--, @email_msg_body_first_part
				--, @email_msg_body_middle_part
				--, @email_msg_body_last_part
				--, @email_msg_body_middle_part_final
				--, @from_username
				--, @from_user_contactimage

				/* M2-4010 M - for directory messages, simple, direct RFQ's CC children and add it to their messages -API */
				INSERT INTO mp_messages
				( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
				OUTPUT inserted.message_id INTO @notification_message_running_id
				SELECT 
						@rfq_id rfq_id
						, @message_type_id  message_type_id 
						, REPLACE(REPLACE(@email_msg_subject,'#RfqNo#',''+CONVERT(VARCHAR(50),@rfq_id)+''), '#SupplierFirstName#' , b.first_name) message_subject 
						, REPLACE(REPLACE(@email_msg_subject,'#RfqNo#',''+CONVERT(VARCHAR(50),@rfq_id)+''), '#SupplierFirstName#' , b.first_name) message_subject  
						, @todays_date as message_date
						, @BuyerId from_contact_id 
						, b.contact_id AS to_contact_id 
						, 0 as message_sent
						, 0 as message_read
						, 0 as trash
						, 0 as from_trash
						, 0 as real_from_cont_id
						, 0 as is_last_message
						, 0 as message_status_id_recipient
						, 0 as message_status_id_author
				FROM mp_rfq_supplier (NOLOCK) a
				JOIN mp_contacts	(NOLOCK) b ON a.company_id = b.company_id AND is_buyer= 0
				JOIN aspnetusers	(NOLOCK) c ON b.user_id = c.id
				WHERE a.rfq_id = @rfq_id 
				/**/ 

				INSERT INTO mp_email_messages
				( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date
				,from_cont ,to_cont, to_email, message_sent,message_read )
				OUTPUT inserted.email_message_id INTO @notification_email_running_id
				SELECT 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					,  REPLACE(REPLACE(@email_msg_subject,'#RfqNo#',''+CONVERT(VARCHAR(50),@rfq_id)+''), '#SupplierFirstName#' , b.first_name) message_subject 
					,  REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@email_msg_body, '#SupplierFirstName#',  b.first_name) , '#State#' ,@BuyerState),'#Industry#',@BuyerIndustry), '#RfqId#',''+CONVERT(VARCHAR(50),@rfq_id)+''), '#RfqGuid#',+CONVERT(VARCHAR(50),@rfq_id))  AS message_descr
					, @todays_date AS email_message_date
					, @BuyerId from_contact_id 
					, b.contact_id AS to_contact_id 
					, c.Email AS to_email_id
					, 0 AS message_sent
					, 0 AS message_read
				FROM mp_rfq_supplier (NOLOCK) a
				JOIN mp_contacts	(NOLOCK) b ON a.company_id = b.company_id AND is_buyer= 0
				AND b.is_notify_by_email = 1 /* M2-4789*/
				JOIN aspnetusers	(NOLOCK) c ON b.user_id = c.id
				WHERE a.rfq_id = @rfq_id 
				
				IF	(SELECT COUNT(1) FROM @notification_email_running_id) > 0
				BEGIN
					SET @processStatus = 'SUCCESS'
				
					
					SELECT 
						@processStatus processStatus 
						, email_message_id email_message_id 
						, NULL message_id
						, rfq_id rfq_id
						, @message_type_id message_type_id
						, NULL  as message_subject
						, NULL as message_body
						, email_message_subject  email_message_subject
						, email_message_descr email_msg_body
						, email_message_date email_message_date
						, from_cont rfq_contact_id
						, @from_username as from_username
						, @from_user_contactimage from_user_contactimage
						, to_cont as to_contact_id
						, NULL as to_username
						, c.email as to_email_id
						, 0 as message_sent
						, @message_type_id message_type
					FROM mp_email_messages (NOLOCK) a
					JOIN mp_contacts (NOLOCK) b ON a.to_cont = b.contact_id
					JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
					WHERE rfq_id = @rfq_id 
					AND message_type_id = @message_type_id
					AND email_message_date =  @todays_date
					UNION
					SELECT 
						@processStatus processStatus 
						, NULL email_message_id 
						, message_id message_id
						, rfq_id rfq_id
						, @message_type_id message_type_id
						, NULL  as message_subject
						, NULL as message_body
						, message_subject  email_message_subject
						, message_descr  email_msg_body
						, message_date  email_message_date
						, from_cont rfq_contact_id
						, @from_username as from_username
						, @from_user_contactimage from_user_contactimage
						, to_cont as to_contact_id
						, NULL as to_username
						, c.email as to_email_id
						, 0 as message_sent
						, @message_type_id message_type
					FROM mp_messages (NOLOCK) a
					JOIN mp_contacts (NOLOCK) b ON a.to_cont = b.contact_id
					JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
					WHERE rfq_id = @rfq_id 
					AND message_type_id = @message_type_id
					AND message_date =  @todays_date

				END
				ELSE
				BEGIN
					SET @processStatus = 'FAILUER'
				END		



		end
		/**/
		/* M2-3717 Email - MULTI-PART RFQ EMAIL - MANUFACTURER */
		else if @message_type = 'BUYER_INCOMPLETE_PROFILE' -- 232
		begin
			        --- Declare below variable in above
				--DECLARE @ToBuyer VARCHAR(250) = 0
				--DECLARE @ToBuyerEmail VARCHAR(250) = ''
				
				SELECT 
					@ToBuyer = b.first_name +' '+ b.last_name
					, @ToBuyerEmail = c.email
				FROM mp_contacts (NOLOCK) b 
				JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
				WHERE b.contact_id = @to_contacts
				

				--SELECT 
				--	@msg_subject
				--	,@msg_body
				--	,@email_msg_subject
				--	,@email_msg_body 

				
				INSERT INTO mp_messages
				( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
				OUTPUT inserted.message_id INTO @notification_message_running_id
				SELECT 
					NULL rfq_id
					, @message_type_id  message_type_id 
					, REPLACE(@msg_subject , '#BuyerDisplayName#' , @ToBuyer)	AS message_subject 
					, @msg_body	AS message_descr
					, @todays_date as message_date
					, NULL from_contact_id 
					, @to_contacts as to_contact_id 
					, 0 as message_sent
					, 0 as message_read
					, 0 as trash
					, 0 as from_trash
					, 0 as real_from_cont_id
					, 0 as is_last_message
					, 0 as message_status_id_recipient
					, 0 as message_status_id_author


				IF EXISTS( SELECT contact_id FROM mp_contacts(NOLOCK) WHERE contact_id = @to_contacts AND is_notify_by_email = 1 )   /* M2-4789*/
		        BEGIN
				INSERT INTO mp_email_messages
				( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date
				,from_cont ,to_cont, to_email, message_sent,message_read )
				OUTPUT inserted.email_message_id INTO @notification_email_running_id
				SELECT 
					NULL rfq_id
					, @message_type_id  message_type_id 
					,  REPLACE(@email_msg_subject , '#BuyerDisplayName#' , @ToBuyer) message_subject 
					,  REPLACE(@email_msg_body , '#BuyerDisplayName#' , @ToBuyer)  AS message_descr
					, @todays_date AS email_message_date
					, NULL from_contact_id 
					, @to_contacts AS to_contact_id 
					, @ToBuyerEmail AS to_email_id
					, 0 AS message_sent
					, 0 AS message_read
				
				END
				
				----IF	((SELECT COUNT(1) FROM @notification_email_running_id) > 0 AND (SELECT COUNT(1) FROM @notification_message_running_id) > 0 ) ---Commented with  /* M2-4789*/
				IF	((SELECT COUNT(1) FROM @notification_email_running_id) > 0 OR (SELECT COUNT(1) FROM @notification_message_running_id) > 0 )
				BEGIN
					SET @processStatus = 'SUCCESS'
				
					
					select  
						@processStatus processStatus 
						, (SELECT email_message_id FROM @notification_email_running_id) AS email_message_id 
						, (SELECT message_id FROM @notification_message_running_id) AS message_id
						, NULL AS rfq_id
						, @message_type_id AS message_type_id
						, REPLACE(@msg_subject , '#BuyerDisplayName#' , @ToBuyer) AS message_subject
						, @msg_body  AS message_body
						, REPLACE(@email_msg_subject , '#BuyerDisplayName#' , @ToBuyer) AS  email_message_subject
						, REPLACE(@email_msg_body , '#BuyerDisplayName#' , @ToBuyer) AS  email_msg_body
						, @todays_date email_message_date
						, NULL AS rfq_contact_id
						, NULL AS from_username
						, NULL AS from_user_contactimage
						, @to_contacts	AS to_contact_id
						, @ToBuyer		AS to_username
						, @ToBuyerEmail AS to_email_id
						, 0				AS message_sent
						, @message_type AS message_type
					
					
				END
				ELSE
				BEGIN
					SET @processStatus = 'FAILUER'
				END		

		end 
		/**/
		/* M2-3910 M - Email - Your profile is not complete - DB */
		else if @message_type = 'SUPPLIER_INCOMPLETE_PROFILE' -- 233
		begin

			SELECT 
				@ToSupplier =	a.first_name +' '+a.last_name
				,@ToSupplierEmail = b.email
			FROM mp_contacts (NOLOCK) a
			JOIN aspnetusers (NOLOCK) b ON a.[user_id] = b.id
			WHERE a.contact_id = @to_contacts

			IF EXISTS( SELECT contact_id FROM mp_contacts(NOLOCK) WHERE contact_id = @to_contacts AND is_notify_by_email = 1 )   /* M2-4789*/
		    BEGIN
			INSERT INTO mp_email_messages
			( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date
			,from_cont ,to_cont, to_email, message_sent,message_read )
			SELECT 
				NULL rfq_id
				, @message_type_id  message_type_id 
				, @email_msg_subject email_subject 
				, REPLACE(@email_msg_body , '#FirstName#' , @ToSupplier)  AS email_body
				, @todays_date AS email_message_date
				, NULL from_contact_id 
				, @to_contacts AS to_contact_id 
				, @ToSupplierEmail AS to_email_id
				, 0 AS message_sent
				, 0 AS message_read
			END

		end
		/**/
		/* M2-3926 M - Email - Congrats your profile is live - DB */
		else if @message_type = 'SUPPLIER_PROFILE_APPROVED' -- 234
		begin


			DECLARE @PublicProfile VARCHAR(1000) 
			DECLARE @SupplierCompanyId INT
			DECLARE @tbl_PublicProfile table (PublicProfile VARCHAR(1000) ,PublicProfileDetail VARCHAR(1000))

			SELECT 
				@ToSupplier =	a.first_name +' '+a.last_name
				,@ToSupplierEmail = b.email
				,@SupplierCompanyId = a.company_id
			FROM mp_contacts (NOLOCK) a
			JOIN aspnetusers (NOLOCK) b ON a.[user_id] = b.id
			WHERE a.contact_id = @to_contacts

			INSERT INTO @tbl_PublicProfile (PublicProfile , PublicProfileDetail)
			EXEC proc_get_CommunityCompanyProfileURL @CompanyId = @SupplierCompanyId
			
			SET @PublicProfile = (SELECT PublicProfile FROM @tbl_PublicProfile)

			IF EXISTS( SELECT contact_id FROM mp_contacts(NOLOCK) WHERE contact_id = @to_contacts AND is_notify_by_email = 1 )   /* M2-4789*/
		    BEGIN
			INSERT INTO mp_email_messages
			( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date
			,from_cont ,to_cont, to_email, message_sent,message_read )
			SELECT 
				NULL rfq_id
				, @message_type_id  message_type_id 
				, @email_msg_subject email_subject 
				, REPLACE(REPLACE(@email_msg_body , '#FirstName#' , @ToSupplier),'#PublicProfile#', ISNULL(@PublicProfile,''))  AS email_body
				, @todays_date AS email_message_date
				, NULL from_contact_id 
				, @to_contacts AS to_contact_id 
				, @ToSupplierEmail AS to_email_id
				, 0 AS message_sent
				, 0 AS message_read
			END

		end
		/**/
		/*  M2-3249 M - Send M a Notification and Email when an RFQ is released from a followed buyer -DB */
		else if  @message_type = 'RFQ_RELEASE_NOTIFICATION_FROM_FOLLOWED_BUYER'  -- 240
		begin
				
				
			
			insert into mp_messages
			( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
			OUTPUT inserted.message_id INTO @notification_message_running_id
			select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					, replace(replace(@msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id)) ,'##RFQName##' ,@rfq_name)  message_subject 
					, replace(replace(replace(replace(replace(@msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company),'##RFQName##' ,@rfq_name) as message_descr
					, @todays_date as message_date
					, @rfq_contact_id from_contact_id 
					, contact_id as to_contact_id 
					, 0 as message_sent
					, 0 as message_read
					, 0 as trash
					, 0 as from_trash
					, 0 as real_from_cont_id
					, 0 as is_last_message
					, 0 as message_status_id_recipient
					, 0 as message_status_id_author
			from #list_of_to_contacts_for_messages_notification1
				
				
			insert into mp_email_messages
			( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
			, message_sent,message_read )
			OUTPUT inserted.email_message_id INTO @notification_email_running_id
			select 
					@rfq_id rfq_id
					, @message_type_id  message_type_id 
					, replace(replace(@email_msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id)),'##RFQName##' ,@rfq_name)   email_msg_subject 
					, replace(replace(replace(replace(replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Buyer_Name#' , @from_username) , '#Company_Name#',@company),'#Message_Link#',@message_link), '#RFQNO#',@rfq_guid),'##RFQName##' ,@rfq_name)
					, @todays_date as email_message_date
					, @rfq_contact_id from_contact_id 
					, contact_id as to_contact_id 
					, email_id as to_email_id
					, 0 as message_sent
					, 0 as message_read
			from #list_of_to_contacts_for_messages_notification1
			WHERE is_notify_by_email = 1  /* M2-4789*/

						
			/* M2-4773 Data insered into mp_email_messages tables via below SP : */
			EXEC  proc_set_EmailRfqMissingInfo @RfqId = @rfq_id, @todays_date = @todays_date , @message = @message 
			/**/
				
			if ((SELECT COUNT(1) FROM @notification_email_running_id) > 0 AND (SELECT COUNT(1) FROM @notification_message_running_id) > 0 )
			begin
				set @processStatus = 'SUCCESS'
			
				SELECT 
						@processStatus processStatus 
						, email_message_id email_message_id 
						, NULL message_id
						, rfq_id rfq_id
						, @message_type_id message_type_id
						, NULL  as message_subject
						, NULL as message_body
						, email_message_subject  email_message_subject
						, email_message_descr email_msg_body
						, email_message_date email_message_date
						, from_cont rfq_contact_id
						, @from_username as from_username
						, @from_user_contactimage from_user_contactimage
						, to_cont as to_contact_id
						, NULL as to_username
						, c.email as to_email_id
						, 0 as message_sent
						, @message_type_id message_type
					FROM mp_email_messages (NOLOCK) a
					JOIN mp_contacts (NOLOCK) b ON a.to_cont = b.contact_id
					JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
					WHERE rfq_id = @rfq_id 
					AND message_type_id IN (@message_type_id)
					AND email_message_date =  @todays_date
					UNION					SELECT 
						@processStatus processStatus 
						, NULL email_message_id 
						, message_id message_id
						, rfq_id rfq_id
						, @message_type_id message_type_id
						, NULL  as message_subject
						, NULL as message_body
						, message_subject  email_message_subject
						, message_descr  email_msg_body
						, message_date  email_message_date
						, from_cont rfq_contact_id
						, @from_username as from_username
						, @from_user_contactimage from_user_contactimage
						, to_cont as to_contact_id
						, NULL as to_username
						, c.email as to_email_id
						, 0 as message_sent
						, @message_type_id message_type
					FROM mp_messages (NOLOCK) a
					JOIN mp_contacts (NOLOCK) b ON a.to_cont = b.contact_id
					JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
					WHERE rfq_id = @rfq_id 
					AND message_type_id IN (@message_type_id,242)
					AND message_date =  @todays_date
							
			end
			else
			begin
				set @processStatus = 'FAILUER'

				if (select count(1) from mp_messages (NOLOCK) where rfq_id = @rfq_id and message_type_id IN (242) and message_date =  @todays_date ) > 0 
				begin
		
					set @processStatus = 'SUCCESS'

					SELECT 
					@processStatus processStatus 
					, NULL email_message_id 
					, message_id message_id
					, rfq_id rfq_id
					, @message_type_id message_type_id
					, NULL  as message_subject
					, NULL as message_body
					, message_subject  email_message_subject
					, message_descr  email_msg_body
					, message_date  email_message_date
					, from_cont rfq_contact_id
					, @from_username as from_username
					, @from_user_contactimage from_user_contactimage
					, to_cont as to_contact_id
					, NULL as to_username
					, c.email as to_email_id
					, 0 as message_sent
					, @message_type_id message_type
					FROM mp_messages (NOLOCK) a
					JOIN mp_contacts (NOLOCK) b ON a.to_cont = b.contact_id
					JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
					WHERE rfq_id = @rfq_id 
					AND message_type_id IN (242)
					AND message_date =  @todays_date
					
				end
				else 
				
					select 
						'FAILUER: No data for message notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' as email_message_date, '' as from_contact_id, '' as from_username
						, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
						, '' as to_email_id, 0 as message_sent
						, '' as message_subject , '' as message_body
						, '' email_message_id , '' message_id
						, ''  message_type
				
					
			end
			
		end
		/* M2-4837 */
		 else if  @message_type in( 'BUYER_SELECTS_RESUBMIT_QUOTE')   -- 243
		 BEGIN
				 			
					insert into mp_messages
					( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
					output inserted.message_id into @notification_message_running_id
					select 
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, replace(replace(@msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Company_Name#',@company)   message_subject 
							, replace(replace(replace(@msg_body, '#Manufacturer_Contact_name#', b.first_name + ' ' + b.last_name) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Company_Name#',@company) as message_descr
							, @todays_date as message_date
							, @rfq_contact_id from_contact_id 
							, @to_contacts as to_contact_id 
							, 0 as message_sent
							, 0 as message_read
							, 0 as trash
							, 0 as from_trash
							, 0 as real_from_cont_id
							, 0 as is_last_message
							, 0 as message_status_id_recipient
							, 0 as message_status_id_author
					from mp_rfq_quote_suplierstatuses (NOLOCK) a
					join mp_contacts (NOLOCK) b ON a.contact_id = b.contact_id
					WHERE a.rfq_id = @rfq_id AND a.contact_id = @to_contacts

					 
					set @identity_msg = @@identity
					 
									
					insert into mp_email_messages 
					( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
					, message_sent,message_read )
					output inserted.email_message_id into @notification_email_running_id
					select 
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, replace(replace(@email_msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Company_Name#',@company)   email_msg_subject 
							,  replace(replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#', b.first_name + ' ' + b.last_name) , '##RFQNO##' ,convert(varchar(15),@rfq_id)) , '#RFQNO#', @rfq_guid) , '#Company_Name#',@company)
							, @todays_date as email_message_date
							, @rfq_contact_id from_contact_id 
							, @to_contacts as to_contact_id 
							, Email as to_email_id
							, 0 as message_sent
							, 0 as message_read
					from mp_rfq_quote_suplierstatuses (NOLOCK) a
					join mp_contacts (NOLOCK) b ON a.contact_id = b.contact_id
					AND b.is_notify_by_email = 1  /* M2-4789*/
					join aspnetusers(nolock) c ON c.id = b.user_id 
					WHERE a.rfq_id = @rfq_id AND a.contact_id = @to_contacts

					set @identity = @@identity


					if @identity> 0 or @identity_msg > 0
					begin
						set @processStatus = 'SUCCESS'
						
						insert into #tmp_notification (id, message_id)
						select * from @notification_message_running_id
						
						insert into #tmp_notification (id, email_message_id)
						select * from @notification_email_running_id

						select a.processStatus	,b.email_message_id ,b.message_id	,rfq_id	,message_type_id, NULL message_subject	, NULL message_body	,email_message_subject
								, case when b.email_message_id is null then a.message_subject  else a.email_msg_body end as  email_msg_body		,email_message_date	,rfq_contact_id	,from_username ,from_user_contactimage	,to_contact_id	,to_username
								,to_email_id		,message_sent 		,message_type
						from 
						(
							select
								row_number() over (order by b.contact_id )  id
								, @processStatus processStatus 
								, @identity email_message_id , @identity_msg message_id
								, @rfq_id rfq_id
								, @message_type_id message_type_id
								, replace(replace(@msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Company_Name#',@company)  as message_subject
								, replace(replace(replace(@msg_body, '#Manufacturer_Contact_name#', username) , '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Company_Name#',@company)  as message_body
								, replace(replace(@email_msg_subject, '##RFQNO##' ,convert(varchar(15),@rfq_id)), '#Company_Name#',@company)   email_message_subject
								, replace(replace(replace(@email_msg_body, '#Manufacturer_Contact_name#',  b.first_name + ' ' + b.last_name ) , '##RFQNO##' ,convert(varchar(15),@rfq_id)) , '#Company_Name#',@company)  email_msg_body
								, @todays_date email_message_date
								, @rfq_contact_id rfq_contact_id
								, @from_username as from_username
								, @from_user_contactimage from_user_contactimage
								, b.contact_id as to_contact_id
								, b.first_name + ' ' + b.last_name as to_username
								, c.email as to_email_id
								, 0 as message_sent
								, @message_type message_type
					from mp_rfq_quote_suplierstatuses (NOLOCK) a
					join mp_contacts (NOLOCK) b ON a.contact_id = b.contact_id
					join aspnetusers(nolock) c ON c.id = b.user_id 
					WHERE a.rfq_id = @rfq_id AND a.contact_id = @to_contacts
						)
						 a
						join #tmp_notification b on a.id = b.id

												
				end --1
				else
				begin
					set @processStatus = 'FAILUER'

					select 
						'FAILUER: No data for email notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' as email_message_date, '' as from_contact_id, '' as from_username
						, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
						, '' as to_email_id, 0 as message_sent
						, '' as message_subject , '' as message_body
						, '' email_message_id , '' message_id
						, ''  message_type
				end

					 
		 END

		 /*M2-4826 and M2-4827*/
		 ELSE IF  @message_type in( 'BUYER_EMAIL_NOTIFICATION_FOR_PO_ACCEPTANCE')   -- 244
		 BEGIN

					 SELECT 
								@ToBuyer = b.first_name +' '+ b.last_name
								, @ToBuyerEmail = c.email
							FROM mp_contacts (NOLOCK) b 
							JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
							WHERE b.contact_id = @to_contacts

					SELECT @poMfgUniqueId  = Id , @poTransactionId   = TransactionId , @PONumber = PONumber
					,@RfqEncryptedId = RfqEncryptedId
					FROM mpOrderManagement (NOLOCK) WHERE RfqId =  @rfq_id AND IsDeleted = 0
								 			
					INSERT INTO mp_messages
					( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
					OUTPUT inserted.message_id INTO @notification_message_running_id
					SELECT 
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, @company + ' has accepted your purchase order for RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + '.' AS  message_subject 
						    , @company + ' has accepted your purchase order for RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + '.' AS message_descr
							, @todays_date AS message_date
							, @from_contact AS from_contact_id ---supplier contact id
							, @to_contacts AS to_contact_id   ---buyer contact id
							, 0 AS message_sent
							, 0 AS message_read
							, 0 AS trash
							, 0 AS from_trash
							, 0 AS real_from_cont_id
							, 0 AS is_last_message
							, 0 AS message_status_id_recipient
							, 0 AS message_status_id_author
					
				  
					SET @identity_msg = @@identity
						
					INSERT INTO mp_email_messages 
					( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
					, message_sent,message_read )
					OUTPUT inserted.email_message_id INTO @notification_email_running_id
					SELECT 
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, REPLACE(REPLACE(@email_msg_subject, '##RFQNO##' ,CONVERT(VARCHAR(15),@rfq_id)), '#Manufacturer_Contact_name#',b.first_name + ' ' + b.last_name)  AS email_msg_subject 
							, REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@email_msg_body, '#Manufacturer_Contact_name#', b.first_name + ' ' + b.last_name) , '##RFQNO##' ,CONVERT(VARCHAR(15),@rfq_id)) , '#RfqEncryptedId#', CONVERT(VARCHAR(50),@RfqEncryptedId)) , '#Company_Name#',@company) ,'#Buyer_Name#',@ToBuyer) AS email_message_descr
							, @todays_date  AS email_message_date
							, @from_contact AS from_contact_id ---supplier contact id
							, @to_contacts  AS to_contact_id   ---buyer contact id
							, @ToBuyerEmail as to_email_id
							, 0 AS message_sent
							, 0 AS message_read
					FROM mp_contacts (NOLOCK) b 
					WHERE  b.contact_id = @from_contact
					AND b.is_notify_by_email = 1  /* M2-4789*/

					SET @identity = @@identity
					
					IF @identity> 0 or @identity_msg > 0
					BEGIN
						SET @processStatus = 'SUCCESS'
						
						INSERT INTO #tmp_notification (id, message_id)
						SELECT * FROM @notification_message_running_id
						
						INSERT INTO #tmp_notification (id, email_message_id)
						SELECT * FROM @notification_email_running_id

						SELECT a.processStatus	,b.email_message_id ,b.message_id	,rfq_id	,message_type_id, NULL message_subject	, NULL message_body	,email_message_subject
						, CASE WHEN b.email_message_id is null THEN a.message_subject  ELSE a.email_msg_body END AS  email_msg_body		,email_message_date	,rfq_contact_id	,from_username ,from_user_contactimage	,to_contact_id	,to_username
						,to_email_id		,message_sent 		,message_type
						FROM 
						(
							SELECT
								ROW_NUMBER() OVER (ORDER BY b.contact_id )  id
								, @processStatus processStatus 
								, @identity email_message_id 
								, @identity_msg message_id
								, @rfq_id rfq_id
								, @message_type_id message_type_id
								, @company + ' has accepted your purchase order for RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + '.' AS  message_subject 
								, @company + ' has accepted your purchase order for RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + '.' AS message_body
								, REPLACE(REPLACE(@email_msg_subject, '##RFQNO##' ,CONVERT(VARCHAR(15),@rfq_id)), '#Manufacturer_Contact_name#',b.first_name + ' ' + b.last_name) AS  email_message_subject 
								, REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@email_msg_body, '#Manufacturer_Contact_name#', b.first_name + ' ' + b.last_name) , '##RFQNO##' ,CONVERT(VARCHAR(15),@rfq_id)) , '#RfqEncryptedId#', CONVERT(VARCHAR(50),@RfqEncryptedId)) , '#Company_Name#',@company) ,'#Buyer_Name#',@ToBuyer) AS email_msg_body
								, @todays_date email_message_date
								, @to_contacts rfq_contact_id
								, b.first_name + ' ' + b.last_name AS from_username
								, @from_user_contactimage from_user_contactimage
								, @to_contacts AS to_contact_id   ---buyer contact id
								, @ToBuyer AS to_username
								, @ToBuyerEmail AS to_email_id
								, 0 AS message_sent
								, @message_type message_type
							FROM mp_contacts (NOLOCK) b 
							WHERE  b.contact_id = @from_contact
						)
						 a
						join #tmp_notification b on a.id = b.id

												
				END --1
				ELSE
				BEGIN
					SET @processStatus = 'FAILUER'

					SELECT 
						'FAILUER: No data for email notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' AS email_message_date, '' AS from_contact_id, '' AS from_username
						, '' AS from_user_contactimage, '' AS to_contact_id, '' AS to_username
						, '' AS to_email_id, 0 AS message_sent
						, '' AS message_subject , '' AS message_body
						, '' AS email_message_id , '' AS message_id
						, '' AS message_type
				END

				 
					 
		 END

		  /*M2-4826 and M2-4829*/
		 else if  @message_type in( 'BUYER_EMAIL_NOTIFICATION_FOR_PO_CANCELATION')   -- 245
		 BEGIN

					SELECT 
						@ToBuyer = b.first_name +' '+ b.last_name
						, @ToBuyerEmail = c.email
					FROM mp_contacts (NOLOCK) b 
					JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
					WHERE b.contact_id = @to_contacts

					SELECT @poMfgUniqueId  = Id , @poTransactionId   = TransactionId , @PONumber = PONumber
					,@RfqEncryptedId = RfqEncryptedId , @ReshapeUniqueId = ReshapeUniqueId
					FROM mpOrderManagement (NOLOCK) WHERE RfqId =  @rfq_id AND IsDeleted = 0
			 			
					UPDATE mpOrderManagement SET Reason = @RetractedReason  WHERE RfqId =  @rfq_id

					/*
					/* TBD : This status need to reset null or not Set ReshapePartStatus to null if PO cancelllation */
					UPDATE a
					SET	a.ReshapePartStatus = NULL
					FROM  mp_rfq_quote_items (NOLOCK) a
					JOIN  mp_rfq_quote_supplierquote  (NOLOCK) b on a.rfq_quote_SupplierQuote_id = b.rfq_quote_SupplierQuote_id 
					WHERE b.rfq_id = @rfq_id
					/* END Set ReshapePartStatus to null if PO cancelllation */

					/* here update isdeleted flag to 1 if PO cancelllation*/
					UPDATE a
					SET a.IsDeleted = 1
					FROM mpOrderManagementPartStatusChangeLogs(NOLOCK) a
					LEFT JOIN mpOrderManagement(NOLOCK) b on a.ReshapeUniqueId  = b.ReshapeUniqueId AND  a.IsDeleted = 0
					WHERE  a.SupplierContactId = @from_contact  
					AND a.ReshapeUniqueId = @ReshapeUniqueId
					/* here update isdeleted flag to 1 if PO cancelllation*/

					*/

					INSERT INTO mp_messages
					( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
					OUTPUT inserted.message_id INTO @notification_message_running_id
					SELECT 
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, @company + ' has canceled your purchase order for RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + '.'  AS  message_subject 
						    , @company + ' has canceled your purchase order for RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + '.' + '<br> <b>Reason</b> : ' + CAST(ISNULL(@CancelledReason,'') AS VARCHAR(2000)) + ' </br>' AS message_descr
							, @todays_date AS message_date
							, @from_contact AS from_contact_id ---supplier contact id
							, @to_contacts AS to_contact_id   ---buyer contact id
							, 0 AS message_sent
							, 0 AS message_read
							, 0 AS trash
							, 0 AS from_trash
							, 0 AS real_from_cont_id
							, 0 AS is_last_message
							, 0 AS message_status_id_recipient
							, 0 AS message_status_id_author
					
			
					set @identity_msg = @@identity
					 
						

					INSERT INTO mp_email_messages 
					( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
					, message_sent,message_read )
					OUTPUT inserted.email_message_id INTO @notification_email_running_id
					SELECT 
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, REPLACE(REPLACE(@email_msg_subject, '##ORDERNO##' ,CONVERT(VARCHAR(15),@PONumber)), '#Manufacturer_Contact_name#',b.first_name + ' ' + b.last_name)  AS email_msg_subject 
							, REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@email_msg_body, '#Manufacturer_Contact_name#', b.first_name + ' ' + b.last_name) , '##ORDERNO##' ,CONVERT(VARCHAR(100),@PONumber)) , '#RFQNO#', @rfq_guid) , '#Company_Name#',@company) ,'#Buyer_Name#',@ToBuyer) , '##CancelledReason##',ISNULL(@CancelledReason,''))  AS email_message_descr
							, @todays_date  AS email_message_date
							, @from_contact AS from_contact_id ---supplier contact id
							, @to_contacts  AS to_contact_id   ---buyer contact id
							, @ToBuyerEmail as to_email_id
							, 0 AS message_sent
							, 0 AS message_read
					FROM mp_contacts (NOLOCK) b 
					WHERE  b.contact_id = @from_contact
					AND b.is_notify_by_email = 1  /* M2-4789*/

					SET @identity = @@identity

					IF @identity> 0 or @identity_msg > 0
					BEGIN
						SET @processStatus = 'SUCCESS'
						
						INSERT INTO #tmp_notification (id, message_id)
						SELECT * FROM @notification_message_running_id
						
						INSERT INTO #tmp_notification (id, email_message_id)
						SELECT * FROM @notification_email_running_id
						 
						SELECT a.processStatus	,b.email_message_id ,b.message_id	,rfq_id	,message_type_id, NULL message_subject	, NULL message_body	,email_message_subject
						, CASE WHEN b.email_message_id is null THEN a.message_subject  ELSE a.email_msg_body END AS  email_msg_body		,email_message_date	,rfq_contact_id	,from_username ,from_user_contactimage	,to_contact_id	,to_username
						,to_email_id		,message_sent 		,message_type
						FROM 
						(
							SELECT
								ROW_NUMBER() OVER (ORDER BY b.contact_id )  id
								, @processStatus processStatus 
								, @identity email_message_id 
								, @identity_msg message_id
								, @rfq_id rfq_id
								, @message_type_id message_type_id
								, @company + ' has canceled your purchase order for RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + '.' AS  message_subject 
								, @company + ' has canceled your purchase order for RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + '.' AS message_body
								, REPLACE(REPLACE(@email_msg_subject, '##ORDERNO##' ,CONVERT(VARCHAR(15),@PONumber)), '#Manufacturer_Contact_name#',b.first_name + ' ' + b.last_name) AS  email_message_subject 
								, REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@email_msg_body, '#Manufacturer_Contact_name#', b.first_name + ' ' + b.last_name) , '##ORDERNO##' ,CONVERT(VARCHAR(15),@PONumber)) , '#RFQNO#', @rfq_guid) , '#Company_Name#',@company) ,'#Buyer_Name#',@ToBuyer) , '##CancelledReason##',ISNULL(@CancelledReason,''))  AS email_msg_body
								, @todays_date email_message_date
								, @to_contacts rfq_contact_id
								, b.first_name + ' ' + b.last_name AS from_username
								, @from_user_contactimage from_user_contactimage
								, @to_contacts AS to_contact_id   ---buyer contact id
								, @ToBuyer AS to_username
								, @ToBuyerEmail AS to_email_id
								, 0 AS message_sent
								, @message_type message_type
							FROM mp_contacts (NOLOCK) b 
							WHERE  b.contact_id = @from_contact
						)
						 a
						join #tmp_notification b on a.id = b.id

												
				END --1
				ELSE
				BEGIN
					SET @processStatus = 'FAILUER'

					SELECT 
						'FAILUER: No data for email notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' AS email_message_date, '' AS from_contact_id, '' AS from_username
						, '' AS from_user_contactimage, '' AS to_contact_id, '' AS to_username
						, '' AS to_email_id, 0 AS message_sent
						, '' AS message_subject , '' AS message_body
						, '' AS email_message_id , '' AS message_id
						, '' AS message_type
				END
					 
		 END

		  /*M2-4831*/
		 ELSE IF  @message_type in( 'BUYER_EMAIL_NOTIFICATION_RECEIVED_ON_PO_UPDATE_PART')   -- 247
		 BEGIN
		
					SELECT @poMfgUniqueId  = Id , @poTransactionId   = TransactionId , @PONumber = PONumber
					FROM mpOrderManagement (NOLOCK) WHERE RfqId =  @rfq_id AND IsDeleted = 0
				
					SELECT 
						@ToBuyer = b.first_name +' '+ b.last_name
					   ,@ToBuyerEmail = c.email
					FROM mp_contacts (NOLOCK) b 
					JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
					WHERE b.contact_id = @to_contacts
			 			
					INSERT INTO mp_messages
					( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
					OUTPUT inserted.message_id INTO @notification_message_running_id
					 SELECT 
							@rfq_id AS rfq_id
							, @message_type_id  AS message_type_id 
							, 'Status for [' + e.part_name + '] in Order Number # ' +CONVERT(VARCHAR(50),f.PONumber) + ' has updated!' AS  message_subject 
						    , 'Status for [' + e.part_name + '] in Order Number # ' +CONVERT(VARCHAR(50),f.PONumber) + ' has updated!' AS message_descr
							, @todays_date AS message_date
							, a.contact_id as from_contact_id
							, g.contact_id AS to_contact_id 
							, 0 AS message_sent
							, 0 AS message_read
							, 0 AS trash
							, 0 AS from_trash
							, 0 AS real_from_cont_id
							, 0 AS is_last_message
							, 0 AS message_status_id_recipient
							, 0 AS message_status_id_author
							FROM mp_rfq_quote_SupplierQuote(NOLOCK) a
							JOIN mp_rfq_quote_items( NOLOCK) b on a.rfq_quote_SupplierQuote_id = b.rfq_quote_SupplierQuote_id
							JOIN mp_rfq_part_quantity (NOLOCK) c on c.rfq_part_quantity_id = b.rfq_part_quantity_id
							JOIN mp_rfq_parts(NOLOCK) d on d.rfq_part_id = c.rfq_part_id
							JOIN mp_parts(NOLOCK) e on e.part_id = d.part_id
							JOIN  mpOrderManagement (NOLOCK) f on f.rfqid = a.rfq_id AND IsDeleted = 0
							JOIN mp_rfq(NOLOCK) g on g.rfq_id = f.rfqid
							where    a.rfq_id = @rfq_id
							and b.rfq_quote_items_id in ((select value from string_split(@quoted_quantity_id, ',')))

					SET @identity_msg = @@identity

									
					INSERT INTO mp_email_messages 
					( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
					, message_sent,message_read )
					OUTPUT inserted.email_message_id INTO @notification_email_running_id
					SELECT 
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, REPLACE(REPLACE(@email_msg_subject, '##ORDERNO##' ,CONVERT(VARCHAR(100),@PONumber)), '#Company_Name#',@company)  AS email_msg_subject 
							, REPLACE(REPLACE(REPLACE(@email_msg_body , '##ORDERNO##' ,CONVERT(VARCHAR(100),@PONumber)) , '#Company_Name#',@company) ,'#Buyer_Name#',@ToBuyer) AS email_message_descr
							, @todays_date  AS email_message_date
							, @from_contact AS from_contact_id ---supplier contact id
							, @to_contacts  AS to_contact_id   ---buyer contact id
							, @ToBuyerEmail as to_email_id
							, 0 AS message_sent
							, 0 AS message_read
					FROM mp_contacts (NOLOCK) b 
					WHERE  b.contact_id = @from_contact
					AND b.is_notify_by_email = 1  /* M2-4789*/

					SET @identity = @@identity
					 					
					IF @identity> 0 or @identity_msg > 0
					BEGIN
						SET @processStatus = 'SUCCESS'
						
						INSERT INTO #tmp_notification (id, message_id)
						SELECT * FROM @notification_message_running_id
						 
						INSERT INTO #tmp_notification (id, email_message_id)
						SELECT * FROM @notification_email_running_id

						SELECT a.processStatus	,b.email_message_id ,b.message_id	,rfq_id	,message_type_id, NULL message_subject	, NULL message_body	,email_message_subject
						, CASE WHEN b.email_message_id is null THEN a.message_subject  ELSE a.email_msg_body END AS  email_msg_body		,email_message_date	,rfq_contact_id	,from_username ,from_user_contactimage	,to_contact_id	,to_username
						,to_email_id		,message_sent 		,message_type
						FROM 
						(
							SELECT
								ROW_NUMBER() OVER (ORDER BY b.contact_id )  id
								, @processStatus processStatus 
								, @identity email_message_id 
								, @identity_msg message_id
								, @rfq_id rfq_id
								, @message_type_id message_type_id
								, @company + ' has updated the part statuses for order # '+CONVERT(VARCHAR(100),@PONumber) + '.' AS  message_subject 
								, @company + ' has updated the part statuses for order # '+CONVERT(VARCHAR(100),@PONumber) + '.' AS message_body
								, REPLACE(REPLACE(@email_msg_subject, '##ORDERNO##' ,CONVERT(VARCHAR(100),@PONumber)), '#Company_Name#', @company) AS  email_message_subject 
								, REPLACE(REPLACE(REPLACE(REPLACE(@email_msg_body, '#Manufacturer_Contact_name#', b.first_name + ' ' + b.last_name) , '##ORDERNO##' ,CONVERT(VARCHAR(100),@PONumber)) , '#Company_Name#',@company) ,'#Buyer_Name#',@ToBuyer) AS email_msg_body
								, @todays_date email_message_date
								, @to_contacts rfq_contact_id
								, b.first_name + ' ' + b.last_name AS from_username
								, @from_user_contactimage from_user_contactimage
								, @to_contacts AS to_contact_id   ---buyer contact id
								, @ToBuyer AS to_username
								, @ToBuyerEmail AS to_email_id
								, 0 AS message_sent
								, @message_type message_type
							FROM mp_contacts (NOLOCK) b 
							WHERE  b.contact_id = @from_contact
						)
						 a
						join #tmp_notification b on a.id = b.id

												
				END --1
				ELSE
				BEGIN
					SET @processStatus = 'FAILUER'

					SELECT 
						'FAILUER: No data for email notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' AS email_message_date, '' AS from_contact_id, '' AS from_username
						, '' AS from_user_contactimage, '' AS to_contact_id, '' AS to_username
						, '' AS to_email_id, 0 AS message_sent
						, '' AS message_subject , '' AS message_body
						, '' AS email_message_id , '' AS message_id
						, '' AS message_type
				END

				 
					 
		 END

		 /*M2-4948*/ 
		 ELSE IF  @message_type in( 'BUYER_EMAIL_NOTIFICATION_RECEIVED_ON_NEW_INVOICE')   -- 249
		 BEGIN
				    SELECT @poMfgUniqueId  = Id , @poTransactionId   = TransactionId , @PONumber = PONumber
					FROM mpOrderManagement (NOLOCK) WHERE RfqId =  @rfq_id AND IsDeleted = 0
			
					SELECT 
						@ToBuyer = b.first_name +' '+ b.last_name
					   ,@ToBuyerEmail = c.email
					FROM mp_contacts (NOLOCK) b 
					JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
					WHERE b.contact_id = @to_contacts
			 			
					
					INSERT INTO mp_messages
					( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
					OUTPUT inserted.message_id INTO @notification_message_running_id
					SELECT 
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, a.first_name + ' ' + a.last_name + ' has sent you an invoice for RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + '. <a href="'+ CONVERT(VARCHAR(MAX),@ViewInvoice) + '">View Invoice</a>'   AS  message_subject 
						    , a.first_name + ' ' + a.last_name + ' has sent you an invoice for RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + '. <a href="'+ CONVERT(VARCHAR(MAX),@ViewInvoice) + '">View Invoice</a>'   AS  message_descr
							, @todays_date AS message_date
							, @from_contact AS from_contact_id ---supplier contact id
							, @to_contacts AS to_contact_id   ---buyer contact id
							, 0 AS message_sent
							, 0 AS message_read
							, 0 AS trash
							, 0 AS from_trash
							, 0 AS real_from_cont_id
							, 0 AS is_last_message
							, 0 AS message_status_id_recipient
							, 0 AS message_status_id_author
						FROM mp_contacts(NOLOCK) a
						WHERE contact_id = @from_contact

					SET @identity_msg = @@identity
					--declare @InvNumber varchar (100)='INV-01',@InvAmount varchar (100)='199.99', @InvDueDate varchar(50) = '2023-04-07'
								
					INSERT INTO mp_email_messages 
					( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
					, message_sent,message_read )
					OUTPUT inserted.email_message_id INTO @notification_email_running_id
					SELECT 
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, REPLACE(@email_msg_subject, '##ORDERNO##' ,CONVERT(VARCHAR(100),@PONumber))  AS email_msg_subject 
							, REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@email_msg_body, '##INVOICENUMBER##' ,CONVERT(VARCHAR(100),@InvNumber)),' ##INVOICEAMOUNT##',CONVERT(VARCHAR(100),@InvAmount)),'##INVOICEDATE##',CONVERT(VARCHAR(100),@InvDueDate)),'#Buyer_Name#',@ToBuyer),'#VIEWINVOICE#',@ViewInvoice) ,'#STRIPELINK#',@ViewInvoice) AS email_message_descr
							, @todays_date  AS email_message_date
							, @from_contact AS from_contact_id ---supplier contact id
							, @to_contacts  AS to_contact_id   ---buyer contact id
							, @ToBuyerEmail as to_email_id
							, 0 AS message_sent
							, 0 AS message_read
					FROM mp_contacts (NOLOCK) b 
					WHERE  b.contact_id = @to_contacts
					AND b.is_notify_by_email = 1  /* M2-4789*/

					SET @identity = @@identity
					 					
					IF @identity> 0 or @identity_msg > 0
					BEGIN
						SET @processStatus = 'SUCCESS'
						
						INSERT INTO #tmp_notification (id, message_id)
						SELECT * FROM @notification_message_running_id
						 
						INSERT INTO #tmp_notification (id, email_message_id)
						SELECT * FROM @notification_email_running_id

						SELECT a.processStatus	,b.email_message_id ,b.message_id	,rfq_id	,message_type_id, NULL message_subject	, NULL message_body	,email_message_subject
						, CASE WHEN b.email_message_id is null THEN a.message_subject  ELSE a.email_msg_body END AS  email_msg_body		,email_message_date	,rfq_contact_id	,from_username ,from_user_contactimage	,to_contact_id	,to_username
						,to_email_id		,message_sent 		,message_type
						FROM 
						(
							SELECT
								ROW_NUMBER() OVER (ORDER BY a.contact_id )  id
								, @processStatus processStatus 
								, @identity email_message_id 
								, @identity_msg message_id
								, @rfq_id rfq_id
								, @message_type_id message_type_id
								, a.first_name + ' ' + a.last_name + ' has sent you an invoice for RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + '. View Invoice' AS  message_subject 
								, a.first_name + ' ' + a.last_name + ' has sent you an invoice for RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + '. View Invoice' AS message_body
								, REPLACE(@email_msg_subject, '##ORDERNO##' ,CONVERT(VARCHAR(100),@PONumber)) AS  email_message_subject 
								, REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@email_msg_body, '##INVOICENUMBER##' ,CONVERT(VARCHAR(100),@InvNumber)),' ##INVOICEAMOUNT##',CONVERT(VARCHAR(100),@InvAmount)),'##INVOICEDATE##',CONVERT(VARCHAR(100),@InvDueDate)),'#Buyer_Name#',@ToBuyer) ,'#VIEWINVOICE#',@ViewInvoice),'#STRIPELINK#',@ViewInvoice) AS email_msg_body
								, @todays_date email_message_date
								, @to_contacts rfq_contact_id
								, a.first_name + ' ' + a.last_name AS from_username
								, NULL from_user_contactimage
								, @to_contacts AS to_contact_id   ---buyer contact id
								, @ToBuyer AS to_username
								, @ToBuyerEmail AS to_email_id
								, 0 AS message_sent
								, @message_type message_type
							FROM mp_contacts (NOLOCK) a  
							WHERE  a.contact_id = @from_contact
						)
						 a
						join #tmp_notification b on a.id = b.id

												
				END --1
					ELSE
					BEGIN
						SET @processStatus = 'FAILUER'

						SELECT 
							'FAILUER: No data for email notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
							, '' AS email_message_date, '' AS from_contact_id, '' AS from_username
							, '' AS from_user_contactimage, '' AS to_contact_id, '' AS to_username
							, '' AS to_email_id, 0 AS message_sent
							, '' AS message_subject , '' AS message_body
							, '' AS email_message_id , '' AS message_id
							, '' AS message_type
					END

				 
					 
		 END
		  /*M2-4900*/
		 ELSE IF  @message_type in( 'MANUFACTURER_EMAIL_NOTIFICATION_ON_EDITED_PO')   -- 250
		 BEGIN
		
				    SELECT @poMfgUniqueId  = Id , @poTransactionId   = TransactionId , @PONumber = PONumber
					FROM mpOrderManagement (NOLOCK) WHERE RfqId =  @rfq_id AND IsDeleted = 0
			
					SELECT 
						@ToBuyer = b.first_name +' '+ b.last_name
					   ,@ToBuyerEmail = c.email
					FROM mp_contacts (NOLOCK) b 
					JOIN aspnetusers (NOLOCK) c ON b.user_id = c.id
					WHERE b.contact_id = @to_contacts
			 		
					INSERT INTO mp_messages
					( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
					OUTPUT inserted.message_id INTO @notification_message_running_id
					SELECT  
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, 'PO # '+CONVERT(VARCHAR(50),@PONumber) + ' for RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + ' has been updated' AS  message_subject 
						    , 'PO # '+CONVERT(VARCHAR(50),@PONumber) + ' for RFQ # '+CONVERT(VARCHAR(50),@rfq_id) + ' has been updated' AS message_descr
							, @todays_date AS message_date
							, @from_contact AS from_contact_id   ---- buyer contact id 
							, @to_contacts  AS to_contact_id     ---- supplier contact id
							, 0 AS message_sent
							, 0 AS message_read
							, 0 AS trash
							, 0 AS from_trash
							, 0 AS real_from_cont_id
							, 0 AS is_last_message
							, 0 AS message_status_id_recipient
							, 0 AS message_status_id_author

					SET @identity_msg = @@identity
								
					INSERT INTO mp_email_messages 
					( rfq_id, message_type_id, email_message_subject, email_message_descr, email_message_date,from_cont ,to_cont, to_email
					, message_sent,message_read )
					OUTPUT inserted.email_message_id INTO @notification_email_running_id
					SELECT 
							@rfq_id rfq_id
							, @message_type_id  message_type_id 
							, REPLACE(REPLACE(@email_msg_subject, '##ORDERNO##' ,CONVERT(VARCHAR(100),@PONumber)),'##RFQNO##', CONVERT(VARCHAR(100),@rfq_id)) AS email_msg_subject 
							, REPLACE(REPLACE(REPLACE(@email_msg_body , '##ORDERNO##' ,CONVERT(VARCHAR(100),@PONumber)) ,'#Manufacturer_Contact_name#',a.first_name +' '+ a.last_name), '#Company_Name#', @company) AS email_message_descr
							, @todays_date  AS email_message_date
							, @from_contact AS from_contact_id ---buyer contact id 
							, @to_contacts  AS to_contact_id   ---supplier contact id
							, @ToBuyerEmail as to_email_id
							, 0 AS message_sent
							, 0 AS message_read
					FROM mp_contacts (NOLOCK) a 
					WHERE  a.contact_id = @to_contacts
					AND a.is_notify_by_email = 1  /* M2-4789*/

				 	SET @identity = @@identity
					
					IF @identity> 0 or @identity_msg > 0
					BEGIN
						SET @processStatus = 'SUCCESS'
						
						INSERT INTO #tmp_notification (id, message_id)
						SELECT * FROM @notification_message_running_id
						 
						INSERT INTO #tmp_notification (id, email_message_id)
						SELECT * FROM @notification_email_running_id
						 
						SELECT a.processStatus	,b.email_message_id ,b.message_id	,rfq_id	,message_type_id, NULL message_subject	, NULL message_body	,email_message_subject
						, CASE WHEN b.email_message_id is null THEN a.message_subject  ELSE a.email_msg_body END AS  email_msg_body		,email_message_date	,rfq_contact_id	,from_username ,from_user_contactimage	,to_contact_id	,to_username
						,to_email_id		,message_sent 		,message_type
						FROM 
						(
							SELECT
								ROW_NUMBER() OVER (ORDER BY a.contact_id )  id
								, @processStatus processStatus 
								, @identity email_message_id 
								, @identity_msg message_id
								, @rfq_id rfq_id
								, @message_type_id message_type_id
								, REPLACE(REPLACE(@msg_subject, '##ORDERNO##' ,CONVERT(VARCHAR(100),@PONumber)),'##RFQNO##', CONVERT(VARCHAR(100),@rfq_id))  AS  message_subject 
								, REPLACE(REPLACE(@msg_body, '##ORDERNO##' ,CONVERT(VARCHAR(100),@PONumber)),'##RFQNO##', CONVERT(VARCHAR(100),@rfq_id))  AS message_body
								, REPLACE(REPLACE(@email_msg_subject, '##ORDERNO##' ,CONVERT(VARCHAR(100),@PONumber)),'##RFQNO##', CONVERT(VARCHAR(100),@rfq_id)) AS  email_message_subject 
								, REPLACE(REPLACE(REPLACE(@email_msg_body , '##ORDERNO##' ,CONVERT(VARCHAR(100),@PONumber)) ,'#Manufacturer_Contact_name#',a.first_name +' '+ a.last_name), '#Company_Name#', @company) AS email_msg_body
								, @todays_date email_message_date
								, @to_contacts rfq_contact_id
								, a.first_name + ' ' + a.last_name AS from_username
								, NULL from_user_contactimage
								, @to_contacts AS to_contact_id   ---buyer contact id
								, @ToBuyer AS to_username
								, @ToBuyerEmail AS to_email_id
								, 0 AS message_sent
								, @message_type message_type
							FROM mp_contacts (NOLOCK) a  
							WHERE  a.contact_id = @to_contacts
						)
						 a
						join #tmp_notification b on a.id = b.id

												
				END --1
					ELSE
					BEGIN
						SET @processStatus = 'FAILUER'

						SELECT 
							'FAILUER: No data for email notification!'  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
							, '' AS email_message_date, '' AS from_contact_id, '' AS from_username
							, '' AS from_user_contactimage, '' AS to_contact_id, '' AS to_username
							, '' AS to_email_id, 0 AS message_sent
							, '' AS message_subject , '' AS message_body
							, '' AS email_message_id , '' AS message_id
							, '' AS message_type
					END

				 
					 
		 END
		  /*M2-5023*/ 
		 ELSE IF  @message_type in( 'BUYER_NOTIFICATION_AFTER_AWARD_DATE_PASSES')   -- 251
		 BEGIN
					/* Fetch records into temp table */
					SELECT DISTINCT a.rfq_id, a.contact_id
					INTO #tmpPassRFQAwardDateList
					FROM mp_rfq(nolock) a
					JOIN mp_rfq_quote_SupplierQuote (NOLOCK) b on a.rfq_id = b.rfq_id
					JOIN mp_rfq_quote_items (NOLOCK) c ON c.rfq_quote_SupplierQuote_id = b.rfq_quote_SupplierQuote_id
					JOIN mp_rfq_part_quantity (NOLOCK) d ON d.rfq_part_id = c.rfq_part_id 
							AND c.rfq_part_quantity_id = d.rfq_part_quantity_id
					JOIN mp_contacts(NOLOCK) e on e.contact_id = a.contact_id
					WHERE a.contact_id = @to_contacts
					AND b.is_quote_submitted = 1
					AND a.rfq_status_id = 3
					----AND award_date BETWEEN  e.BuyerLastAwardingNotificationDate  AND DATEADD(DAY,DATEDIFF(DAY, 0, GETUTCDATE()),CAST('23:59:59.000' AS DATETIME)) 
					AND CAST(award_date AS DATE) BETWEEN  CAST(e.BuyerLastAwardingNotificationDate AS DATE)
									AND CAST(GETUTCDATE() AS DATE) 
					AND NOT EXISTS 
					( 
						SELECT b.rfq_id 
						FROM mp_messages(NOLOCK) b
						WHERE b.rfq_id = a.rfq_id
						AND  b.message_type_id = 251
						AND b.to_cont = a.contact_id
						
					)


					INSERT INTO mp_messages
					( rfq_id, message_type_id, message_subject, message_descr, message_date,from_cont ,to_cont, message_sent,message_read ,trash, from_trash, real_from_cont_id, is_last_message , message_status_id_recipient , message_status_id_author)
					OUTPUT inserted.message_id INTO @notification_message_running_id
					SELECT DISTINCT
					a.rfq_id rfq_id
					, 251  message_type_id 
					, 'Time to award! RFQ # ' + CONVERT(VARCHAR(15),a.rfq_id)  + ' has reached its award date.' AS message_subject
				    , 'Time to award! RFQ # ' + CONVERT(VARCHAR(15),a.rfq_id)  + ' has reached its award date. Please update the award status of this RFQ.' AS   message_descr
					, @todays_date AS message_date
					, NULL from_contact_id 
					, a.contact_id as to_contact_id 
					, 0 AS message_sent
					, 0 AS message_read
					, 0 AS trash
					, 0 AS from_trash
					, 0 AS real_from_cont_id
					, 0 AS is_last_message
					, 0 AS message_status_id_recipient
					, 0 AS message_status_id_author
					FROM #tmpPassRFQAwardDateList a

					SET @identity_msg = @@identity
														 					
					IF  @identity_msg > 0
					BEGIN
						SET @processStatus = 'SUCCESS'

						UPDATE mp_contacts
						SET BuyerLastAwardingNotificationDate = @todays_date
						FROM mp_contacts(NOLOCK) 
						WHERE contact_id = @to_contacts

						
						INSERT INTO #tmp_notification (id, message_id)
						SELECT * FROM @notification_message_running_id
						 						

						SELECT a.processStatus	,b.email_message_id ,b.message_id	,rfq_id	,message_type_id,  message_subject	,  message_body	,email_message_subject
						,    email_msg_body		,email_message_date	,rfq_contact_id	,from_username ,from_user_contactimage	,to_contact_id	,to_username
						,to_email_id		,message_sent 		,message_type
						FROM 
						(
							SELECT
								ROW_NUMBER() OVER (ORDER BY a.contact_id )  id
								, @processStatus processStatus 
								, @identity email_message_id 
								, @identity_msg message_id
								, b.rfq_id rfq_id
								, @message_type_id message_type_id
								, 'Time to award! RFQ # ' + CONVERT(VARCHAR(15),b.rfq_id)  + ' has reached its award date.' AS  message_subject 
								, 'Time to award! RFQ # ' + CONVERT(VARCHAR(15),b.rfq_id)  + ' has reached its award date. Please update the award status of this RFQ.' AS message_body
								, 'Time to award! RFQ # ' + CONVERT(VARCHAR(15),b.rfq_id)  + ' has reached its award date.' AS  email_message_subject 
								, 'Time to award! RFQ # ' + CONVERT(VARCHAR(15),b.rfq_id)  + ' has reached its award date. Please update the award status of this RFQ.' AS email_msg_body
								, @todays_date email_message_date
								, @to_contacts rfq_contact_id
								, a.first_name + ' ' + a.last_name AS from_username
								, NULL from_user_contactimage
								, @to_contacts AS to_contact_id   ---buyer contact id
								, a.first_name + ' ' + a.last_name  AS to_username
								, c.Email AS to_email_id
								, 0 AS message_sent
								, @message_type message_type
							FROM mp_contacts (NOLOCK) a  
							JOIN #tmpPassRFQAwardDateList b on a.contact_id = b.contact_id
							JOIN aspnetusers (NOLOCK) c on a.[user_id] = c.id 
							WHERE  a.contact_id = @to_contacts
						)
						 a
						join #tmp_notification b on a.id = b.id

												
				END --1
					ELSE
					BEGIN
						
						---- here if no notification records getting than still sending SUCCESS to API
						set @processStatus = 'SUCCESS'
						select 
						@processStatus processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' as email_message_date, '' as from_contact_id, '' as from_username
						, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
						, '' as to_email_id, 0 as message_sent
						, '' as message_subject , '' as message_body
						, '' email_message_id , '' message_id
						, ''  message_type


					END
					 
		 END
		 ELSE IF @message_type = 'user.verification'
		 BEGIN
		 	----- Retun data into JSON format 
		
			SELECT REPLACE(REPLACE(JsonData,'[',''),']','') AS ResponseJSON
			FROM 
			(
				SELECT 
				(
					SELECT 
						  app
						, event_type
						, [user_id]
						, email_address   
						, (SELECT  EmailVerifyParam
							FROM #tmpJsonInputParameters FOR JSON AUTO 
						  ) AS template_data  
					FROM #tmpJsonInputParameters FOR JSON AUTO , WITHOUT_ARRAY_WRAPPER 
				) AS JsonData
			) ResponseJSON
			 
		 END --1
		 --ELSE 
		 --BEGIN
			--SET @processStatus = 'FAILUER'
				 
			--SELECT 
			--		@processStatus processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
			--		, '' as email_message_date, '' as from_contact_id, '' as from_username
			--		, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
			--		, '' as to_email_id, 0 as message_sent
			--		, '' as message_subject , '' as message_body
			--		, '' email_message_id , '' message_id
			--		, ''  message_type
		 --END  
	     ELSE IF @message_type = 'ApprovedEmail'
	     BEGIN 
			-- FirstName ,LinkToTheProfile
			------- Retun data into JSON format 
			SELECT REPLACE(REPLACE(JsonData,'[',''),']','') AS ResponseJSON
			FROM 
			(
					SELECT  
					(
							SELECT 
								  app
								, event_type
								, [user_id]
								, email_address   
								, (SELECT  FirstName,LinkToTheProfile
									FROM #tmpJsonInputParameters FOR JSON AUTO  
								  ) AS template_data   
							FROM #tmpJsonInputParameters FOR JSON AUTO , WITHOUT_ARRAY_WRAPPER 
					) AS JsonData
			) ResponseJSON

		 
		 END

		 ELSE IF @message_type IN ( 'BuyerPressedCallOnProfileEmail' ,'BuyerPressedCallOnProfileEmail','BuyerViewedYourProfileEmail')
	     BEGIN 
		 
			-- Supplier_Name ,LeadStreamDeepLink,SourcingAdvisor,SourcingAdvisorDesignation,SourcingAdvisorNo
			----- Retun data into JSON format
			SELECT REPLACE(REPLACE(JsonData,'[',''),']','') AS ResponseJSON
			FROM 
			(
				SELECT 
				(
					SELECT 
						  app
						, event_type
						, [user_id]
						, email_address   
						,( SELECT 
							 a.first_name + ' ' + a.last_name			AS SourcingAdvisor
							, a.title									AS SourcingAdvisorDesignation
							, CAST( b.PhoneNumber AS VARCHAR(100))		AS SourcingAdvisorNo 
							, CAST( SourcingAdvisor.Supplier_Name		AS VARCHAR(100)) AS [Supplier_Name]
							, CAST( SourcingAdvisor.LeadStreamDeepLink  AS VARCHAR(100)) AS [LeadStreamDeepLink]  
							FROM mp_contacts (NOLOCK) a
							JOIN 
							(   
								SELECT 
								  c.Assigned_SourcingAdvisor  
								, a.FirstName AS [Supplier_Name] 
								, a.LeadStreamDeepLink
								FROM #tmpJsonInputParameters  a
								JOIN mp_contacts(NOLOCK) b ON b.contact_id = a.[user_id]
								JOIN mp_companies(NOLOCK) c ON c.company_id = b.company_id
							) SourcingAdvisor  ON SourcingAdvisor.Assigned_SourcingAdvisor = a.contact_id
							JOIN AspNetUsers(NOLOCK) b on b.id = a.[user_id] FOR JSON AUTO  
						) AS template_data
					FROM #tmpJsonInputParameters FOR JSON AUTO , WITHOUT_ARRAY_WRAPPER 
				) AS JsonData
			) ResponseJSON
			 
			 
		 END

	 



	end try
	begin catch

		select 
						'FAILUER: '+ error_message()  processStatus, '' rfq_id, ''  message_type_id, '' email_msg_subject, '' email_msg_body 
						, '' as email_message_date, '' as from_contact_id, '' as from_username
						, '' as from_user_contactimage, '' as to_contact_id, '' as to_username
						, '' as to_email_id, 0 as message_sent
						, '' as message_subject , '' as message_body
						, '' email_message_id , '' message_id
						, ''  message_type

	end catch


	drop table if exists #list_of_admin_contacts_as_per_companies_for_email
	drop table if exists #companies_for_rfq
	drop table if exists #list_of_to_contacts_for_messages_notification
	drop table if exists #tmp_notification
	drop table if exists #tmp_part_awarded
	drop table if exists #list_of_to_contacts_for_messages_notification1
	drop table if exists #list_of_to_contacts_for_messages_notification_freemsg
	drop table if exists #MessageFileTable 
	drop table if exists #SpecialFileIdTable
	drop table if exists #RfqPreferredLocations
	drop table if exists #RfqPartCapabilities
	drop table if exists #SupplierManufacturingLocation
	drop table if exists #SupplierWithMatchingCapabilitiesAndManufacturingLocation
	drop table if exists #tmpPassRFQAwardDateList



end
GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contacts informations in a company(either it will be a buyer/Supplier/any other contacts created by Admin buyer and supplier etc.)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[contact_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'unique identifer of a contact ', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'contact_id';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[company_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'linked company id in mp_company', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'company_id';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[language_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Default to 3- English', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'language_id';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[title].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Title like: Mr., Monsieur, Signor etc', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'title';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[first_name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'First name of the contact', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'first_name';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[last_name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'last name of the contact', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'last_name';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[contact_function].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contact''s function like: Vice President, General Manager,Directeur general,Engineer,Marketing Manager,Commercial', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'contact_function';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[is_buyer].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'1 -  Contact will act as buyer, 0 - Contact will act as Supplier', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'is_buyer';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[is_admin].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Flag = 1 when the contact is administrator for the company', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'is_admin';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[created_on].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'time stamp when record created', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'created_on';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[modified_on].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'time stamp when record modified', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'modified_on';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[address_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'linked address id in mp_address', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'address_id';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[record_origin_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'linked to mp_system_parameters.id', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'record_origin_id';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[incoterm_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'linked to mp_incoterms.id', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'incoterm_id';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[comments].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Freeform field for buyer / supplier where they can add a personal comment.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'comments';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[is_notify_by_email].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'1- Yes or 0 - No are the options, contact will be notified by email  depending on this option', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'is_notify_by_email';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[is_mail_in_HTML].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Preferred email format', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'is_mail_in_HTML';


GO
PRINT N'Creating Extended Property [dbo].[mp_contacts].[user_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'this is the id column data from AspNetUsers Table', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_contacts', @level2type = N'COLUMN', @level2name = N'user_id';


GO
PRINT N'Creating Extended Property [dbo].[mp_rfq_parts].[quantity_unit_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'linked id  (matching ID in mp_system_parameters) for quantity - Each, Piece, dozen, etc.  ', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mp_rfq_parts', @level2type = N'COLUMN', @level2name = N'quantity_unit_id';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_DataSync_SupplierProfileDetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_DataSync_SupplierProfileDetails]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_RfqList_Supplier]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_RfqList_Supplier]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_saved_search]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_saved_search]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_daily_summary_for_supplier_saved_search]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_daily_summary_for_supplier_saved_search]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_export_mfg2zoho_rfq_Quot]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_export_mfg2zoho_rfq_Quot]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_gateway_subscription_get_supplier_payment_method]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_gateway_subscription_get_supplier_payment_method]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_gateway_subscription_get_supplier_plan]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_gateway_subscription_get_supplier_plan]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_ActionTrackerManufacturerBadgeCount]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_ActionTrackerManufacturerBadgeCount]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_ActionTrackerManufacturerNewProfilePendingCount]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_ActionTrackerManufacturerNewProfilePendingCount]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_buyer_dashboard_suppliers_for_rating]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_buyer_dashboard_suppliers_for_rating]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_Buyer_MyCompanyRFQs]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_Buyer_MyCompanyRFQs]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_Buyer_MyQuotes]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_Buyer_MyQuotes]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_buyer_open_rfq_details]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_buyer_open_rfq_details]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_buyer_open_rfqs]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_buyer_open_rfqs]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_buyer_open_rfqs_count]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_buyer_open_rfqs_count]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_BuyerQuotes]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_BuyerQuotes]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_BuyerRfqList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_BuyerRfqList]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_CommunityLikedManufacturers]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_CommunityLikedManufacturers]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_distribution_expanded_list]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_distribution_expanded_list]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_DistributionCount]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_DistributionCount]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_DistributionDetailList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_DistributionDetailList]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_geographiclocation_rfq_count]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_geographiclocation_rfq_count]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_graph_geographic_location]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_graph_geographic_location]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_GrowthPackageRfqAccessInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_GrowthPackageRfqAccessInfo]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_individual]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_individual]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_lead_stream]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_lead_stream]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_leadstream_dashboard]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_leadstream_dashboard]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_leadstream_monthlyreport]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_leadstream_monthlyreport]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_LeadstreamProfileViewedWeekly]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_LeadstreamProfileViewedWeekly]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_ListOfBuyersManufacturersForNewMessage]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_ListOfBuyersManufacturersForNewMessage]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_ListOfQuotedRfqsForCommunity]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_ListOfQuotedRfqsForCommunity]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_magic_leads]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_magic_leads]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_ManufacturerContacts]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_ManufacturerContacts]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_MessagesIds]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_MessagesIds]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_MessageThreads]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_MessageThreads]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_MFGPulseXML]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_MFGPulseXML]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_MQSContactList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_MQSContactList]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_ms_bookings_url]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_ms_bookings_url]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_my_company_rfq_buyer_list]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_my_company_rfq_buyer_list]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_NonPurchaseOrderAwardModalSupplierList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_NonPurchaseOrderAwardModalSupplierList]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_notification]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_notification]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_price_award_pattern]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_price_award_pattern]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_profileview_monthlyreport]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_profileview_monthlyreport]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_qms_next_invoice_seq_no]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_qms_next_invoice_seq_no]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_qms_quoter_info]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_qms_quoter_info]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_QMSContactList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_QMSContactList]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_Reshape_POOrderList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_Reshape_POOrderList]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_Reshape_RfqPODetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_Reshape_RfqPODetails]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_ReshapeUserRegistrationDetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_ReshapeUserRegistrationDetails]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_rfq_status_to_open_drawer]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_rfq_status_to_open_drawer]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_RfqCount_Buyer]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_RfqCount_Buyer]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_RfqCount_Supplier]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_RfqCount_Supplier]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_RfqList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_RfqList]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_RfqList_Buyer]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_RfqList_Buyer]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_RfqPODetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_RfqPODetails]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_rpt_BuyerswithPartFiles]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_rpt_BuyerswithPartFiles]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_rpt_rfqs_by_month]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_rpt_rfqs_by_month]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_rpt_SupplierContactInformation]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_rpt_SupplierContactInformation]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_rpt_SupplierLeadStreamActivity]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_rpt_SupplierLeadStreamActivity]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_rpt_SupplierPerformance]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_rpt_SupplierPerformance]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_SimpleRfq]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_SimpleRfq]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_sourcing_adviser_details]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_sourcing_adviser_details]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_SpotLightManufacturersList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_SpotLightManufacturersList]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_subscriptions_report]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_subscriptions_report]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_supplier_mycompanyrfqs_list]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_supplier_mycompanyrfqs_list]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_supplier_myrfqs_list]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_supplier_myrfqs_list]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_supplier_requested_buyer_summary]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_supplier_requested_buyer_summary]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_supplier_saved_search_data]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_supplier_saved_search_data]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_supplier_saved_search_filters]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_supplier_saved_search_filters]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_SupplierDetailList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_SupplierDetailList]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_SupplierDetailListNew]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_SupplierDetailListNew]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_SupplierNDAStatus]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_SupplierNDAStatus]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_supplierpublicprofile]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_supplierpublicprofile]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_SupplierRfqCount]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_SupplierRfqCount]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_upgrade_email_details]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_upgrade_email_details]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_vision_action_tracker]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_vision_action_tracker]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_Vision_ActionTrackerRfq_ManufacturerInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_Vision_ActionTrackerRfq_ManufacturerInfo]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_VisionContacts]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_VisionContacts]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_VisionSuppliers]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_VisionSuppliers]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_ZOHO_records]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_ZOHO_records]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get-supplier-awarded-parts]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get-supplier-awarded-parts]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_mfgzoho_identified_duplicate_address]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_mfgzoho_identified_duplicate_address]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_mfgzoho_rfq_supplier_quote_create_update_sink]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_mfgzoho_rfq_supplier_quote_create_update_sink]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_mfgzoho_set_account_sink_down]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_mfgzoho_set_account_sink_down]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_mfgzoho_set_account_update_sink_up]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_mfgzoho_set_account_update_sink_up]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_mfgzoho_set_immediate_company_paid_status_sync_up]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_mfgzoho_set_immediate_company_paid_status_sync_up]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_mfgzoho_set_userprofile_sink_down]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_mfgzoho_set_userprofile_sink_down]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_mfgzoho_set_userprofile_sink_up]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_mfgzoho_set_userprofile_sink_up]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_mfgzoho_set_userprofile_sync_up]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_mfgzoho_set_userprofile_sync_up]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_contact_emailNotification]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_contact_emailNotification]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_DataSync_Create_MarketplaceToHubSpot_RFQs]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_DataSync_Create_MarketplaceToHubSpot_RFQs]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_DataSync_Update_MarketplaceToHubSpot_RFQs]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_DataSync_Update_MarketplaceToHubSpot_RFQs]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_date_range_btw_rfq_release_closed]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_date_range_btw_rfq_release_closed]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_EmailRfqMissingInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_EmailRfqMissingInfo]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_Hubspot_UpdateContactEmail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_Hubspot_UpdateContactEmail]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_LeadStreamForDirectRfqs]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_LeadStreamForDirectRfqs]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_magic_leads]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_magic_leads]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_marked_action_tracker_user_activity]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_marked_action_tracker_user_activity]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_MFGRfqXML]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_MFGRfqXML]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_nps_rating_message]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_nps_rating_message]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_rfq_message_association]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_rfq_message_association]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_rfq_quotestatus]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_rfq_quotestatus]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_rfq_release]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_rfq_release]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_SupplierCommunityRatings]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_SupplierCommunityRatings]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_TransferRFQ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_TransferRFQ]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_users_TermAcceptances_flag]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_users_TermAcceptances_flag]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_XML_SupplierProfile_NewProfileChanges]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_XML_SupplierProfile_NewProfileChanges]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_XML_SupplierProfile_NewUsers]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_XML_SupplierProfile_NewUsers]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_XML_SupplierProfile_OneTime]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_XML_SupplierProfile_OneTime]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_stripe_get_email_subscription_info]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_stripe_get_email_subscription_info]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_stripe_get_supplier_payment_method]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_stripe_get_supplier_payment_method]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_stripe_get_supplier_subscription_invoices]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_stripe_get_supplier_subscription_invoices]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_stripe_get_supplier_subscription_plan]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_stripe_get_supplier_subscription_plan]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_CompanySubscriptionDetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_CompanySubscriptionDetails]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_CurrentlyActiveStripeSubscriptions]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_CurrentlyActiveStripeSubscriptions]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_Buyer_ActionTracker_Untouched_Directory_Messages_Count]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_Buyer_ActionTracker_Untouched_Directory_Messages_Count]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_lead_emails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_lead_emails]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_vision_action_tracker_untouched_directory_messages_count]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_vision_action_tracker_untouched_directory_messages_count]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_buyer_rfq_details_for_award_dashboard]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_buyer_rfq_details_for_award_dashboard]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_ReshapeRFQPartDetailFiles]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_ReshapeRFQPartDetailFiles]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_rfq_allow_quoting_status]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_rfq_allow_quoting_status]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_RFQ_PartsQuantity_Quote]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_RFQ_PartsQuantity_Quote]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_RFQDetailsFilesWithCount]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_RFQDetailsFilesWithCount]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_RFQFiles]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_RFQFiles]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_RfqPartQuoteDetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_RfqPartQuoteDetails]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_mp_set_CloneRFQ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_mp_set_CloneRFQ]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_Reshape_UpdatePOPartStatus]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_Reshape_UpdatePOPartStatus]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_Reshape_UpdateRFQPartFilesProcessed]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_Reshape_UpdateRFQPartFilesProcessed]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_upload_part_files_to_S3_bucket]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_upload_part_files_to_S3_bucket]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_buyer_dashboard_rfq_for_awarding]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_buyer_dashboard_rfq_for_awarding]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_buyer_dashboard_supplier_for_ratings]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_buyer_dashboard_supplier_for_ratings]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_get_UserRfqSubmittedWillDoLaterCount]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_get_UserRfqSubmittedWillDoLaterCount]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_RevisionData_Cleanup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_RevisionData_Cleanup]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_RevisionData_v1]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_RevisionData_v1]';


GO
PRINT N'Refreshing Procedure [dbo].[REvieionData_backup_v1_proc_set_RevisionData]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[REvieionData_backup_v1_proc_set_RevisionData]';


GO
PRINT N'Refreshing Procedure [dbo].[REvieionData_backup_v1_proc_set_RevisionData_Cleanup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[REvieionData_backup_v1_proc_set_RevisionData_Cleanup]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_sale_activities]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_sale_activities]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_emailMessages]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_emailMessages]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_set_RevisionData]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_set_RevisionData]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[mp_contacts_prefcountry] WITH CHECK CHECK CONSTRAINT [FK_mp_contacts_prefcountry_mp_contacts];

ALTER TABLE [dbo].[mp_contacts_preferences] WITH CHECK CHECK CONSTRAINT [FK_mp_contacts_preferences_mp_contacts];

ALTER TABLE [dbo].[mp_messages] WITH CHECK CHECK CONSTRAINT [FK_mp_messages_mp_contacts];

ALTER TABLE [dbo].[mp_messages] WITH CHECK CHECK CONSTRAINT [FK_mp_messages_mp_contacts1];

ALTER TABLE [dbo].[mp_rfq_versions] WITH CHECK CHECK CONSTRAINT [FK_mp_rfq_versions_mp_contacts];

ALTER TABLE [dbo].[mp_scheduled_job] WITH CHECK CHECK CONSTRAINT [FK_mp_scheduled_job_mp_contacts];

ALTER TABLE [dbo].[mp_rfq] WITH CHECK CHECK CONSTRAINT [FK_mp_rfq_mp_contacts];

ALTER TABLE [dbo].[mp_gateway_subscription_customers] WITH CHECK CHECK CONSTRAINT [FK_mp_gateway_subscription_customers_mp_contacts];

ALTER TABLE [dbo].[mp_accepted_nda] WITH CHECK CHECK CONSTRAINT [FK_mp_accepted_nda_mp_contacts];

ALTER TABLE [dbo].[mp_communication_details] WITH CHECK CHECK CONSTRAINT [FK_mp_communication_details_mp_contacts];

ALTER TABLE [dbo].[mp_parts_versions] WITH CHECK CHECK CONSTRAINT [FK_mp_parts_versions_mp_contacts];

ALTER TABLE [dbo].[mp_regional_options] WITH CHECK CHECK CONSTRAINT [FK_mp_regional_options_mp_contacts];

ALTER TABLE [dbo].[mp_contacts] WITH CHECK CHECK CONSTRAINT [FK_mp_contacts_mp_addresses];

ALTER TABLE [dbo].[mp_contacts] WITH CHECK CHECK CONSTRAINT [FK_mp_contacts_mp_mst_roles];

ALTER TABLE [dbo].[mp_contacts] WITH CHECK CHECK CONSTRAINT [fk_mp_contacts_mp_system_parameters];

ALTER TABLE [dbo].[mp_contacts] WITH CHECK CHECK CONSTRAINT [FK_mp_contacts_To_mp_mst_incoterm];

ALTER TABLE [dbo].[mp_contacts_buyersellerassociation] WITH CHECK CHECK CONSTRAINT [FK_mp_contacts_buyersellerassociation_mp_contacts];

ALTER TABLE [dbo].[mp_contacts_buyersellerassociation] WITH CHECK CHECK CONSTRAINT [FK_mp_contacts_buyersellerassociation_mp_contacts1];

ALTER TABLE [dbo].[mp_gateway_subscriptions] WITH CHECK CHECK CONSTRAINT [FK_mp_gateway_subscriptions_mp_gateway_subscription_customers];

ALTER TABLE [dbo].[mp_gateway_subscription_customers_cards] WITH CHECK CHECK CONSTRAINT [FK_mp_gateway_subscription_customers_cards_mp_gateway_subscriptions];

ALTER TABLE [dbo].[mp_lead_email_mappings] WITH CHECK CHECK CONSTRAINT [FK_mp_lead_email_mappings_mp_lead];

ALTER TABLE [dbo].[mp_lead_email_mappings] WITH CHECK CHECK CONSTRAINT [FK_mp_lead_email_mappings_mp_lead_emails];

ALTER TABLE [dbo].[mp_rfq_quote_items] WITH CHECK CHECK CONSTRAINT [FK_mp_rfq_quote_items_mp_rfq_parts];

ALTER TABLE [dbo].[mp_rfq_part_quantity] WITH CHECK CHECK CONSTRAINT [FK_mp_rfq_part_quantity_mp_rfq_parts];

ALTER TABLE [dbo].[mp_rfq_parts] WITH CHECK CHECK CONSTRAINT [FK_mp_rfq_parts_mp_rfq];

ALTER TABLE [dbo].[mp_rfq_parts] WITH CHECK CHECK CONSTRAINT [FK_mp_rfq_parts_mp_parts];

ALTER TABLE [dbo].[mp_rfq_parts_file] WITH CHECK CHECK CONSTRAINT [FK_mp_rfq_parts_file_mp_rfq_parts];

ALTER TABLE [dbo].[mp_rfq_quote_items] WITH CHECK CHECK CONSTRAINT [FK_mp_rfq_quote_items_mp_rfq_part_quantity];

ALTER TABLE [dbo].[mp_rfq_quote_items] WITH CHECK CHECK CONSTRAINT [FK_mp_rfq_quote_items_mp_rfq_quote_SupplierQuote];

ALTER TABLE [dbo].[mpOrderManagementPartStatusChangeLogs] WITH CHECK CHECK CONSTRAINT [fk_mp_rfq_quote_items_OrderManagementId_mpOrderManagement_Id];

ALTER TABLE [dbo].[mpCommunityDirectRfqs] WITH CHECK CHECK CONSTRAINT [fk_mpCommunityDirectRfqs_mp_lead_LeadId_LeadId];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.mp_lead'), OBJECT_ID(N'dbo.mp_track_user_activities'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
